-- MySQL dump 10.15  Distrib 10.0.14-MariaDB, for Win64 (x86)
--
-- Host: localhost    Database: blog
-- ------------------------------------------------------
-- Server version	10.0.14-MariaDB

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `categorys`
--

DROP TABLE IF EXISTS `categorys`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `categorys` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) NOT NULL,
  `IsDelete` tinyint(4) NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `LastModifyTime` bigint(20) NOT NULL,
  `IsShow` tinyint(4) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `categorys`
--

LOCK TABLES `categorys` WRITE;
/*!40000 ALTER TABLE `categorys` DISABLE KEYS */;
INSERT INTO `categorys` VALUES (1,'生活百科',1,1,1,1),(2,'最新技术',1,1,1,1),(3,'研究心得',1,1,1,1),(4,'bug修复',1,1,1,0),(5,'我的随笔',1,1408836790712,1408836790712,1),(6,'技术探讨',0,1409687942330,1409687942330,1);
/*!40000 ALTER TABLE `categorys` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `comments`
--

DROP TABLE IF EXISTS `comments`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `comments` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `PID` int(11) NOT NULL,
  `Email` varchar(200) NOT NULL,
  `Name` varchar(50) NOT NULL,
  `Content` varchar(2000) NOT NULL,
  `Site` varchar(200) NOT NULL,
  `IsDelete` tinyint(4) NOT NULL,
  `IsEmailRemind` tinyint(4) NOT NULL,
  `PostID` int(11) NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `IsRead` tinyint(4) NOT NULL,
  `RemindTo` int(11) NOT NULL,
  `IP` char(15) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `comments`
--

LOCK TABLES `comments` WRITE;
/*!40000 ALTER TABLE `comments` DISABLE KEYS */;
INSERT INTO `comments` VALUES (1,0,'lu@lu.com','路人甲','不错不错','',1,0,43,1412702560332,1,0,'119.129.173.40'),(2,0,'123@111.com','xiaobai','威武霸气小蝶妹纸','',0,0,45,1413047109435,1,0,'118.122.94.212'),(3,0,'Soar360@live.com','Soar、毅','冒昧的问一句，大侠是在Windows下开发 还是在Linux下开发？\n---PS：我尝试了Mac下使用Xamarin，开发体验确实不怎样。','http://www.sum16.com',0,0,45,1413217200327,1,0,'211.157.161.230'),(4,3,'jhonge@jhonge.com','小蝶惊鸿','我是使用Visual Studio开发，然后放到Linux中跑','jhonge.net',0,0,45,1413408372577,1,3,'59.42.238.252'),(5,0,'aaa@11.com','xiaobai','对啊对啊我也是这样的','',0,0,45,1413907705143,1,0,'118.122.94.212'),(6,0,'1','1','1','',0,0,36,1415374683112,1,0,'119.129.242.133'),(7,0,'admin@cpzy.net','road','大神学习了 试试看看感谢大神无私奉献','',0,0,43,1416919423142,1,0,'111.1.79.131'),(8,0,'admin@cpzy.net','64位Ubuntu 12.04  安装失败  阿里云主机','Downloading JWS.Mono...Complete\nInstall ZipTool...Complete\nExtracting...Complete\nmono is running...\nkilling mono.......Terminated\nroot@iZ28lw20w01Z:~# Complete\nInstalling Frameork Libary......Complete!\nCreating Mono Script......Complete!\nInstalling Jexus......Complete!\nRegister Envirment......Complete!\nRegister Jexus Web Server Service......install: line 101: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/rc.d/init.d/jwsd: No such file or directory\ninstall: line 107: /etc/r','',0,0,43,1417009898965,1,0,'111.1.79.131'),(9,0,'silent0573@qq.com','笋干','太深入了，对理论有了一些深入的了解了。期待讲解下，Linux下asp.net mvc5 怎么部署。','',0,0,49,1417597564704,1,0,'180.166.58.90'),(10,0,'183441272@qq.com','冰冰','看完了不错，期望继续再探再报：）','http://www.cnblogs.com/ice-baili',0,0,49,1417600101598,1,0,'211.103.129.9'),(11,9,'admin@admin.com','小蝶惊鸿','这个假以时日就可以实现了。·','jhonge.net',0,0,49,1417641059360,1,9,'113.64.216.146'),(12,0,'1997935@qq.com','飞鸟雨花','亲啊！ 为什么不早看到你！\n我三天啥都没干，来回重装。。。\n顶起！','',0,0,43,1417901745506,1,0,'113.118.20.132'),(13,0,'2954243953@qq.com','香港云主机','亲，2015新年发福利啰，独立ip主机限时抢啦','www.henghost.com',1,0,49,1420646449850,1,0,'14.106.209.95'),(14,0,'ofmyice@163.com','笨笨','多来学习学习','',0,0,48,1421396573852,1,0,'119.255.19.138'),(15,0,'fsdfds','sdfs','sfdsfdsfsd','fsdfd',0,0,45,1422455728405,1,0,'121.18.104.6'),(16,0,'xq.l@outlook.com','梁秀钦','非常感谢惊鸿哥啊！您的举例真是恰到好处，学习中....','建设中......',0,0,39,1422976338387,1,0,'111.205.83.130'),(17,0,'xx','xx','xxx','',1,0,50,1423745568178,1,0,'223.223.192.20'),(18,17,'zz','zz','zzz','',1,0,50,1423745579429,0,17,'223.223.192.20');
/*!40000 ALTER TABLE `comments` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `exceptionlog`
--

DROP TABLE IF EXISTS `exceptionlog`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `exceptionlog` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `CreateTime` bigint(20) NOT NULL,
  `URL` varchar(200) NOT NULL,
  `IP` char(15) NOT NULL,
  `ExceptionContent` text NOT NULL,
  `IsRead` tinyint(4) NOT NULL,
  `Method` tinyint(4) NOT NULL,
  `IsDelete` tinyint(4) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=147 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `exceptionlog`
--

LOCK TABLES `exceptionlog` WRITE;
/*!40000 ALTER TABLE `exceptionlog` DISABLE KEYS */;
INSERT INTO `exceptionlog` VALUES (1,1410399083190,'http://jhonge.net/Home/Single/10901153','211.94.161.81','System.NullReferenceException: Object reference not set to an instance of an object\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x00471>\nat System.Linq.Enumerable.First<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>,System.Func`2<Blog.Core.Infrastructure.Extension.TupleClass, bool>,System.Linq.Enumerable/Fallback) <0x000bc>\nat System.Linq.Enumerable.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00084>\nat NPoco.Database.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (NPoco.Sql) <0x00067>\nat Blog.Core.Data.Posts.GetSinglePost (int) <0x00146>\nat Blog.Web.Models.HomeSingleViewModel.GetSinglePost (int) <0x00017>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00032>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(2,1410421701273,'http://www.jhonge.net/','54.164.148.232','System.NullReferenceException: Object reference not set to an instance of an object\n  at MySql.Data.MySqlClient.ResultSet.ReadColumnData (Boolean outputParms) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.ResultSet.NextRow (CommandBehavior behavior) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.Driver.LoadCharacterSets (MySql.Data.MySqlClient.MySqlConnection connection) [0x00000] in <filename unknown>:0 ',1,2,0),(3,1410429753991,'http://reg.163.com/?rands=_1384822973813323751948320','61.157.96.111','MySql.Data.MySqlClient.MySqlException: Invalid attempt to Read when reader is closed.\n  at MySql.Data.MySqlClient.MySqlDataReader.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at NPoco.Database+<Query>d__7`1[Blog.Core.Infrastructure.Extension.TupleClass].MoveNext () [0x00000] in <filename unknown>:0 ',1,2,0),(4,1410434359014,'http://www.jhonge.com/','220.181.125.174','MySql.Data.MySqlClient.MySqlException: Invalid attempt to Read when reader is closed.\n  at MySql.Data.MySqlClient.MySqlDataReader.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.Driver.LoadCharacterSets (MySql.Data.MySqlClient.MySqlConnection connection) [0x00000] in <filename unknown>:0 ',1,2,0),(5,1410443577460,'http://www.jhonge.net/','14.17.29.92','MySql.Data.MySqlClient.MySqlException: Invalid attempt to Read when reader is closed.\n  at MySql.Data.MySqlClient.MySqlDataReader.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.Driver.LoadCharacterSets (MySql.Data.MySqlClient.MySqlConnection connection) [0x00000] in <filename unknown>:0 ',1,2,0),(6,1410445907969,'http://jhonge.net/','192.99.39.71','System.Exception: No current query in data reader\n  at MySql.Data.MySqlClient.MySqlDataReader.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.GetOrdinal (System.String name) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.Driver.LoadCharacterSets (MySql.Data.MySqlClient.MySqlConnection connection) [0x00000] in <filename unknown>:0 ',1,2,0),(7,1410450342301,'http://182.92.106.92/','113.15.196.217','System.NullReferenceException: Object reference not set to an instance of an object\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x00471>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x0023e>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(8,1410467278670,'http://www.jhonge.com/','59.42.236.31','MySql.Data.MySqlClient.MySqlException: Invalid attempt to Read when reader is closed.\n  at MySql.Data.MySqlClient.MySqlDataReader.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.Driver.LoadCharacterSets (MySql.Data.MySqlClient.MySqlConnection connection) [0x00000] in <filename unknown>:0 ',1,2,0),(9,1410467757934,'http://jhonge.net/Management/Post/List?page=2&itemsPerPage=10','59.42.239.5','System.NullReferenceException: Object reference not set to an instance of an object\n  at MySql.Data.MySqlClient.ResultSet.ReadColumnData (Boolean outputParms) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.ResultSet.NextRow (CommandBehavior behavior) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlDataReader.Read () [0x00000] in <filename unknown>:0 \n  at NPoco.Database+<Query>d__7`1[Blog.Core.Models.Entity.Post].MoveNext () [0x00000] in <filename unknown>:0 ',1,2,0),(10,1410468029197,'http://jhonge.net/Home/Index','14.145.236.94','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x0023e>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(11,1410468681009,'http://jhonge.net/Home/Single/22263036','180.153.201.214','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Linq.Enumerable.First<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>,System.Func`2<Blog.Core.Infrastructure.Extension.TupleClass, bool>,System.Linq.Enumerable/Fallback) <0x000bc>\nat System.Linq.Enumerable.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00084>\nat NPoco.Database.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (NPoco.Sql) <0x00067>\nat Blog.Core.Data.Posts.GetSinglePost (int) <0x00146>\nat Blog.Web.Models.HomeSingleViewModel.GetSinglePost (int) <0x00017>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00032>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(12,1410473679250,'http://182.92.106.92/','58.50.243.115','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x0023e>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(13,1410474753816,'http://www.jhonge.net/','64.246.161.190','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x0023e>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(14,1410475287623,'http://www.jhonge.com/','220.181.51.150','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x0023e>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(15,1410475405091,'http://www.jhonge.net/Home/Index/','14.145.236.163','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(16,1410475412244,'http://www.jhonge.net/Home/Index/','119.130.184.60','System.InvalidOperationException: Connection must be valid and open.\n  at MySql.Data.MySqlClient.ExceptionInterceptor.Throw (System.Exception exception) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlConnection.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at (wrapper remoting-invoke-with-check) MySql.Data.MySqlClient.MySqlConnection:Throw (System.Exception)\n  at MySql.Data.MySqlClient.MySqlCommand.Throw (System.Exception ex) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlCommand.CheckState () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlCommand.ExecuteReader (CommandBehavior behavior) [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.MySqlCommand.ExecuteDbDataReader (CommandBehavior behavior) [0x00000] in <filename unknown>:0 \n  at System.Data.Common.DbCommand.ExecuteReader () [0x00000] in <filename unknown>:0 \n  at System.Data.Common.DbCommand.System.Data.IDbCommand.ExecuteReader () [0x00000] in <filename unknown>:0 \n  at NPoco.Database.ExecuteReaderHelper (IDbCommand cmd) [0x00000] in <filename unknown>:0 \n  at NPoco.Database+<Query>d__7`1[Blog.Core.Models.Entity.Tag].MoveNext () [0x00000] in <filename unknown>:0 ',1,2,0),(17,1410475969590,'http://www.jhonge.com/Home/Index','220.181.125.174','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(18,1410477714477,'http://jhonge.net/','59.42.239.5','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(19,1410478111781,'http://jhonge.net/','111.206.36.11','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(20,1410480350132,'http://www.jhonge.com/','14.154.226.180','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(21,1410482116057,'http://jhonge.net/Home/About','148.251.124.174','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Models.Entity.Category>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Models.Entity.Category>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Models.Entity.Category>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Models.Entity.Category> (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x00056>\nat Blog.Core.Data.Category.GetCategoryList () <0x001a2>\nat Blog.Web.Controllers.SharedController.Sidebar () <0x00017>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0004c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(22,1410482116073,'http://jhonge.net/Home/About','148.251.124.174','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Models.Entity.Category>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Models.Entity.Category>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Models.Entity.Category>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Models.Entity.Category> (System.Collections.Generic.IEnumerable`1<Blog.Core.Models.Entity.Category>) <0x00056>\nat Blog.Core.Data.Category.GetCategoryList () <0x001a2>\nat Blog.Web.Controllers.SharedController.Sidebar () <0x00017>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0004c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(23,1410483212906,'http://www.jhonge.com/','46.229.167.149','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(24,1410484276329,'http://jhonge.net/','83.102.231.20','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(25,1410488410693,'http://www.qunar.com/','182.254.141.88','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(26,1410489039522,'http://www.jhonge.net/Home/Single/7272042','207.46.13.86','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Linq.Enumerable.First<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>,System.Func`2<Blog.Core.Infrastructure.Extension.TupleClass, bool>,System.Linq.Enumerable/Fallback) <0x000bc>\nat System.Linq.Enumerable.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00084>\nat NPoco.Database.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (NPoco.Sql) <0x00067>\nat Blog.Core.Data.Posts.GetSinglePost (int) <0x00150>\nat Blog.Web.Models.HomeSingleViewModel.GetSinglePost (int) <0x00017>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00032>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(27,1410497304267,'http://jhonge.net/','183.136.190.40','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(28,1410498545500,'http://www.baidu.com/','61.160.247.181','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(29,1410499803592,'http://www.qunar.com/','182.254.132.201','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(30,1410502626575,'http://www.jhonge.com/','79.116.31.242','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(31,1410506870743,'http://www.jhonge.com/','216.168.111.196','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(32,1410508446746,'http://jhonge.net/','157.55.39.234','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(33,1410509592823,'http://jhonge.net/','157.55.39.234','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(34,1410510718294,'http://www.baidu.com/','218.77.79.48','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(35,1410511615315,'http://www.jhonge.com/','107.170.45.224','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(36,1410512219154,'http://www.baidu.com/?rands=_1080873830036312424008000','61.157.96.111','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(37,1410513500386,'http://jhonge.com/','58.67.143.114','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(38,1410514360891,'http://jhonge.net/','130.185.139.213','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(39,1410514960492,'http://jhonge.com/','157.55.39.180','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00257>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(40,1410516922692,'http://jhonge.net/Home/Single/20496676','66.249.69.10','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Linq.Enumerable.First<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>,System.Func`2<Blog.Core.Infrastructure.Extension.TupleClass, bool>,System.Linq.Enumerable/Fallback) <0x000bc>\nat System.Linq.Enumerable.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00084>\nat NPoco.Database.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (NPoco.Sql) <0x00067>\nat Blog.Core.Data.Posts.GetSinglePost (int) <0x00150>\nat Blog.Web.Models.HomeSingleViewModel.GetSinglePost (int) <0x00017>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00032>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(41,1410517977699,'http://jhonge.net/Home/Single/20496676','66.249.69.37','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00605>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x00643>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Linq.Enumerable.First<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>,System.Func`2<Blog.Core.Infrastructure.Extension.TupleClass, bool>,System.Linq.Enumerable/Fallback) <0x000bc>\nat System.Linq.Enumerable.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00084>\nat NPoco.Database.FirstOrDefault<Blog.Core.Infrastructure.Extension.TupleClass> (NPoco.Sql) <0x00067>\nat Blog.Core.Data.Posts.GetSinglePost (int) <0x00150>\nat Blog.Web.Models.HomeSingleViewModel.GetSinglePost (int) <0x00017>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00032>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(42,1410519243717,'http://jhonge.com/','58.67.143.114','System.Collections.Generic.KeyNotFoundException: The given key was not present in the dictionary.\nat System.Collections.Generic.Dictionary`2<string, MySql.Data.MySqlClient.CharacterSet>.get_Item (string) <0x001b5>\nat MySql.Data.MySqlClient.CharSetMap.GetCharacterSet (MySql.Data.Common.DBVersion,string) <0x00035>\nat MySql.Data.MySqlClient.CharSetMap.GetEncoding (MySql.Data.Common.DBVersion,string) <0x0003e>\nat MySql.Data.MySqlClient.Driver.Configure (MySql.Data.MySqlClient.MySqlConnection) <0x00600>\nat MySql.Data.MySqlClient.MySqlConnection.Open () <0x0063e>\nat NPoco.Database.OpenSharedConnectionImp (bool) <0x0013e>\nat NPoco.Database.OpenSharedConnectionInternal () <0x00019>\nat NPoco.Database/<Query>d__7`1<Blog.Core.Infrastructure.Extension.TupleClass>.MoveNext () <0x001fc>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>.AddEnumerable (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x0009f>\nat System.Collections.Generic.List`1<Blog.Core.Infrastructure.Extension.TupleClass>..ctor (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x000ee>\nat System.Linq.Enumerable.ToList<Blog.Core.Infrastructure.Extension.TupleClass> (System.Collections.Generic.IEnumerable`1<Blog.Core.Infrastructure.Extension.TupleClass>) <0x00056>\nat Blog.Core.Data.Posts.GetPostList (int,int,int) <0x00248>\nat Blog.Web.Models.HomeIndexViewModel.GetPostList (int,int) <0x0004c>\nat Blog.Web.Controllers.HomeController.Index (int,int) <0x00049>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000c2>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(43,1411024788949,'http://www.jhonge.net/Home/Single/','203.208.60.163','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(44,1411047974368,'http://www.jhonge.net/Home/Single/','203.208.60.159','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(45,1411049435337,'http://jhonge.net/Home/Single/7433600','58.67.143.114','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x0001f>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(46,1411049441048,'http://jhonge.net/Home/Single/7433600','58.67.143.114','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x0001f>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(47,1411050746844,'http://jhonge.net/Home/Single/7433600','180.153.163.191','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x0001f>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(48,1411069578358,'http://www.jhonge.net/Home/Single/','203.208.60.160','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(49,1411091171715,'http://www.jhonge.net/Home/Single/','203.208.60.156','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(50,1411897834106,'http://jhonge.com/Home/Single/','66.249.79.83','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(51,1411925799960,'http://jhonge.com/Home/Single/','66.249.79.99','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(52,1411925980798,'http://jhonge.com/Home/Single/','66.249.79.91','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(53,1411981489730,'http://jhonge.net/Management/Post/Edit','58.67.143.116','MySql.Data.MySqlClient.MySqlException: Column \'Summary\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,1,0),(54,1412005165453,'http://jhonge.net/Home/About','58.67.143.116','System.IO.DirectoryNotFoundException: Could not find a part of the path \"/tmp/root-temp-aspnet-0/1b82fbd4/724a3c27.tmp\".\n  at System.IO.FileStream..ctor (System.String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean anonymous, FileOptions options) [0x00000] in <filename unknown>:0 \n  at System.IO.FileStream..ctor (System.String path, FileMode mode) [0x00000] in <filename unknown>:0 \n  at (wrapper remoting-invoke-with-check) System.IO.FileStream:.ctor (string,System.IO.FileMode)\n  at System.CodeDom.Compiler.TempFileCollection.get_BasePath () [0x00000] in <filename unknown>:0 ',1,2,0),(55,1412005167956,'http://jhonge.net/Home/About','58.67.143.116','System.IO.DirectoryNotFoundException: Could not find a part of the path \"/tmp/root-temp-aspnet-0/1b82fbd4/6c8cd4f3.tmp\".\n  at System.IO.FileStream..ctor (System.String path, FileMode mode, FileAccess access, FileShare share, Int32 bufferSize, Boolean anonymous, FileOptions options) [0x00000] in <filename unknown>:0 \n  at System.IO.FileStream..ctor (System.String path, FileMode mode) [0x00000] in <filename unknown>:0 \n  at (wrapper remoting-invoke-with-check) System.IO.FileStream:.ctor (string,System.IO.FileMode)\n  at System.CodeDom.Compiler.TempFileCollection.get_BasePath () [0x00000] in <filename unknown>:0 ',1,2,0),(56,1412070106152,'http://jhonge.com/Home/Single/','66.249.69.123','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(57,1412099536045,'http://jhonge.com/Home/Single/','66.249.69.123','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(58,1412203725266,'http://jhonge.net/Home/Single/14240063','219.128.43.39','System.NullReferenceException: Object reference not set to an instance of an object\n  at ASP._Page_Views_Home_Single_cshtml.Execute () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.WebViewPage.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy (System.Web.WebPages.WebPageContext pageContext, System.IO.TextWriter writer, System.Web.WebPages.WebPageRenderingBase startPage) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.RazorView.RenderView (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer, System.Object instance) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.BuildManagerCompiledView.Render (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(59,1412203730332,'http://jhonge.net/Home/Single/14240052','219.128.43.39','System.NullReferenceException: Object reference not set to an instance of an object\n  at ASP._Page_Views_Home_Single_cshtml.Execute () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.WebViewPage.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy (System.Web.WebPages.WebPageContext pageContext, System.IO.TextWriter writer, System.Web.WebPages.WebPageRenderingBase startPage) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.RazorView.RenderView (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer, System.Object instance) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.BuildManagerCompiledView.Render (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(60,1412203735972,'http://jhonge.net/Home/Single/14246452','219.128.43.39','System.NullReferenceException: Object reference not set to an instance of an object\n  at ASP._Page_Views_Home_Single_cshtml.Execute () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.WebViewPage.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy (System.Web.WebPages.WebPageContext pageContext, System.IO.TextWriter writer, System.Web.WebPages.WebPageRenderingBase startPage) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.RazorView.RenderView (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer, System.Object instance) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.BuildManagerCompiledView.Render (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(61,1412203736062,'http://jhonge.net/Home/Single/14246452','180.153.201.64','System.NullReferenceException: Object reference not set to an instance of an object\n  at ASP._Page_Views_Home_Single_cshtml.Execute () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.WebViewPage.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy (System.Web.WebPages.WebPageContext pageContext, System.IO.TextWriter writer, System.Web.WebPages.WebPageRenderingBase startPage) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.RazorView.RenderView (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer, System.Object instance) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.BuildManagerCompiledView.Render (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(62,1412204939001,'http://jhonge.net/Home/Single/14240052','112.65.193.14','System.NullReferenceException: Object reference not set to an instance of an object\n  at ASP._Page_Views_Home_Single_cshtml.Execute () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.WebViewPage.ExecutePageHierarchy () [0x00000] in <filename unknown>:0 \n  at System.Web.WebPages.WebPageBase.ExecutePageHierarchy (System.Web.WebPages.WebPageContext pageContext, System.IO.TextWriter writer, System.Web.WebPages.WebPageRenderingBase startPage) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.RazorView.RenderView (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer, System.Object instance) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.BuildManagerCompiledView.Render (System.Web.Mvc.ViewContext viewContext, System.IO.TextWriter writer) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(63,1412337422888,'http://jhonge.net/Home/Single/','171.38.207.156','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(64,1412344235377,'http://jhonge.net/Home/Single/','171.38.207.156','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(65,1412582546340,'http://www.jhonge.com/Home/Single/','66.249.64.17','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(66,1412609087894,'http://www.jhonge.com/Home/Single/','66.249.64.9','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(67,1412630818335,'http://www.jhonge.com/Home/Single/','66.249.67.17','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(68,1412652564657,'http://www.jhonge.com/Home/Single/','66.249.67.2','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(69,1412698154977,'http://jhonge.net/Home/Single/','171.38.209.229','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(70,1412698544075,'http://jhonge.net/Home/Single/29286488','14.145.234.6','MySql.Data.MySqlClient.MySqlException: Table \'blog.Comments\' doesn\'t exist\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(71,1412698545548,'http://jhonge.net/Home/Single/29286488','119.130.185.243','MySql.Data.MySqlClient.MySqlException: Table \'blog.Comments\' doesn\'t exist\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(72,1412700425481,'http://jhonge.net/Home/Single/7433600','119.129.172.81','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00027>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(73,1412700436267,'http://jhonge.net/Home/Single/7433600','14.145.237.109','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00027>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(74,1412701882605,'http://jhonge.net/Home/Single/7433600','180.153.214.189','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00027>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(75,1412702179010,'http://www.jhonge.net/Home/Single','101.226.65.108','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(76,1412738603873,'http://jhonge.net/Home/AddComment','203.208.60.13','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(77,1412758641871,'http://jhonge.net/Home/Single/7433600','58.67.143.116','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (int) <0x00027>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x0008c>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(78,1412761423186,'http://jhonge.net/Home/AddComment','203.208.60.2','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(79,1412785223573,'http://www.jhonge.net/Home/Single/','218.30.103.83','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(80,1412785426833,'http://jhonge.net/Home/Single/','219.223.212.59','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(81,1412786546752,'http://jhonge.net/Home/AddComment','203.208.60.18','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(82,1412793931725,'http://jhonge.net/Home/Single/','171.38.232.252','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(83,1412797790986,'http://jhonge.net/Home/AddComment','203.208.60.4','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(84,1412817744413,'http://jhonge.net/Home/AddComment','66.249.79.85','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(85,1412827953442,'http://jhonge.net/Home/AddComment','66.249.79.77','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(86,1412836305479,'http://jhonge.net/Home/AddComment','66.249.67.77','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(87,1412858141432,'http://jhonge.net/Home/AddComment','66.249.67.77','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(88,1412879573568,'http://jhonge.net/Home/AddComment','66.249.67.85','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(89,1412901328553,'http://jhonge.net/Home/AddComment','66.249.69.21','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(90,1412953738424,'http://jhonge.net/Home/Single/我','122.112.10.90','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(91,1413048425472,'http://jhonge.net/Home/Single/','66.249.69.37','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(92,1413060378935,'http://jhonge.net/Home/Single/我','119.129.172.139','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(93,1413061269177,'http://jhonge.net/Home/Single/','180.153.212.13','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(94,1413061707024,'http://jhonge.net/Home/Single/我','180.153.163.206','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(95,1413074706008,'http://jhonge.net/Home/Single/','66.249.69.21','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(96,1413096440606,'http://jhonge.net/Home/Single/','66.249.69.37','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(97,1413118376728,'http://jhonge.net/Home/Single/','66.249.69.10','System.ArgumentException: 对于“Blog.Web.Controllers.HomeController”中方法“System.Web.Mvc.ActionResult Single(Int32)”的不可以为 null 的类型“System.Int32”的参数“id”，参数字典包含一个 null 项。可选参数必须为引用类型、可以为 null 的类型或声明为可选参数。\nParameter name: parameters\n  at System.Web.Mvc.ActionDescriptor.ExtractParameterFromDictionary (System.Reflection.ParameterInfo parameterInfo, IDictionary`2 parameters, System.Reflection.MethodInfo methodInfo) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor+<>c__DisplayClass1.<Execute>b__0 (System.Reflection.ParameterInfo parameterInfo) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Reflection.ParameterInfo,System.Object].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToArray[Object] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext controllerContext, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor, IDictionary`2 parameters) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+<>c__DisplayClass8`1[System.Web.Mvc.ActionResult].<BeginSynchronous>b__7 (IAsyncResult _) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper+WrappedAsyncResult`1[System.Web.Mvc.ActionResult].End () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncResultWrapper.End[ActionResult] (IAsyncResult asyncResult, System.Object tag) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass37+<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () [0x00000] in <filename unknown>:0 ',1,2,0),(98,1414390508938,'http://jhonge.net/home/single/3864001','188.165.15.98','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(99,1414503583210,'http://jhonge.net/home/single/7560042','180.153.206.24','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(100,1414769373604,'http://jhonge.net/home/single/11267463','125.69.66.103','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(101,1414769446250,'http://jhonge.net/home/single/11267463','125.69.66.103','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(102,1414838203768,'http://jhonge.net/home/single/24085607','101.226.169.209','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(103,1414838217692,'http://jhonge.net/home/single/6617682','101.226.167.217','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(104,1414838351661,'http://jhonge.net/home/single/15235204','101.226.167.234','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(105,1414838430172,'http://jhonge.net/home/single/25734827','101.226.167.241','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(106,1414838971963,'http://jhonge.net/home/single/14240064','182.118.21.254','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(107,1414839041289,'http://jhonge.net/home/about','182.118.20.220','System.InvalidOperationException: 未找到视图“about”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/about.aspx\n~/Views/home/about.ascx\n~/Views/Shared/about.aspx\n~/Views/Shared/about.ascx\n~/Views/home/about.cshtml\n~/Views/home/about.vbhtml\n~/Views/Shared/about.cshtml\n~/Views/Shared/about.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(108,1414839525290,'http://jhonge.net/home/single/14524864','182.118.25.206','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(109,1414839545450,'http://jhonge.net/home/single/19747286','182.118.25.214','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(110,1414839596252,'http://jhonge.net/home/single/26275207','182.118.20.203','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(111,1414839911737,'http://jhonge.net/home/single/17711065','182.118.20.202','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(112,1414839970855,'http://jhonge.net/home/single/29427288','182.118.22.218','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(113,1414839970933,'http://jhonge.net/home/single/3864001','182.118.20.223','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(114,1414840130890,'http://jhonge.net/home/single/20496676','182.118.22.220','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(115,1414845318016,'http://jhonge.net/home/single/20496676','113.64.125.70','System.InvalidOperationException: 未找到视图“single”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/home/single.aspx\n~/Views/home/single.ascx\n~/Views/Shared/single.aspx\n~/Views/Shared/single.ascx\n~/Views/home/single.cshtml\n~/Views/home/single.vbhtml\n~/Views/Shared/single.cshtml\n~/Views/Shared/single.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(116,1415750012769,'http://jhonge.net/Home/AddComment','66.249.67.77','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(117,1415883970085,'http://jhonge.net/Home/AddComment','192.154.200.22','System.Web.HttpRequestValidationException: A potentially dangerous Request.Form value was detected from the client (Content=\"<script></script>\").\n  at System.Web.HttpRequest.ThrowValidationException (System.String name, System.String key, System.String value) [0x00000] in <filename unknown>:0 \n  at System.Web.HttpRequest.ValidateString (System.String key, System.String value, RequestValidationSource source) [0x00000] in <filename unknown>:0 \n  at Microsoft.Web.Infrastructure.DynamicValidationHelper.LazyWebROCollection.Validate (System.String key, System.String value) [0x00000] in <filename unknown>:0 \n  at Microsoft.Web.Infrastructure.DynamicValidationHelper.LazyWebROCollection.Get (System.String name) [0x00000] in <filename unknown>:0 \n  at System.Collections.Specialized.NameValueCollection.get_Item (System.String name) [0x00000] in <filename unknown>:0 \n  at System.Web.HttpRequest.ValidateNameValueCollection (System.String name, System.Collections.Specialized.NameValueCollection coll) [0x00000] in <filename unknown>:0 \n  at System.Web.HttpRequest.get_Form () [0x00000] in <filename unknown>:0 \n  at System.Web.HttpRequestWrapper.get_Form () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.FormValueProvider..ctor (System.Web.Mvc.ControllerContext controllerContext, IUnvalidatedRequestValues unvalidatedValues) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.FormValueProviderFactory.GetValueProvider (System.Web.Mvc.ControllerContext controllerContext) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ValueProviderFactoryCollection+<>c__DisplayClassc.<GetValueProvider>b__7 (System.Web.Mvc.ValueProviderFactory factory) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[System.Web.Mvc.ValueProviderFactory,<>f__AnonymousType2`2[System.Web.Mvc.ValueProviderFactory,System.Web.Mvc.IValueProvider]].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateWhereIterator>c__Iterator1E`1[<>f__AnonymousType2`2[System.Web.Mvc.ValueProviderFactory,System.Web.Mvc.IValueProvider]].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable+<CreateSelectIterator>c__Iterator10`2[<>f__AnonymousType2`2[System.Web.Mvc.ValueProviderFactory,System.Web.Mvc.IValueProvider],System.Web.Mvc.IValueProvider].MoveNext () [0x00000] in <filename unknown>:0 \n  at System.Collections.Generic.List`1[System.Web.Mvc.IValueProvider].AddEnumerable (IEnumerable`1 enumerable) [0x00000] in <filename unknown>:0 \n  at System.Collections.Generic.List`1[System.Web.Mvc.IValueProvider]..ctor (IEnumerable`1 collection) [0x00000] in <filename unknown>:0 \n  at System.Linq.Enumerable.ToList[IValueProvider] (IEnumerable`1 source) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ValueProviderFactoryCollection.GetValueProvider (System.Web.Mvc.ControllerContext controllerContext) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerBase.get_ValueProvider () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.GetParameterValue (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ParameterDescriptor parameterDescriptor) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.GetParameterValues (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionDescriptor actionDescriptor) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass25.<BeginInvokeAction>b__1e (System.AsyncCallback asyncCallback, System.Object asyncState) [0x00000] in <filename unknown>:0 ',1,1,0),(118,1415883970115,'http://jhonge.net/Home/AddComment','192.154.200.22','System.InvalidOperationException: 未找到视图“Error”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Views/Home/Error.aspx\n~/Views/Home/Error.ascx\n~/Views/Shared/Error.aspx\n~/Views/Shared/Error.ascx\n~/Views/Home/Error.cshtml\n~/Views/Home/Error.vbhtml\n~/Views/Shared/Error.cshtml\n~/Views/Shared/Error.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass25+<>c__DisplayClass2c.<BeginInvokeAction>b__21 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.Async.AsyncControllerActionInvoker+<>c__DisplayClass25.<BeginInvokeAction>b__22 (IAsyncResult asyncResult) [0x00000] in <filename unknown>:0 ',1,1,0),(119,1416151730665,'http://jhonge.net/Management/Default/Index','113.111.202.240','System.InvalidOperationException: 未找到视图“Index”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/Default/Index.aspx\n~/Areas/Management/Views/Default/Index.ascx\n~/Areas/Management/Views/Shared/Index.aspx\n~/Areas/Management/Views/Shared/Index.ascx\n~/Views/Default/Index.aspx\n~/Views/Default/Index.ascx\n~/Views/Shared/Index.aspx\n~/Views/Shared/Index.ascx\n~/Areas/Management/Views/Default/Index.cshtml\n~/Areas/Management/Views/Default/Index.vbhtml\n~/Areas/Management/Views/Shared/Index.cshtml\n~/Areas/Management/Views/Shared/Index.vbhtml\n~/Views/Default/Index.cshtml\n~/Views/Default/Index.vbhtml\n~/Views/Shared/Index.cshtml\n~/Views/Shared/Index.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(120,1416151756542,'http://jhonge.net/Management/Default/Index','113.111.202.240','System.InvalidOperationException: 未找到视图“Index”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/Default/Index.aspx\n~/Areas/Management/Views/Default/Index.ascx\n~/Areas/Management/Views/Shared/Index.aspx\n~/Areas/Management/Views/Shared/Index.ascx\n~/Views/Default/Index.aspx\n~/Views/Default/Index.ascx\n~/Views/Shared/Index.aspx\n~/Views/Shared/Index.ascx\n~/Areas/Management/Views/Default/Index.cshtml\n~/Areas/Management/Views/Default/Index.vbhtml\n~/Areas/Management/Views/Shared/Index.cshtml\n~/Areas/Management/Views/Shared/Index.vbhtml\n~/Views/Default/Index.cshtml\n~/Views/Default/Index.vbhtml\n~/Views/Shared/Index.cshtml\n~/Views/Shared/Index.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(121,1416151774447,'http://jhonge.net/management/post/list','113.111.202.240','System.InvalidOperationException: 未找到视图“list”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/post/list.aspx\n~/Areas/Management/Views/post/list.ascx\n~/Areas/Management/Views/Shared/list.aspx\n~/Areas/Management/Views/Shared/list.ascx\n~/Views/post/list.aspx\n~/Views/post/list.ascx\n~/Views/Shared/list.aspx\n~/Views/Shared/list.ascx\n~/Areas/Management/Views/post/list.cshtml\n~/Areas/Management/Views/post/list.vbhtml\n~/Areas/Management/Views/Shared/list.cshtml\n~/Areas/Management/Views/Shared/list.vbhtml\n~/Views/post/list.cshtml\n~/Views/post/list.vbhtml\n~/Views/Shared/list.cshtml\n~/Views/Shared/list.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(122,1416350501367,'http://jhonge.net/Home/AddComment','113.111.214.140','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x0002d>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(123,1416350930140,'http://jhonge.net/Home/AddComment','112.64.235.246','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x0002d>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(124,1416842463843,'http://jhonge.net/Home/AddComment','66.249.69.10','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x0002d>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(125,1420707674156,'http://jhonge.net/Home/AddComment','66.249.79.69','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(126,1420802524561,'http://jhonge.net/Home/AddComment','66.249.65.186','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000c6>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00085>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001fc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00031>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00086>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(127,1422382920945,'http://jhonge.net/Home/AddComment','66.249.65.182','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Core.Data.Comments.AddComment (Blog.Core.Models.Entity.Comment) <0x000cb>\nat Blog.Web.Controllers.HomeController.AddComment (Blog.Core.Models.Entity.Comment) <0x0007c>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x00093>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00028>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00081>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(128,1422659881698,'http://jhonge.net/Home/Single/1530','218.66.112.60','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (System.Nullable`1<int>,int) <0x000aa>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000ab>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00028>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00081>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(129,1422659886206,'http://jhonge.net/Home/Single/1530','218.66.112.60','System.DivideByZeroException: Division by zero\nat Blog.Core.Infrastructure.Tools.IDDecodeTool.Undecode (int) <0x0005d>\nat Blog.Web.Controllers.HomeController.Single (System.Nullable`1<int>,int) <0x000aa>\nat (wrapper dynamic-method) object.lambda_method (System.Runtime.CompilerServices.Closure,System.Web.Mvc.ControllerBase,object[]) <0x000ab>\nat System.Web.Mvc.ActionMethodDispatcher.Execute (System.Web.Mvc.ControllerBase,object[]) <0x0002d>\nat System.Web.Mvc.ReflectedActionDescriptor.Execute (System.Web.Mvc.ControllerContext,System.Collections.Generic.IDictionary`2<string, object>) <0x001dc>\nat System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00033>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.InvokeSynchronousActionMethod (System.Web.Mvc.ControllerContext,System.Web.Mvc.ActionDescriptor,System.Collections.Generic.IDictionary`2<string, object>) <0x00023>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41 () <0x00027>\nat System.Web.Mvc.Async.AsyncResultWrapper/<>c__DisplayClass8`1<System.Web.Mvc.ActionResult>.<BeginSynchronous>b__7 (System.IAsyncResult) <0x00019>\nat System.Web.Mvc.Async.AsyncResultWrapper/WrappedAsyncResult`1<System.Web.Mvc.ActionResult>.End () <0x00065>\nat System.Web.Mvc.Async.AsyncResultWrapper.End<System.Web.Mvc.ActionResult> (System.IAsyncResult,object) <0x0004f>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod (System.IAsyncResult) <0x00028>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass37/<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33 () <0x00081>\nat System.Web.Mvc.Async.AsyncControllerActionInvoker/<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49 () <0x00038>\n',1,2,0),(130,1422748067849,'http://jhonge.com/Home/AddComment','66.249.73.219','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(131,1422997978300,'http://www.jhonge.com/Home/AddComment','203.208.60.50','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(132,1423833642608,'http://www.jhonge.com/Home/AddComment','66.249.73.169','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(133,1424071652922,'http://www.jhonge.com/Home/AddComment','66.249.64.10','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(134,1424814490828,'http://www.jhonge.com/Home/AddComment','66.249.73.185','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(135,1425288072540,'http://jhonge.net/Management/Files/List','58.67.143.116','System.InvalidOperationException: 未找到视图“List”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/Files/List.aspx\n~/Areas/Management/Views/Files/List.ascx\n~/Areas/Management/Views/Shared/List.aspx\n~/Areas/Management/Views/Shared/List.ascx\n~/Views/Files/List.aspx\n~/Views/Files/List.ascx\n~/Views/Shared/List.aspx\n~/Views/Shared/List.ascx\n~/Areas/Management/Views/Files/List.cshtml\n~/Areas/Management/Views/Files/List.vbhtml\n~/Areas/Management/Views/Shared/List.cshtml\n~/Areas/Management/Views/Shared/List.vbhtml\n~/Views/Files/List.cshtml\n~/Views/Files/List.vbhtml\n~/Views/Shared/List.cshtml\n~/Views/Shared/List.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(136,1425288081505,'http://jhonge.net/Management/Files/List','58.67.143.116','System.InvalidOperationException: 未找到视图“List”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/Files/List.aspx\n~/Areas/Management/Views/Files/List.ascx\n~/Areas/Management/Views/Shared/List.aspx\n~/Areas/Management/Views/Shared/List.ascx\n~/Views/Files/List.aspx\n~/Views/Files/List.ascx\n~/Views/Shared/List.aspx\n~/Views/Shared/List.ascx\n~/Areas/Management/Views/Files/List.cshtml\n~/Areas/Management/Views/Files/List.vbhtml\n~/Areas/Management/Views/Shared/List.cshtml\n~/Areas/Management/Views/Shared/List.vbhtml\n~/Views/Files/List.cshtml\n~/Views/Files/List.vbhtml\n~/Views/Shared/List.cshtml\n~/Views/Shared/List.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(137,1425288085326,'http://jhonge.net/Management/Link/List','58.67.143.116','System.InvalidOperationException: 未找到视图“List”或其母版视图，或没有视图引擎支持搜索的位置。搜索了以下位置: \n~/Areas/Management/Views/Link/List.aspx\n~/Areas/Management/Views/Link/List.ascx\n~/Areas/Management/Views/Shared/List.aspx\n~/Areas/Management/Views/Shared/List.ascx\n~/Views/Link/List.aspx\n~/Views/Link/List.ascx\n~/Views/Shared/List.aspx\n~/Views/Shared/List.ascx\n~/Areas/Management/Views/Link/List.cshtml\n~/Areas/Management/Views/Link/List.vbhtml\n~/Areas/Management/Views/Shared/List.cshtml\n~/Areas/Management/Views/Shared/List.vbhtml\n~/Views/Link/List.cshtml\n~/Views/Link/List.vbhtml\n~/Views/Shared/List.cshtml\n~/Views/Shared/List.vbhtml\n  at System.Web.Mvc.ViewResult.FindView (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ViewResultBase.ExecuteResult (System.Web.Mvc.ControllerContext context) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResult (System.Web.Mvc.ControllerContext controllerContext, System.Web.Mvc.ActionResult actionResult) [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker+<>c__DisplayClass1a.<InvokeActionResultWithFilters>b__17 () [0x00000] in <filename unknown>:0 \n  at System.Web.Mvc.ControllerActionInvoker.InvokeActionResultFilter (IResultFilter filter, System.Web.Mvc.ResultExecutingContext preContext, System.Func`1 continuation) [0x00000] in <filename unknown>:0 ',1,2,0),(138,1426042417390,'http://jhonge.net/Home/AddComment','66.249.64.10','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(139,1426259966097,'http://www.jhonge.com/Home/AddComment','180.76.5.27','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(140,1426417319583,'http://www.jhonge.com/Home/AddComment','66.249.73.185','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(141,1427611214561,'http://www.jhonge.com/Home/AddComment','193.201.227.41','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(142,1429615630478,'http://jhonge.net/Home/AddComment','66.249.65.182','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(143,1429767178748,'http://www.jhonge.com/Home/AddComment','66.249.65.46','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',1,2,0),(144,1432630554916,'http://jhonge.net/Home/AddComment','204.236.235.245','MySql.Data.MySqlClient.MySqlException: Column \'Email\' cannot be null\n  at MySql.Data.MySqlClient.MySqlStream.ReadPacket () [0x00000] in <filename unknown>:0 \n  at MySql.Data.MySqlClient.NativeDriver.GetResult (System.Int32& affectedRow, System.Int64& insertedId) [0x00000] in <filename unknown>:0 ',0,2,0),(145,1437241741163,'http://localhost:48055/Management/Post/Edit','::1','MySql.Data.MySqlClient.MySqlException (0x80004005): Data too long for column \'Content\' at row 1\r\n   ? MySql.Data.MySqlClient.MySqlStream.ReadPacket()\r\n   ? MySql.Data.MySqlClient.NativeDriver.GetResult(Int32& affectedRow, Int64& insertedId)\r\n   ? MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32& affectedRows, Int64& insertedId)\r\n   ? MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)\r\n   ? MySql.Data.MySqlClient.MySqlDataReader.NextResult()\r\n   ? MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   ? MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()\r\n   ? NPoco.Database.ExecuteNonQueryHelper(IDbCommand cmd) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1781\r\n   ? NPoco.Database.Execute(Sql Sql) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 618\r\n   ? NPoco.Database.Execute(String sql, Object[] args) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 598\r\n   ? NPoco.Database.Update(String tableName, String primaryKeyName, Object poco, Object primaryKeyValue, IEnumerable`1 columns) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1430\r\n   ? NPoco.Database.Update(Object poco, Object primaryKeyValue, IEnumerable`1 columns) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1535\r\n   ? NPoco.Database.Update(Object poco) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1524\r\n   ? Blog.Core.Data.DB.Update(Object poco) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Core\\Data\\Base.cs:?? 69\r\n   ? Blog.Core.Data.Posts.Save(Post model) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Core\\Data\\Posts.cs:?? 22\r\n   ? Blog.Web.Areas.Management.Controllers.PostController.Edit(PostEditViewModel model) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Web\\Areas\\Management\\Controllers\\PostController.cs:?? 49\r\n   ? lambda_method(Closure , ControllerBase , Object[] )\r\n   ? System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)\r\n   ? System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)\r\n   ? System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)',0,1,0),(146,1437243698265,'http://localhost:48055/Management/Post/Edit','::1','MySql.Data.MySqlClient.MySqlException (0x80004005): Data too long for column \'Content\' at row 1\r\n   ? MySql.Data.MySqlClient.MySqlStream.ReadPacket()\r\n   ? MySql.Data.MySqlClient.NativeDriver.GetResult(Int32& affectedRow, Int64& insertedId)\r\n   ? MySql.Data.MySqlClient.Driver.GetResult(Int32 statementId, Int32& affectedRows, Int64& insertedId)\r\n   ? MySql.Data.MySqlClient.Driver.NextResult(Int32 statementId, Boolean force)\r\n   ? MySql.Data.MySqlClient.MySqlDataReader.NextResult()\r\n   ? MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(CommandBehavior behavior)\r\n   ? MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery()\r\n   ? NPoco.Database.ExecuteNonQueryHelper(IDbCommand cmd) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1781\r\n   ? NPoco.Database.Execute(Sql Sql) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 618\r\n   ? NPoco.Database.Execute(String sql, Object[] args) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 598\r\n   ? NPoco.Database.Update(String tableName, String primaryKeyName, Object poco, Object primaryKeyValue, IEnumerable`1 columns) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1430\r\n   ? NPoco.Database.Update(Object poco, Object primaryKeyValue, IEnumerable`1 columns) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1535\r\n   ? NPoco.Database.Update(Object poco) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\NPoco\\src\\NPoco\\Database.cs:?? 1524\r\n   ? Blog.Core.Data.DB.Update(Object poco) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Core\\Data\\Base.cs:?? 69\r\n   ? Blog.Core.Data.Posts.Save(Post model) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Core\\Data\\Posts.cs:?? 22\r\n   ? Blog.Web.Areas.Management.Controllers.PostController.Edit(PostEditViewModel model) ?? e:\\ASP\\Mono\\project\\Blog\\Blog\\Blog.Web\\Areas\\Management\\Controllers\\PostController.cs:?? 49\r\n   ? lambda_method(Closure , ControllerBase , Object[] )\r\n   ? System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)\r\n   ? System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)\r\n   ? System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()\r\n   ? System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)',0,1,0);
/*!40000 ALTER TABLE `exceptionlog` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `files`
--

DROP TABLE IF EXISTS `files`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `files` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `FileName` varchar(255) NOT NULL,
  `Size` bigint(20) NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `SavePath` varchar(255) NOT NULL,
  `ExtensionName` varchar(20) NOT NULL,
  `DownloadCount` int(255) NOT NULL,
  `IsDeleted` tinyint(4) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `files`
--

LOCK TABLES `files` WRITE;
/*!40000 ALTER TABLE `files` DISABLE KEYS */;
INSERT INTO `files` VALUES (1,'fate stay night.jpg',177337,1412700517350,'/Files/2014/10/1412700517345','.jpg',5,0),(2,'陈奕迅 - 爱情转移.mp3',4123295,1413129337430,'/Files/2014/10/1413129337418','.mp3',92,0),(3,'jwsmono_net.sh',3615,1413986931482,'/Files/2014/10/1413986931477','.sh',10,1),(4,'jwsmono_net.sh',3558,1413998270361,'/Files/2014/10/1413998270361','.sh',112,0),(5,'Ubuntu安装配置ISCSI.txt',569,1414060376374,'/Files/2014/10/1414060376369','.txt',0,0),(6,'JexusForASP.NET5.7z',190390,1422739208371,'/Files/2015/1/1422739208368','.7z',165,0),(7,'pdf.net.7z',4669351,1425512977293,'/Files/2015/3/1425512977277','.7z',6,1),(8,'pdf.net.7z',1079248,1425513226419,'/Files/2015/3/1425513226414','.7z',93,0);
/*!40000 ALTER TABLE `files` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `link`
--

DROP TABLE IF EXISTS `link`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `link` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) NOT NULL,
  `URL` varchar(2000) NOT NULL,
  `IsDeleted` tinyint(4) NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `LastModifyTime` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `link`
--

LOCK TABLES `link` WRITE;
/*!40000 ALTER TABLE `link` DISABLE KEYS */;
INSERT INTO `link` VALUES (1,'百度','http://www.baidu.com',1,0,0),(2,'优酷','http://www.youku.com',1,0,1408883075281),(3,'我的博客园','http://www.cnblogs.com/xiaodiejinghong/',0,0,1410054283287),(4,'Linux.NET大本营','http://linuxdot.net/',0,0,1410054332467),(5,'至爱分享','http://www.so-love.com/',0,0,1410088985718),(6,'Questions','http://www.asquestion.com/',0,0,1410089082382),(7,'张志敏的技术专栏','http://beginor.github.io/',0,0,1410125649736),(8,'Jexus英文站','https://jexus.codeplex.com',0,0,1411335599198),(9,'张善友的园子','http://www.cnblogs.com/shanyou',0,0,1411335662434),(10,'衣明志的技术博客','http://yimingzhi.net/',0,0,1411335679213),(11,'老赵点滴','http://blog.zhaojie.me/',0,0,1411335784789),(12,'小白的站子','http://www.olexe.cn/',0,0,1412114046011),(13,'PDF.NET SOD官网','http://www.pwmis.com/sqlmap',0,1422972830109,1422972830109),(14,'隐的后花园','http://www.seaning.com/',0,1430608438272,1430608438272);
/*!40000 ALTER TABLE `link` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `posts`
--

DROP TABLE IF EXISTS `posts`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `posts` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `Title` varchar(50) NOT NULL,
  `Content` longtext NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `LastModifyTime` bigint(20) NOT NULL,
  `ViewsCount` int(10) unsigned NOT NULL,
  `CategoryID` int(11) NOT NULL,
  `Tags` varchar(50) NOT NULL,
  `IsDelete` tinyint(4) NOT NULL,
  `IsPublish` tinyint(4) NOT NULL,
  `IsTop` tinyint(4) NOT NULL,
  `Summary` text NOT NULL,
  `PublishTime` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `posts`
--

LOCK TABLES `posts` WRITE;
/*!40000 ALTER TABLE `posts` DISABLE KEYS */;
INSERT INTO `posts` VALUES (1,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>\r\n<p>好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</p>\r\n<p>　　1、NOFILE功能　　</p>\r\n<p>　　2、Jexus的URLRewrite</p>\r\n<p>　　3、Jexus如果做IP过滤</p>\r\n<p>　　4、对目录访问禁止</p>\r\n<p>　　5、Jexus如何使用反向代理功能</p>\r\n<p>　　6、如何使用SendFile技术</p>\r\n<p>　　7、Jexus的高速缓存</p>\r\n<p>　　8、Jexus如何对静态资源进行压缩传输</p>\r\n<hr />\r\n<p>0、新建一个网站配置</p>\r\n<p>这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</p>\r\n<p>上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</p>\r\n<p><span class=\"Apple-converted-space\">Jexus中默认</span>SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/07195426-860ad529f327422e8105e5e0d31bf181.png\" alt=\"\" /></p>\r\n<p>该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</p>\r\n<p>先来讲解一下这三项是干嘛用的：</p>\r\n<p>port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</p>\r\n<p>　　这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</p>\r\n<p>&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</p>\r\n<p>　　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</p>\r\n<p>hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</p>\r\n<p>下面，我就开始演示操作：</p>\r\n<p>我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184417-05f1ea4477f74ca69b123ffe42054c26.png\" alt=\"\" /></p>\r\n<p>接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08183855-7d36d60425694318a037fc9535634ee0.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184651-7ec0488710684303bb716316110f359b.png\" alt=\"\" /></p>\r\n<p>证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</p>\r\n<p>&nbsp;</p>\r\n<p>1、Jexus的NOFile功能。</p>\r\n<p>当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</p>\r\n<p>我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_983f4aca-2809-4ee2-81c6-b710f9065e1b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">404.html</span></div>\r\n<p>然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215337-b2d264da1eb248809791f8c8ec8c5595.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215544-b061f60964514812b3a2056a474e0254.png\" alt=\"\" /></p>\r\n<p>使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</p>\r\n<p>这里值得提醒的就是此功能的使用情况，</p>\r\n<p>　　（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</p>\r\n<p>　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的URL地址都被Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）</p>\r\n<p>&nbsp;</p>\r\n<p>2、Jexus的URL重写</p>\r\n<p>URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在<a href=\"http://baike.baidu.com/view/1002788.htm\" target=\"_blank\">百度百科</a>中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</p>\r\n<p>URLRewrite有以下的好处：</p>\r\n<p>　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</p>\r\n<p>　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</p>\r\n<p>　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</p>\r\n<p>在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</p>\r\n<p>下面进行URL重写的实验：</p>\r\n<p>要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</p>\r\n<p>首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码。　　</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_55623fe4-7375-4626-9a48-be22cef27aff\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">php.html</span></div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a313ec63-04fc-4b62-9452-1ffb07a48695\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">aspx.html</span></div>\r\n<p>然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08225515-2ef717370f31432c89c93aaf1dbdf6b7.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222339-bfb266021b1845f28ddcecbb065bafa3.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222431-2b52120bc6154fb09eb07d5a2f611cf9.png\" alt=\"\" /></p>\r\n<p>成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</p>\r\n<p>　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</p>\r\n<p>　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</p>\r\n<p>　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08230921-03e2181f714b4c46b227f8a921d9977c.png\" alt=\"\" /></p>\r\n<p>　　（4）、配置之后必须重启Jexus，否则是不会生效的。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的IP封杀</p>\r\n<p>有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</p>\r\n<p>我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231213-2143c4d089784d08936639259e4c7d38.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，再来访问网站：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231355-23426f11421a401e9d608ea825f3d856.png\" alt=\"\" /></p>\r\n<p>我们的IP就被封杀掉了。</p>\r\n<p>&nbsp;</p>\r\n<p>4、禁止访问某目录中的内容</p>\r\n<p>此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</p>\r\n<p>在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f0173184-43f9-4d01-b995-b7714b2a88ae\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">denydir.html</span></div>\r\n<p>我们在修改配置文件之前先尝试访问： <img src=\"http://images.cnitblog.com/blog/499899/201304/10085920-d55b67301c4a4b61a8f4fbb07b856e93.png\" alt=\"\" /></p>\r\n<p>之后我们修改我们的网站配置文件：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090135-56087f20b3b94b0387082426339e60ec.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus后再刷新页面：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090240-75353923867546af80ccad0f9d42fc01.png\" alt=\"\" /></p>\r\n<p>我们达到了我们想要的效果。</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus反向代理</p>\r\n<p>Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在<a href=\"http://baike.baidu.com/view/1165595.htm\" target=\"_blank\">百度百科</a>、<a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" target=\"_blank\">维基百科</a>或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</p>\r\n<p>在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</p>\r\n<p>使用代理具有以下优势：</p>\r\n<p>　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</p>\r\n<p>　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</p>\r\n<p>　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</p>\r\n<p>说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/10093405-4b5f999e4f104808910fa4ecf63b5cd7.png\" alt=\"\" /></p>\r\n<p>我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</p>\r\n<p>使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</p>\r\n<p>此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</p>\r\n<p>&nbsp;在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10221804-6eaf0d60f40f447c98c88e37926fa8e7.png\" alt=\"\" /></p>\r\n<p>分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223311-bd41bbb7d09a4aa5a910c7dfcb39e44f.png\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223423-705f9aca8b0e4293b9258ed81e08163b.png\" alt=\"\" /></p>\r\n<p>再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224159-d02ed535eec049ec991d3665347b5caa.png\" alt=\"\" /></p>\r\n<p>保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224323-362ef60552ac4a36a096e1c580540046.png\" alt=\"\" /></p>\r\n<p>Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</p>\r\n<p>&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</p>\r\n<p>　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</p>\r\n<p>　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10230231-b9d300e89ba947269d726f31d6052020.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;6、SendFile技术</p>\r\n<p>我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12175257-b719679488e440eb990de3f6ac363ee8.png\" alt=\"\" /></p>\r\n<p>我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12183043-8ef79074843f41af9de99f024031d418.png\" alt=\"\" /></p>\r\n<p>SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</p>\r\n<p>现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</p>\r\n<p>下面我们完成此实验：</p>\r\n<p>在网站根目录中通过Linux创建一个100M大小的文件</p>\r\n<p>cd /var/www/xiaodiejinghong/</p>\r\n<p>&nbsp;dd if=/dev/zero of=./file.zip bs=1M count=100</p>\r\n<p>然后在Windows中创建一个网站，并写好我们的应用程序代码</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12200958-4f273e2a838d4457aff2b2dc52696e8b.png\" alt=\"\" /></p>\r\n<p>界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</p>\r\n<div class=\"cnblogs_code\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n<pre>    protected void Button1_Click(object sender, EventArgs e)\r\n    {\r\n        Response.ContentType = \"application/octet-stream\";\r\n        Response.AddHeader(\"Content-Disposition\", \"attachment;filename=file.zip\");\r\n        Response.AddHeader(\"X-SendFile\", \"/var/www/xiaodiejinghong/file.zip\");\r\n        Response.End();\r\n    }</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n</div>\r\n<p>点击Button后，文件就可以下载了</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12201256-9d490313999644f390ffa885327bb5a1.png\" alt=\"\" /></p>\r\n<p>这里有两个注意事项需要注意的：</p>\r\n<p>　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</p>\r\n<p>　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>7、前置缓存</p>\r\n<p>对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</p>\r\n<p>&nbsp;</p>\r\n<p>8、Gzip传输压缩</p>\r\n<p>各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</p>\r\n<p>Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13095650-64e073310a0f41e9a8d16fd5493563b5.png\" alt=\"\" /></p>\r\n<p>开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</p>\r\n<p>开启前：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102039-e850745d21cb45e5925ce1c95805d3be.png\" alt=\"\" /></p>\r\n<p>开启后：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102114-f34f5ebf338d4b78ad58f6129d7c7b49.png\" alt=\"\" /></p>\r\n<p>虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13110436-588337d85859442087fedcd8e53336c6.png\" alt=\"\" /></p>\r\n<p>比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</p>\r\n<p>&nbsp;</p>\r\n<hr />\r\n<p>好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/03/3047317.html\" target=\"_blank\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</p>\r\n</body>\r\n</html>',1408492126065,1409072773318,0,0,'3,2',1,1,1,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>',1408492126065),(2,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>safsadfasdf</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p>前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>\r\n<p>在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</p>\r\n<p>正式进入到本回合的正题，案例代码可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\" target=\"_blank\">点击这里</a>下载：</p>\r\n<p>在本回合中，我们将讨论学习：</p>\r\n<p>　　（1）、在Mono中部署一个简单的在线加法器</p>\r\n<p>　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</p>\r\n<p>　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</p>\r\n<hr />\r\n<p>1、牛刀小试</p>\r\n<p>在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</p>\r\n<p>针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/27165836-9b061074ab464d369c341a62e2cffb6b.png\" alt=\"\" /></p>\r\n<p>然后在Windows中的Visual Studio写一个简单的网站。</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre> <span style=\"color: #800080;\">1</span> <span style=\"color: #000000;\">&lt;%</span><span style=\"color: #000000;\">@ Page Language</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> AutoEventWireup</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> CodeFile</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default.aspx.cs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Inherits</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_Default</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">%&gt;</span>\r\n <span style=\"color: #800080;\">2</span> \r\n <span style=\"color: #800080;\">3</span> <span style=\"color: #000000;\">&lt;!</span><span style=\"color: #000000;\">DOCTYPE html</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">4</span> \r\n <span style=\"color: #800080;\">5</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html xmlns</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">6</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">7</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">/&gt;</span>\r\n <span style=\"color: #800080;\">8</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">9</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">10</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">11</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">form id</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">form1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">12</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">div style</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">background-color:pink;height:40px;width:600px;padding:10px;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">13</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>  <span style=\"color: #000000;\">+</span>\r\n<span style=\"color: #800080;\">14</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">15</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:Button ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Text</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> OnClick</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Add</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">/&gt;</span>\r\n<span style=\"color: #800080;\">16</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Result</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ReadOnly</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">17</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">div</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">18</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">form</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">19</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">20</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\"> 1 &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n 2 \r\n 3 &lt;!DOCTYPE html&gt;\r\n 4 \r\n 5 &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n 6 &lt;head runat=\"server\"&gt;\r\n 7 &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n 8     &lt;title&gt;&lt;/title&gt;\r\n 9 &lt;/head&gt;\r\n10 &lt;body&gt;\r\n11     &lt;form id=\"form1\" runat=\"server\"&gt;\r\n12     &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n13         &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n14         &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n15         &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n16         &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n17     &lt;/div&gt;\r\n18     &lt;/form&gt;\r\n19 &lt;/body&gt;\r\n20 &lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/27170247-4088cfd2bed94e059e9d806a465d7df3.png\" alt=\"\" /></p>\r\n<p>成功的访问并计算~~~！！！</p>\r\n<p>这里有几个需要提醒的地方：</p>\r\n<p>　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</p>\r\n<p>　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</p>\r\n<p>　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</p>\r\n<p>&nbsp;</p>\r\n<p>2、PostgreSQL与Mono的结合</p>\r\n<p>一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</p>\r\n<p>而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</p>\r\n<p>在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\" target=\"_blank\">《PostgreSQL和MySQL的对比》</a>和<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\" target=\"_blank\">《MySQL VS PostgreSQL》</a>。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</p>\r\n<p>好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\" target=\"_blank\">《CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3》</a>和<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\" target=\"_blank\">《CentOS 6.3 Minimal&nbsp;源码安装 PostgreSQL 9.2.3》</a>，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在<a href=\"http://weibo.com/317166684\" target=\"_blank\">微博</a>上私信或@我）。</p>\r\n<p>首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29213859-9fd41a47d7434984a2c66bf412e0a344.png\" alt=\"\" /></p>\r\n<p>然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\" target=\"_blank\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</p>\r\n<p>在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</p>\r\n<p>使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29200258-ec8c95ef1d3049cea0e15cb25d6fb923.png\" alt=\"\" /></p>\r\n<p>这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</p>\r\n<p>然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p>接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29224120-cc9e84ee622346a8b9ff5937601572b5.png\" alt=\"\" /></p>\r\n<p>&nbsp;这里有几点注意需要提醒各位读者：</p>\r\n<p>　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</p>\r\n<p>　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</p>\r\n<p>　　（3）、网站上传之后各位读者别忘了把Jexus重启。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Mono中使用PetaPoco</p>\r\n<p>微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</p>\r\n<p>尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</p>\r\n<p>面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</p>\r\n<p>Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework&nbsp;-Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</p>\r\n<p>&nbsp;既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">.NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</p>\r\n<p>&nbsp;我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</p>\r\n<p>然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/30155114-37c03ce424b74d4a9b6aa602694b85a1.png\" alt=\"\" /></p>\r\n<p>然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bc3302c6-c0c7-43d6-b449-2e44e6e0d42e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Webb.Config</span></div>\r\n<p>在Model中添加上我们的&rdquo;Person&ldquo;实体类：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cd0a3eae-0982-4fc5-9198-8174b15e3686\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Person.cs</span></div>\r\n<p>跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/30164722-030800f8ce974870a68263c279c116ad.png\" alt=\"\" /></p>\r\n<p>在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</p>\r\n<hr />\r\n<p>就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/23/3092181.html\" target=\"_blank\">下一节</a>，我们尝试在Mono中部署一款优秀的开源框架，也就是在已经在Java中大行其道的Spring，我们部署的是Spring.NET，嗯，我们下回见。</p>\r\n</body>\r\n</html>',1408492228596,1409085240146,0,0,'',1,0,0,'<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\"><a style=\"margin: 0px; padding: 0px; color: #5a5a5a;\" href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\">前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>',1408492228596),(3,'Linux.NET学习手记（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>\r\n<p>嗯，聪明的读者一定猜到了本回合要讨论学习的内容，对了，本回合我们讨论学习的内容就是：服务器软件Jexus。</p>\r\n<p>由于Jexus需要讨论学习的知识比较多，为此我会把Jexus分开两个回合来讲解，分别是这个回合对于Jexus的一些概念性和基础配置的讲解，以及下一回合Jexus网站配置高级功能的演示与讲解。</p>\r\n<p>本回合我们一起讨论学习的内容：</p>\r\n<p>　　（1）、对Jexus的概念性理解：什么是Jexus</p>\r\n<p>　　（2）、对上回合搭建环境时所遗留的问题进行辨析：为什么要选择Jexus</p>\r\n<p>　　（3）、Jexus的基本操作</p>\r\n<p>　　（4）、Jexus的整体配置</p>\r\n<p>　　（5）、介绍并使用Jexus的进程守护工具jws.guard</p>\r\n<hr />\r\n<p>&nbsp;1、什么是Jexus</p>\r\n<p>&ldquo;孔子门徒三千，成名七十二&rdquo;，世界上存在着各种各样不同类型的服务器软件，当然也包括你当时写来玩玩没有发布的那款，而在这众多的软件中，比较著名的有：IIS、Apache、Nginx、LIgHttpd等。而Jexus作为这众多服务器软件的其中一员，现在的排名应该就是这三千名中的第七十三名，也就是还没&ldquo;成名&rdquo;的那一位。</p>\r\n<p>的确，Jexus并没有出身在贵族之中，它没有像IIS一样拥有一个有钱有势有技术的托拉斯父亲帮它修饰与推广，也没有像Apache服务器软件一样成为&ldquo;Apache基金会&rdquo;的顶级项目被世界所认知，同样也没有像LigHttpd一样拥有高贵的普鲁士血种成为大家的新宠。<a href=\"http://baike.baidu.com/view/4562810.htm\" target=\"_blank\">百度百科</a>中对于Jexus的介绍也只有仅仅的那么几行，（至写本文章为止）<a href=\"http://zh.wikipedia.org/w/index.php?search=jexus&amp;title=Special%3A%E6%90%9C%E7%B4%A2\" target=\"_blank\">维基百科</a>中直接就找不到Jexus的存在，很多读者对于Jexus还是比较陌生的，对于Jexus的认知或许也仅仅是&ldquo;这东西可以在Linux中跑.NET&rdquo;，甚至直接就不知道有这么一款软件存在。</p>\r\n<p>孔子的弟子中，虽然只有七十二名的弟子被成为贤人，但是，谁又能说第一百七十二名就不是贤人呢？第七百二十名弟子就不优秀呢？在这剩下的两千多人中，其中也有很多弟子是很优秀的，只不过由于种种的原因而没有被其他人称作&ldquo;贤人而已&rdquo;。最近这两天，我跟群主（Jexus的作者）聊了不少东西，咨询了不少关于Jexus的情况，同时也感谢作者对我的一些ASP.NET的知识进行科普和扫盲，通过对Jexus的讨论，我体会到Jexus确实是一款优秀但却没太高名气的服务器软件，也就是那一位&ldquo;优秀而没有成名的弟子&rdquo;。</p>\r\n<p>用一句话介绍Jexus：Jexus是一款国产的基于.NET环境的有条件开源的免费的Web服务器软件，目前支持的平台有：Linux、FreeBSD和龙芯（旧版的海支持Windows），由作者（宇内流云）一人独力开发并长期维护，官方的论坛为：<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet 大本营</a>。</p>\r\n<p>我们在看看Jexus有那些功能特点（摘抄自Jexus说明书）</p>\r\n<p>　　（1）、高性能的ASP.NET处理能力。这是Jexus的核心功能。不管是稳定性、易用性还是并发承载能力、并行处理速度，Jexus对ASP.NET的支持都是非常优秀的；<br />　　（2）、支持Fast-CGI。通Fast-CGI，Jexus能支持包括PHP在内的所有拥有Fast-CGI服务功能的WEB应用；<br />　　（3）、具备基于正则表达式的强大的URL重写功能；<br />　　（4）、具有强劲的反向代理功能。支持多目标负载均衡，支持本地网站与远程网站无缝整合；<br />　　（5）、拥有强大的流媒体支持能力，支持FLV/F4V视频文件拖动播放，支持微软平滑流媒体技术；<br />　　（6）、支持&ldquo;服务器推送&rdquo;技术，配备了相应的服务器端、客户端开发接口，是开发现代WEB应用的利器；（注意，此功能在5.3版中已经除去，待到HTML5成熟并且大多数浏览器支持之后才重新推出）<br />　　（7）、具备可控的&ldquo;ASP.NET前置缓存&rdquo;，能最大限度地提高ASP.NET网站的承载能力和响应速度；<br />　　（8）、支持Https，具有SSL加密数据安全传输能力；<br />　　（9）、具有基础而实用的入侵检测功能，能自动终止已被识别的非法请求；<br />　　（10）、安装部署非常简便，操作使用极为简单。</p>\r\n<p>Jexus凝聚了作者的智慧和心血，针对当前Linux.NET服务器软件的不足实行有针对性的开发，因此是为.NET量身定做的一款服务器软件，再加上它所拥有的丰富的功能，确实是一款不错的软件。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么选择Jexus</p>\r\n<p>上回合，我们部署mono时，我们选择了Jexus作为服务器软件，同时也遗留了一个值得我们讨论的问题：为什么我们选择Jexus作为服务器软件而不是其他？下面我将会 通过两个主要方面的比较来推演出我们选择Jexus的原因：</p>\r\n<p>（1）、Windows 与 Linux 服务器软件的对比</p>\r\n<p>在上一回合的文章中，我阅读了所有读者给我的留言，其中有不少留言比较有趣的，当中有那么一则留言：&ldquo;.NET在Linux中跑效率和稳定性要比在Windows Server 2003 中要好&rdquo;，这时我就纳闷了.NET在WinServ03中还跑不过Linux？在自家做的环境中还比不上他人做的？此外，我也在Jexus的作者中得出那么一则消息：&ldquo;在相同的物理环境中，IIS 6.0 跑不过 Jexus 4.X&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144933-4d1303694d6c4f67a2b3c5a5c6cea530.jpg\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144946-0b8d0d91313e49cda60dd926d6e56035.jpg\" alt=\"\" />&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>上面的两幅图片是作者提供的关于IIS6.0 与 Jexus 4.3的简单性能测试，明显的看出Jexus 4.3的负载能力要比IIS 6 要强。当然，对于这片面的简单测试是远远不足以判定Jexus就比IIS性能强悍的，这需要通过更多更严格的系统性的测试，而且还要通过长期的实际使用才能对它们之间的性能对比作出判定。</p>\r\n<p>同时，我这里还要重申一点：&ldquo;IIS 绝对是一款性能优异的服务器软件&rdquo;，至于为什么会出现IIS跑不过Jexus的这种情况（这里的讨论仅限于图中的这两个版本的对比，对于新版的IIS与Jexus，这里不作讨论），我想其中的原因更大是由于运作的平台中的不同。</p>\r\n<p>IIS运行在Windows中，而Jexus则运行在Linux中，他们运行在不同的平台中，通过对比平台的差异，或许能够更容易的得出它们的差异。IIS6.0的性能低下（相对于Jexus4.3）很大程度上是由于Windows系统的拖累，为什么这么说？各位读者如果有兴趣的话可以右键点击计算机（我的电脑），然后打开它的服务列表，看看那庞大的列表中共有多少个服务，又有多少个服务是正在运行的（我刚刚自己手数了一下自己的电脑，共有178个服务，运行中的有92个，这里是普通系统，Server版本的当然没有这么多）。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05151116-8bbce625868548808089ab3ed7218bdc.png\" alt=\"\" /></p>\r\n<p>在这众多的服务当中，各位读者能够认得多少个呢？又是否能够清楚的说出每一个服务是干嘛用的呢？我相信各位读者应该没有认得出多少个，在这众多正在运行中的服务，很多都是为Windows系统提供一些体验性的功能，我们即使关闭了也对系统的影响不大，这些服务虽然可有可无，但是在我们安装系统的时候却会自动的给我们装上，并且默认的开机运行，运行就意味着系统需要从CPU消耗计算能力，需要从内存中划分出空间，这都是会浪费我们服务器的资源的。相反的，我们再看看Linux，在安装系统的时候就可以定制软件包，定制服务，我们可以选择最小化安装，也可以只安装我们需要的服务，对于我们不需要的服务，我们可以完全的无视之。还记得一位做服务器管理的老师曾经说过：&ldquo;对于运行的服务器，我们希望越轻越好，提供的服务越单一越好，开启的服务越少越不容易出错&rdquo;。我们回过头来看Windows，不免会觉得：&ldquo;Windows，你太重了&rdquo;。</p>\r\n<p>此外还有一点更重要，对Windows性能影响更大的，那就是Windows的图形界面。图形的处理会消耗大量的系统资源，而Windows在维持它的系统界面过程中就需要浪费服务器中大量的宝贵资源。我一直有这么一个观点：&ldquo;Linux是不应该存在图形界面的&rdquo;，同样，Server版的操作系统也不应该存在图形界面，正规的服务器是要被关在机房的，图形界面做得再好，画面再好看也不会有人去欣赏，尽管WinServ03的界面一点都不美观，但是丑归丑，维持这个界面还是要消耗大量的系统资源，安装CentOS6.4时内存如果没有1G，那图形的安装界面还起不了来，可见图形界面需要消耗多少的资源。同时，如果你是通过远程登陆到机房的服务器进行管理，网络问题同样会成为图形界面推送的一个瓶颈问题。</p>\r\n<p>就这样，过多的服务，加上万恶的图形界面，服务器在真正投入生产之前已经浪费了一笔珍贵的系统资源，相同物理配置的服务器，看似配置相同的环境，实际能够提供给服务器软件支配的系统资源却不同，IIS 6.0跑不过 Jexus 4.3也不足为奇了。</p>\r\n<p>&nbsp;（2）、同是Linux中.NET服务器软件的比较</p>\r\n<p>同时Linux中，运行环境才是真正的相同，这个比Windows/Linux更有可比性。Linux中搭建.NEt环境除了mono+Jexus之外还有一种方式，那就是mono+XSP。XSP是一款.NET的解析容器，它能够对.NET程序进行解析并维持高效的运行，但是它却有一个缺点，就是对于静态资源的处理能力相当有限，而一个网站中，大部分都是图片、CSS、JS等静态文件，真正动态生成的东西并不多，在这种情况下XSP就会暴露出它的软肋，面对这种情况，XSP一般都会整合一个高效的服务器软件进行弥补它的不足。类似于Tomcat+Apache的这种情况。这就衍生出了：网上提供的搭建Linux.NET的另外一种方式Linux+Apache（Nginx）+mono这种方式，它们在Apache（Nginx）和mono之间都会有一个插件，原理实际上就跟XSP一样。</p>\r\n<p>这里推荐一篇文章：《<a href=\"http://blog.csdn.net/jexus/article/details/5650714\" target=\"_blank\">为什么说Jexus更适合打造基于Linux/Unix系统的企业级 ASP.NET平台</a>》，该文章是Jexus的作者写的，里面有比较详细的对比了Linux采用Jexus的好处。阅读完这篇文章之后，相信读者也会明白为什么上回合搭建环境的时候直接选择了Jexus。</p>\r\n<p>最求更稳定，性能更优秀，效率更高，这就是我们选择Jexus的原因。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的操作</p>\r\n<p>经过两个章节关于Jexus的介绍，相信读者对于Jexus已经有了一个概念上的认识，从这个章节开始，接下来我们会对Jexus的使用进行实操，并通过操作Jexus时产生的现象进行讨论，从而进一步的了解并学会使用Jexus。</p>\r\n<p>Linux软件包有一个做得非常好的地方，那就是对于这款软件的使用手册、帮助文档往往都会存在软件本身之中，像&ldquo;有问题问男人&rdquo;（man命令）、&ldquo;--help&rdquo;等命令都能够提供快速的使用方法查阅，同样，关于Jexus的使用方法我们也可以通过Jexus软件包中的&ldquo;readme&rdquo;查阅得到。</p>\r\n<p>我们先看一下Jexus目录中有些什么东西：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05170609-411d6ae7b7824605ac00cd09311a9fa7.png\" alt=\"\" /></p>\r\n<p>里面也没有什么东西，包括四个文件夹（蓝色那种），六个脚本文件（绿色那种）和一些的其他文件（白色那种）。在这个章节里，我们介绍的是Jexus的操作，实际上就是对于Jexus脚本的操作和介绍。</p>\r\n<p>Jexus提供了六个操作脚本（针对5.3之前的版本,5.3版本已把所有jws脚步融合到jws中，使用方法为./jws 参数），他们的名称和功能分别是：</p>\r\n<p>　　jws.start: 启动Jexus；(如果需要开机自启动的，可以把脚本的全路径[包括脚步本身]添加到/etc/rc.local中；5.3中已改为：jws start)<br />　　jws.restart: 重启Jexus，如果命令后边加网站名作为参数，那么就表示启动或重启指定的网站；（5.3中已改为：jws restart）<br />　　jws.stop: 停止Jexus，如果命令后边加网站名作为参数，那么就表示停止指定的网站；（5.3中已改为：jws stop）<br />　　jws.regsvr: 注册jexus所需要的全局程序集（本命令只在安装或更新jexus后才用，而且必须用；5.3中已改为：jws regsvr）。<br />　　state.start: 启动Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）<br />　　state.stop: 停止Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</p>\r\n<p>　　此外，5.3中还增加以下功能：</p>\r\n<p>　　　　jws status：检查Jexus的运行状态</p>\r\n<p>　　　　jws -V：查看Jexus的版本　　　　　　　　　　　　　　　　</p>\r\n<p>操作方法跟运行普通脚本一样./XXX，没有多少技术含量。这里值得注意的是，这些脚步文件的拥有者应该保证是root用户，并且有运行的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>4、Jexus的配置</p>\r\n<p>Jexus的配置分为两个方面，一个是Jexus整体的配置（jws.conf），另外则是网站独立的配置（默认所有的网站配置文件都在siteconf文件夹中）。网站的独立配置可以调用很多Jexus的高级功能，我们把它当到下一回合再进行学习讨论，本章中我们主要进行Jexus的整站配置。我们用vi打开jws.conf看看里面有些什么设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05180814-e7e3731f09394f169969cdb65111ab25.png\" alt=\"\" /></p>\r\n<p>在这里，我解析一下每个选项的作用和注意事项：</p>\r\n<p>（1）、SiteLogDir：这个设置项必须得存在并且开启，该设置项设置Jexus的运行日志记录、各网站运行的日志记录都会存放到该文件夹中。此外，当记录的日志文件大小达到一定程度的时候，Jexus会自动的把日志写到一个新的日志文件中，不会一直通过追加写的方式把所有的日志记录都写到同一文件中。</p>\r\n<p>（2）、SiteConfigDir：这也是一个必须存在并且开启的设置项，这个设置项设置Jexus中各网站配置的存放地点，Jexus中默认的网站配置之所以存放在siteconf就是因为这里默认的值就为siteconf。此外值得注意的是，存放在该配置文件夹中的文件只能是网站的配置文件，其他任何的文件都不能存到到该目录（包括网站配置文件本身的备份文件），因为Linux系统所有的事物都是以文件的方式作为存储，因此无论你采用什么样的后缀，在Linux系统中都只当作普通文件来对待。</p>\r\n<p>（3）、Runtime：该设置项用于配置Runtime的版本，除非有特殊需求需要改动Runtime的版本，一般情况下无需修改。</p>\r\n<p>再来看一下一些高级点的设置项，这些设置项都是默认关闭的，</p>\r\n<p>（4）、LLVM：是否开启LLVM编译器功能。开启LLVM可以把中间语言的编译交给LLVM编译器，这可以加快编译的速度，编译出来的代码性能或许会更优秀一些。不过值得注意的地方：并不是所有的Linux都带有LLVM编译器，并且mono自带的编译器编译效率和编译生成的代码性能上也不差什么，因此如果没有特殊的需要，这一项可以让他保持默认关闭。</p>\r\n<p>（5）、httpd.processes：Jexus中默认的工作进程为1个，单个进程最大的并发数固定为1万个，通过开启多个工作进程可以提高Jexus处理并发的能力，开启多个进程的方式非常简单，只要修改httpd.processes的值并重启Jexus即可。不过这里有几点需要注意的地方：[1]Jexus最大支持的工作进程为4个，因此这里最大只能填写4；[2]如果开启了多个Jexus的工作进程，请注意网站的Session的保存方式，请通过修改网站config文件来修改Session的保存方式，避免采用进程的方式保存Session，否则将会造成Session的不同步，给网站的运作造成不必要的麻烦，Session的保存可以借助第三方的方式来保存（比如数据库，或者Jexus提供的强大的ASP.NET服务状态保存）；[3]Jexus工作进程的设置跟服务器的CPU内核数和内存数有关，如果你的Cpu只有一个核，而你配置开启了两个进程，也只能达到一个容错的效果，能够承载的并发数是不会上去的。详细可以参考文章<a href=\"http://www.linuxdot.net/bbsfile-3125\" target=\"_blank\">《让Jexus支持高并发请求的优化技巧》</a>。</p>\r\n<p>（6）、httpd.user：不知道各位读者用过Apache没有，在Apache中的httpd.conf有这么一项设置user=XXX：可以把Apache以某个用户的方式启动，相应的该用户的所拥有的操作权限都会赋给Apache进程。同样，httpd.user的作用也是跟Apache中的user是一样的，只要把一个已有的用户的用户名填写到httpd.user中，Jexus就会拥有该用户的操作权限。有什么用？嗯，举个例子吧，如果网站的运行会产生一些新文件的（比如做页面静态化），各位读者会采用什么办法解决呢？chmod 777？这可以解决，但是把目录的权限设置为777会存在安全性的问题，如果可以有一种解决方案：进程和某些用户可以对该目录进行读写操作，而其他用户不能，那就可以解决安全性问题了。嗯，对的，这个时候httpd.user就派上了用场，我们只要创建一个仅能供某个用户读写的目录，并把此用户的用户名填写到httpd.user中，就可以实现我们想要的功能了。</p>\r\n<p>（7）、php-fcgi.set：此功能是用于让Jexus支持PHP，由于这里与.NET关系不大，这里就不做过多的介绍了，需要了解的读者可以参照这篇文章<a href=\"http://www.linuxdot.net/bbsfile-3132\" target=\"_blank\">：《让Jexus V5.1支持PHP的操作步骤》</a>。</p>\r\n<p>（8）、CertificateFile 与 CertificateKeyFile：这个是让Jexus支持SSL的配置项，是用方法可以参照文章：<a href=\"http://zhumeng8337797.blog.163.com/blog/static/10076891420104654343279/\" target=\"_blank\">《Linux+Apache安装生成配置SSL证书》</a>和<a href=\"http://www.linuxdot.net/bbsfile-2970\" target=\"_blank\">《如何让jexus 支持ssl》</a></p>\r\n<p>在这八大Jexus的网站配置中，有一个终极的注意事项：每次配置后记得重启Jexus，否则刚才的配置是不会生效的！！！</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus进程守护工具jws.guard</p>\r\n<p>一个运行中的进程，难免会因为各种各样的原因无缘无故的宕掉（比如网站瞬间的负载过高、内存不足等），而Jexus宕掉的后果往往只有一个：对外提供服务的网站无法访问了。因此，我们需要最大限度的保障我们的网站能够提供7*24小时的不间断访问，而一个网站或者一个进程宕掉的过程是瞬间的，也许前一秒还访问得好好的，下一秒就突然间报个404的错误，而从网站或进程挂掉到我们人工的发现并重启服务的过程是漫长的，除非该网站有应对单点故障的解决方案，否则在这漫长的时间之中，网站都处于一个无法访问的黑色时期。如果这个宕掉的网站是一个企业网站，这会造成企业信誉度的下降；如果是一个商城网站，这会造成经济和人气的损失；因此，我们需要让系统能够自动的检测出网站的运行状态，当出现进程服务死机的时候能够自动重启。</p>\r\n<p>jws.guard的是一个python的脚本，工作原理也比较简单：根据设置好的预设值，每隔十秒钟访问一次访问一次指定的端口与文件，当三十秒内出现无法网站时就执行jws.restart进行重启网站。这里的三十秒指的是累计连续三次无法访问，防止因为检测时因为Jexus正忙而误判断重启，对网站进行误伤。</p>\r\n<p>jws.guard的使用方法也比较简单，只要把 &ldquo;tools/jws_guard&rdquo; 目录中的 &ldquo;guard.py&rdquo; 和 &ldquo;jws.guard&rdquo; 两个脚本文件拷贝到Jexus的工作目录（跟jws.start同一目录），然后配置一下jws.guard 中的预设值即可。</p>\r\n<p>我们首先把这两个文件拷贝出去</p>\r\n<p>cd /usr/local/jexus/tools/jws_guard/</p>\r\n<p>cp jws.guard guard.py /usr/local/jexus/</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>我们已经把这两个脚本拷贝到工作目录中。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/05202404-de9e4e1008c54293b161bc89aa34124f.png\" alt=\"\" /></p>\r\n<p>用vi打开并编辑jws.guard</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05202526-5f0fd75058e847b59ec0936962dd30ec.png\" alt=\"\" /></p>\r\n<p>把host、port、path改为我们需要的配置即可，它们分别代表主机地址，端口，检查的路径。一般情况下，如果Jexus采用80端口，这里可以不作修改直接使用，而如果Jexus采用的不是80端口，也只需要修改port，改为正确的端口并保存退出就可以了。host和path一般是不需要修改的，同时也不建议非必要的修改，因为修改jws.guard必须确保修改后修改的配置项是正确的，否则jws.guard就会因为无法访问配置后的网站而反复的重启Jexus，造成不必要的麻烦。</p>\r\n<p>修改好了之后只需要执行./jws.guard即可启动这款Jexus的进程守护工具。</p>\r\n<p>&nbsp;我们尝试性的把Jexus关掉。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203621-740e2ccb31b44910b38dd9d486334b40.png\" alt=\"\" /></p>\r\n<p>&hellip;&hellip;30秒之后&hellip;&hellip;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203850-cbb80f4d87e34a39a0fba02e47aade0a.png\" alt=\"\" /></p>\r\n<p>Jexus又起来了。</p>\r\n<p>通过jws.guard守护守护工具，我们可以很方便的让系统自动的发现Jexus进程宕机并快速的重启进程。同时我们只需要查阅Jexus的运行日志即可发现问题所在。</p>\r\n<p>这里有三点需要提醒的：</p>\r\n<p>　　（1）、如果需要关闭Jexus服务30秒以上的，请在关闭Jexus之前先执行./jws.guard stopg关闭jws.guard守护工具，以免守护工具自动的把Jexus又启动了起来。</p>\r\n<p>　　（2）、jws.guard是使用python语言编写的脚本，需要运行该工具时请确保系统中已经安装了python，检查方式可以执行 python -V ，如果没有出现python的版本信息则说明系统中没有安装python，这是，各位读者可以通过yum或者其他方式安装上python之后再运行jws.guard。</p>\r\n<p>　　（3）、再啰嗦一次，配置jws.guard时请确保配置的值是正确的。</p>\r\n<p>新版的Jexus的稳定性已经非常强，加上jws.guard可以起到加固作用。</p>\r\n<p>好的，至此Jexus的守护工具jws.guard就已经介绍完毕了。</p>\r\n<p>这里补充一点，高版本的Jexus已经把此工具从版本包中剔除，相信是因为高版本的Jexus中抗压能力有了更大的提高，因此作者也放心的将jws.guard移除。如果各位读者想保留功能的，可以下载一个之前版本的Jexus（可以在第一篇的学习手记中找到下载地址），然后在里面把此脚本提取出来使用。【补充于：2014/03/29】</p>\r\n<hr />\r\n<p>至此为止，本回合对于Jexus的基础讨论已经全部讲解完毕了。希望各位读者在阅读完本回合的文章之后能够对Jexus有一个基础性的了解，同时，如果各位读者有发现本回合中任何知识点的错漏、对本文章有任何的意见或者建议、对Linux.NEt的发展有任何的见解，都欢迎留言指教。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">下一回合</a>，我们将会对Jexus的高级功能：访问IP过滤、服务器的高速缓存、URL重写等功能进行深入的讲解并逐一的演示，同时，也希望没有搭建好Linux.NET的读者能够把环境搭建好，因为下回合所有的演示都是基于这个环境来进行实操。好吧，我们下回再见吧。</p>\r\n</body>\r\n</html>',1408492242317,1409073137330,0,0,'',1,0,0,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>',1408492242317),(4,'Linux.NET学习手记（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>\r\n<p>本回合，我们主要讨论学习：</p>\r\n<p>1、什么是mono</p>\r\n<p>2、为什么要用mono</p>\r\n<p>3、如何在Linux中部署一个.NET的运行环境</p>\r\n<p>4、部署时我们需要注意什么，以及对一些关键步骤的解析</p>\r\n<hr />\r\n<p>1、什么是mono</p>\r\n<p>关于什么是mono，我想无论我怎么说，应该都不会比官方的解释，或者是<a href=\"http://baike.baidu.com/view/26639.htm\" target=\"_blank\">百科</a>更加详细；我这里就简单说吧，Java之所以能够跨平台运作，是依赖与Java的虚拟机JVM，而.NET之所以只能够在Windows中跑，同样是因为.NET运行需要依赖与Framework的Runtime（公共运行时），那如果能够在Linux同提供适合于.NET运作的环境（包括CLR等），那.NET也可以在Linux中跑起来了，这就是mono了。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么要使用mono</p>\r\n<p>为什么使用mono，原因有很多，不过归结起来，我个人认为以下这是最重要的：</p>\r\n<p>（1）、作为服务器来说，如果能够实现一模一样的功能的，还是主推Linux。为什么呢？我列举了几个实例：</p>\r\n<p>　　首先，如果服务器需要打补丁，作为Windows服务器，你打完补丁之后必须重启，这一定程度上会对你的业务造成一定程度上的影响</p>\r\n<p>　　其次，我们经常会听到Windows会中毒，特别是作为Web服务器和邮件服务器，我们不知道用户会给我们上传一些什么东西上来，相反，我们却很少会听到Linux中毒这么一个说法；这是由于Linux存在着太多的发行版本，不同版本之间编译后的软件无法相互调用，因此，如果能够感染A版本的Linux病毒无法感染B版本的Linux，这在很大程度上削减了病毒的危害性。</p>\r\n<p>　　再者，作为服务器，我们会尽量希望自己的系统更加的轻量化，更加的高效，和更加的稳定；Linux对于我们的要求，都提供了，我们可以定制的安装软件和服务，对于一些不必要的服务我们可以直接不安装（注意，是直接不安装，而不是安装之后再关闭），相反，如果采用Windows的话，一上来就啪嗒啪嗒的安装一大堆软件和服务，无论你用不用得上，先给你安装；也许这个可以让您的服务器充当更多的角色，但是我们更加希望服务器能够做到单一高效而不是面面俱到。</p>\r\n<p>　　最后，Linux运行对于硬件的要求比较低，这也是由于Linux抛弃桌面环境（作为服务器，我们不应该安装XWindow）和没有太多不必要的服务所决定的，而Windows则显得矜贵多了，硬件配置低一点还不一定能够正常运作。</p>\r\n<p>（2）、从成本考虑：</p>\r\n<p>　　一般部署在Windows中的.NET程序都是采用 &ldquo;Windows Server版本 + IIS + &nbsp;MS SQLServer&rdquo; 这确实是.NET的黄金组合，但是，值得遗憾的是，它们都是要收费的，系统要收费，数据库要收费；作为大企业来说，上千上万台服务器，如果都采用这种模式的话，那将是一笔巨额的开销；对于小公司，资金对于它们来说本就是一个难题，能省下来的基本上都希望省下来，如果放着一个能够达到相同功能而且免费的模式不用而采取这种付费模式，那太说不过去了。</p>\r\n<p>　　　而如果我们采用mono，把.NEt部署在Linux中，我们可以采用以下的组合：&ldquo;Linux + mono + jexus（Apache/nginx +&nbsp;XSP2）+ MySql(PostgerSQL或其他免费数据库)&rdquo;，所有的这些无论是否开源（jexus不开源）都是免费的。</p>\r\n<p>　　作为老板，你会选择哪种呢？&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>3、mono环境的部署</p>\r\n<p>介绍再多也不过是纸上谈兵，实战才是硬道理。工欲善其事必先利其器，要实操，还必须先要有这个环境，下面进入本回合的重点环节，Mono环境的配置。</p>\r\n<p>网上也有大量关于mono环境搭建的帖子，基本上都是搭配以下这两种类型的mono环境：以免费不开源jexus作为服务器软件的mono环境 和 以Apache（或nginx）作为服务器软件的mono环境，具体选择哪款环境读者可以自由选择。选择前者的，可以参考张善友先生的<a href=\"http://www.cnblogs.com/shanyou/archive/2012/01/07/2315982.html\" target=\"_blank\">《32和64位的CentOS 6.0下 安装 Mono 2.10.8 和Jexus 5.0》</a>；而选择后者的读者则可以参考<a href=\"http://www.cnblogs.com/aquilahkj/archive/2011/11/03/2234380.html\" target=\"_blank\">《CentOS 6.0 安装 MONO 2.10.8》</a>。</p>\r\n<p>这里我们就选择前者[选择的原因我打算放到下一回合再来说明]。</p>\r\n<p>版本选择，均选择当前所能下载的最新版本（需要下载的可以链接下载）：</p>\r\n<p>操作系统：<a href=\"http://mirrors.grandcloud.cn/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-bin-DVD1.iso\" target=\"_blank\">CentOS-6.4-x86_64</a></p>\r\n<p>libgdiplus：<a href=\"http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2\" target=\"_blank\">libgdiplus-2.10.9</a></p>\r\n<p>mono：<a href=\"http://download.mono-project.com/sources/mono/mono-3.0.7.tar.bz2\" target=\"_blank\">mono-3.0.7</a></p>\r\n<p>jexus：<a href=\"http://www.linuxdot.net/down/jexus-5.2.3.tar.gz\" target=\"_blank\">jexus-5.2.3</a>（这里最新版其实是jexus-5.3.0 beta3，不过基于稳定性，我选择了最新的稳定发行版）</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01155420-f8be87af3239421987d08120d54e4a7e.png\" alt=\"\" /></p>\r\n<p>首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</p>\r\n<p>装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01163416-47fa6ccd205b41c783232babc686d0c0.png\" alt=\"\" /></p>\r\n<p>（1）、更新系统 yum update &nbsp; （这里我就不更新了，因为都是最新版的东西了）</p>\r\n<p>（2）、通过yum安装编译mono所需要的库</p>\r\n<p>&nbsp;yum -y install gcc gcc-c++ bison pkgconfig glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel&nbsp; cairo-devel<br />（3）、编译安装Libgdiplus</p>\r\n<p>tar jxf libgdiplus-2.10.9.tar.bz2</p>\r\n<p>cd libgdiplus-2.10.9</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make &amp;&amp; make install</p>\r\n<p>echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</p>\r\n<p>ldconfig</p>\r\n<p>（4）、安装mono</p>\r\n<p>由于mono比较大，因此解压和编译安装都需要比较长的时间</p>\r\n<p>tar jxf mono-3.0.7.tar.bz2</p>\r\n<p>cd mono-3.0.7</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make</p>\r\n<p>make install</p>\r\n<p>ldconfig</p>\r\n<p>echo &nbsp;PATH=/usr/local/mono/bin:$PATH&gt;&gt;~/.bash_profile</p>\r\n<p>source ~/.bash_profile</p>\r\n<p>执行 &nbsp;&ldquo; mono -V &rdquo;如果可以看到mono的版本信息，则表明编译安装成功</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01181638-1dfdf90f13734224a37b1674576165eb.png\" alt=\"\" /></p>\r\n<p>（5）、安装jexus</p>\r\n<p>安装jexus比较简单，jexus安装分为全新安装和升级安装两种，由于我们这里是全新安装，所以只讲全新安装部分，升级安装可以阅读jexus中自带的readme文档，里面有详细介绍。</p>\r\n<p>tar xzf jexus-5.2.3.tar.gz</p>\r\n<p>mv jexus-5.2.3 /usr/local/jexus</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>./jws.regsvr</p>\r\n<p>ln -s /usr/local/mono/ /opt/mono</p>\r\n<p>至此，jexus就安装完毕了</p>\r\n<p>&nbsp;</p>\r\n<p>输入操作 &ldquo;./jws.start&rdquo;启动服务器，输入网址XXXX/info，得到以下画面，表明全部安装成功。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01182900-cfe15941dd9c48a1a32b675bddf1b5e6.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>4、部署需要注意的事项与解释</p>\r\n<p>上回合我们只是单纯的部署讲怎么部署mono，并没有对部署mono中每一步的作用做出解释，很多读者或许部署完了还不明白到底怎么回事，因此这回合我们就上回合的操作作出解释，并了解重点需要注意哪些事项。</p>\r\n<p>（1）、部署&nbsp;libgdiplus 时，执行最后一步是什么意思？</p>\r\n<p>　　上回合中，我们部署 libgdiplus 时执行了一步 &ldquo;echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf&rdquo;，这一步的作用其实到了部署mono时，执行&nbsp;ldconfig 才正式的发挥作用。由于我们部署libgdiplus 和mono没有部署到系统默认的/usr 中，因此系统是不会默认的到我们部署mono的文件夹中搜寻和读取里面的动态库文件，这时，我们需要在/etc/ld.so.conf.d/文件夹中，手动的添加mono动态库文件夹的地址，再执行 ldconfig 来让系统能够找到我们的动态库文件。</p>\r\n<p>（2）、部署mono后，执行 ldconfig 很重要</p>\r\n<p>编译部署mono之后，我们会得到大量需要加载的动态库文件，而这些动态库文件，我们再下一步的时候就需要用到，因此需要让系统重新加载。（如果没有重新加载，有可能在部署jexus的时候会出现各种各样的问题）</p>\r\n<p>（3）、部署mono之后，需要把bin目录的路径加入到环境变量PATH中</p>\r\n<p>原理跟安装完jdk之后，需要在环境变量注册是一样的。</p>\r\n<p>（4）、部署jexus需要执行注册</p>\r\n<p>部署jexus的过程相当简单，只需要解压，然后把文件夹拷贝到我们想要它存放的目录就可以了，不过在此之后，我们需要注册全局程序集（./jws.regsvr），这个很重要</p>\r\n<p>（5）、为什么注册完jexus之后需要添加一个软链接</p>\r\n<p>事实上，本来这个软链接是不会写上来的，因为之前部署mono时，注册完jexus了，服务就可以正常的跑起来了。但是这次不同，注册完之后，&ldquo;./jws.start&rdquo;之后，服务并没有起来，执行\"./jws.stop\"系统报了个notfoundXXX（找不到XXX）。于是用vi随便打开了其中的一个脚本，注意到了如下的代码：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01195628-72782097379e44069f62b30c68aebc56.png\" alt=\"\" /></p>\r\n<p>很明显，jws脚本哪里写有了寻找mono的搜寻路径，而恰好，我们部署的mono都不在这几个路径中，因此，jexus找不到想要的bin目录下的文件，所以就服务起不来或者报了个notfound。这时，我们只要在/opt/mono/ 中（当然Path中的任意一个都行，或者你也可以自己手动的一个一个脚本文件添加上mono的目录路径）添加一个软链接，把它链接到我们部署mono的目录下，jexus就能够顺利的找到想要的文件。</p>\r\n<hr />\r\n<p>好了，要讲的暂时就这么多，我们的Linux.NET环境就基本搭建起来了。各位读者此刻时候有一种跃跃欲试的感觉，如果有，欢迎您马上行动，纸上得来终觉浅绝知此事必躬行。</p>\r\n<p>此外：由于本人对Linux.NET接触时间并不太久，手上也没有比较有效的资料，因此很多时候都是采取摸着石头过河的方式来学习研究，如果在讨论学习的过程中有任何错漏的，欢迎各位读者能够指正出来，同时，如果各位读者有任何的意见或者建议，也欢迎大家提出。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">下一回合</a>，我们将讨论学习：jexus作为Linux下基于mono的.NET服务器，其优势在哪？jexus的配置与特色功能，还有其中的一些注意事项与小技巧。</p>\r\n</body>\r\n</html>',1408908907822,1409073089392,0,0,'',1,1,0,'<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>',1408908907822),(5,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>\r\n<p>好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</p>\r\n<p>　　1、NOFILE功能　　</p>\r\n<p>　　2、Jexus的URLRewrite</p>\r\n<p>　　3、Jexus如果做IP过滤</p>\r\n<p>　　4、对目录访问禁止</p>\r\n<p>　　5、Jexus如何使用反向代理功能</p>\r\n<p>　　6、如何使用SendFile技术</p>\r\n<p>　　7、Jexus的高速缓存</p>\r\n<p>　　8、Jexus如何对静态资源进行压缩传输</p>\r\n<hr />\r\n<p>0、新建一个网站配置</p>\r\n<p>这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</p>\r\n<p>上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</p>\r\n<p><span class=\"Apple-converted-space\">Jexus中默认</span>SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/07195426-860ad529f327422e8105e5e0d31bf181.png\" alt=\"\" /></p>\r\n<p>该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</p>\r\n<p>先来讲解一下这三项是干嘛用的：</p>\r\n<p>port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</p>\r\n<p>　　这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</p>\r\n<p>&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</p>\r\n<p>　　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</p>\r\n<p>hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</p>\r\n<p>下面，我就开始演示操作：</p>\r\n<p>我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184417-05f1ea4477f74ca69b123ffe42054c26.png\" alt=\"\" /></p>\r\n<p>接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08183855-7d36d60425694318a037fc9535634ee0.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184651-7ec0488710684303bb716316110f359b.png\" alt=\"\" /></p>\r\n<p>证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</p>\r\n<p>&nbsp;</p>\r\n<p>1、Jexus的NOFile功能。</p>\r\n<p>当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</p>\r\n<p>我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_983f4aca-2809-4ee2-81c6-b710f9065e1b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">404.html</span></div>\r\n<p>然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215337-b2d264da1eb248809791f8c8ec8c5595.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215544-b061f60964514812b3a2056a474e0254.png\" alt=\"\" /></p>\r\n<p>使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</p>\r\n<p>这里值得提醒的就是此功能的使用情况，</p>\r\n<p>　　（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</p>\r\n<p>　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的URL地址都被Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）</p>\r\n<p>&nbsp;</p>\r\n<p>2、Jexus的URL重写</p>\r\n<p>URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在<a href=\"http://baike.baidu.com/view/1002788.htm\" target=\"_blank\">百度百科</a>中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</p>\r\n<p>URLRewrite有以下的好处：</p>\r\n<p>　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</p>\r\n<p>　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</p>\r\n<p>　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</p>\r\n<p>在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</p>\r\n<p>下面进行URL重写的实验：</p>\r\n<p>要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</p>\r\n<p>首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码。　　</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_55623fe4-7375-4626-9a48-be22cef27aff\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">php.html</span></div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a313ec63-04fc-4b62-9452-1ffb07a48695\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">aspx.html</span></div>\r\n<p>然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08225515-2ef717370f31432c89c93aaf1dbdf6b7.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222339-bfb266021b1845f28ddcecbb065bafa3.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222431-2b52120bc6154fb09eb07d5a2f611cf9.png\" alt=\"\" /></p>\r\n<p>成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</p>\r\n<p>　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</p>\r\n<p>　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</p>\r\n<p>　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08230921-03e2181f714b4c46b227f8a921d9977c.png\" alt=\"\" /></p>\r\n<p>　　（4）、配置之后必须重启Jexus，否则是不会生效的。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的IP封杀</p>\r\n<p>有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</p>\r\n<p>我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231213-2143c4d089784d08936639259e4c7d38.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，再来访问网站：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231355-23426f11421a401e9d608ea825f3d856.png\" alt=\"\" /></p>\r\n<p>我们的IP就被封杀掉了。</p>\r\n<p>&nbsp;</p>\r\n<p>4、禁止访问某目录中的内容</p>\r\n<p>此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</p>\r\n<p>在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f0173184-43f9-4d01-b995-b7714b2a88ae\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">denydir.html</span></div>\r\n<p>我们在修改配置文件之前先尝试访问： <img src=\"http://images.cnitblog.com/blog/499899/201304/10085920-d55b67301c4a4b61a8f4fbb07b856e93.png\" alt=\"\" /></p>\r\n<p>之后我们修改我们的网站配置文件：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090135-56087f20b3b94b0387082426339e60ec.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus后再刷新页面：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090240-75353923867546af80ccad0f9d42fc01.png\" alt=\"\" /></p>\r\n<p>我们达到了我们想要的效果。</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus反向代理</p>\r\n<p>Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在<a href=\"http://baike.baidu.com/view/1165595.htm\" target=\"_blank\">百度百科</a>、<a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" target=\"_blank\">维基百科</a>或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</p>\r\n<p>在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</p>\r\n<p>使用代理具有以下优势：</p>\r\n<p>　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</p>\r\n<p>　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</p>\r\n<p>　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</p>\r\n<p>说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/10093405-4b5f999e4f104808910fa4ecf63b5cd7.png\" alt=\"\" /></p>\r\n<p>我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</p>\r\n<p>使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</p>\r\n<p>此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</p>\r\n<p>&nbsp;在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10221804-6eaf0d60f40f447c98c88e37926fa8e7.png\" alt=\"\" /></p>\r\n<p>分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223311-bd41bbb7d09a4aa5a910c7dfcb39e44f.png\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223423-705f9aca8b0e4293b9258ed81e08163b.png\" alt=\"\" /></p>\r\n<p>再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224159-d02ed535eec049ec991d3665347b5caa.png\" alt=\"\" /></p>\r\n<p>保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224323-362ef60552ac4a36a096e1c580540046.png\" alt=\"\" /></p>\r\n<p>Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</p>\r\n<p>&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</p>\r\n<p>　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</p>\r\n<p>　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10230231-b9d300e89ba947269d726f31d6052020.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;6、SendFile技术</p>\r\n<p>我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12175257-b719679488e440eb990de3f6ac363ee8.png\" alt=\"\" /></p>\r\n<p>我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12183043-8ef79074843f41af9de99f024031d418.png\" alt=\"\" /></p>\r\n<p>SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</p>\r\n<p>现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</p>\r\n<p>下面我们完成此实验：</p>\r\n<p>在网站根目录中通过Linux创建一个100M大小的文件</p>\r\n<p>cd /var/www/xiaodiejinghong/</p>\r\n<p>&nbsp;dd if=/dev/zero of=./file.zip bs=1M count=100</p>\r\n<p>然后在Windows中创建一个网站，并写好我们的应用程序代码</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12200958-4f273e2a838d4457aff2b2dc52696e8b.png\" alt=\"\" /></p>\r\n<p>界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</p>\r\n<div class=\"cnblogs_code\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n<pre>    protected void Button1_Click(object sender, EventArgs e)\r\n    {\r\n        Response.ContentType = \"application/octet-stream\";\r\n        Response.AddHeader(\"Content-Disposition\", \"attachment;filename=file.zip\");\r\n        Response.AddHeader(\"X-SendFile\", \"/var/www/xiaodiejinghong/file.zip\");\r\n        Response.End();\r\n    }</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n</div>\r\n<p>点击Button后，文件就可以下载了</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12201256-9d490313999644f390ffa885327bb5a1.png\" alt=\"\" /></p>\r\n<p>这里有两个注意事项需要注意的：</p>\r\n<p>　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</p>\r\n<p>　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>7、前置缓存</p>\r\n<p>对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</p>\r\n<p>&nbsp;</p>\r\n<p>8、Gzip传输压缩</p>\r\n<p>各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</p>\r\n<p>Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13095650-64e073310a0f41e9a8d16fd5493563b5.png\" alt=\"\" /></p>\r\n<p>开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</p>\r\n<p>开启前：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102039-e850745d21cb45e5925ce1c95805d3be.png\" alt=\"\" /></p>\r\n<p>开启后：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102114-f34f5ebf338d4b78ad58f6129d7c7b49.png\" alt=\"\" /></p>\r\n<p>虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13110436-588337d85859442087fedcd8e53336c6.png\" alt=\"\" /></p>\r\n<p>比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</p>\r\n<p>&nbsp;</p>\r\n<hr />\r\n<p>好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/03/3047317.html\" target=\"_blank\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</p>\r\n</body>\r\n</html>',1408492126065,1409072773318,0,0,'3,2',1,1,1,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>',1408492126065),(6,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>safsadfasdf</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p>前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>\r\n<p>在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</p>\r\n<p>正式进入到本回合的正题，案例代码可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\" target=\"_blank\">点击这里</a>下载：</p>\r\n<p>在本回合中，我们将讨论学习：</p>\r\n<p>　　（1）、在Mono中部署一个简单的在线加法器</p>\r\n<p>　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</p>\r\n<p>　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</p>\r\n<hr />\r\n<p>1、牛刀小试</p>\r\n<p>在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</p>\r\n<p>针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/27165836-9b061074ab464d369c341a62e2cffb6b.png\" alt=\"\" /></p>\r\n<p>然后在Windows中的Visual Studio写一个简单的网站。</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre> <span style=\"color: #800080;\">1</span> <span style=\"color: #000000;\">&lt;%</span><span style=\"color: #000000;\">@ Page Language</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> AutoEventWireup</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> CodeFile</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default.aspx.cs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Inherits</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_Default</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">%&gt;</span>\r\n <span style=\"color: #800080;\">2</span> \r\n <span style=\"color: #800080;\">3</span> <span style=\"color: #000000;\">&lt;!</span><span style=\"color: #000000;\">DOCTYPE html</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">4</span> \r\n <span style=\"color: #800080;\">5</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html xmlns</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">6</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">7</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">/&gt;</span>\r\n <span style=\"color: #800080;\">8</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">9</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">10</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">11</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">form id</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">form1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">12</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">div style</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">background-color:pink;height:40px;width:600px;padding:10px;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">13</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>  <span style=\"color: #000000;\">+</span>\r\n<span style=\"color: #800080;\">14</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">15</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:Button ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Text</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> OnClick</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Add</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">/&gt;</span>\r\n<span style=\"color: #800080;\">16</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Result</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ReadOnly</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">17</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">div</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">18</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">form</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">19</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">20</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\"> 1 &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n 2 \r\n 3 &lt;!DOCTYPE html&gt;\r\n 4 \r\n 5 &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n 6 &lt;head runat=\"server\"&gt;\r\n 7 &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n 8     &lt;title&gt;&lt;/title&gt;\r\n 9 &lt;/head&gt;\r\n10 &lt;body&gt;\r\n11     &lt;form id=\"form1\" runat=\"server\"&gt;\r\n12     &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n13         &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n14         &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n15         &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n16         &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n17     &lt;/div&gt;\r\n18     &lt;/form&gt;\r\n19 &lt;/body&gt;\r\n20 &lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/27170247-4088cfd2bed94e059e9d806a465d7df3.png\" alt=\"\" /></p>\r\n<p>成功的访问并计算~~~！！！</p>\r\n<p>这里有几个需要提醒的地方：</p>\r\n<p>　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</p>\r\n<p>　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</p>\r\n<p>　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</p>\r\n<p>&nbsp;</p>\r\n<p>2、PostgreSQL与Mono的结合</p>\r\n<p>一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</p>\r\n<p>而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</p>\r\n<p>在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\" target=\"_blank\">《PostgreSQL和MySQL的对比》</a>和<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\" target=\"_blank\">《MySQL VS PostgreSQL》</a>。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</p>\r\n<p>好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\" target=\"_blank\">《CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3》</a>和<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\" target=\"_blank\">《CentOS 6.3 Minimal&nbsp;源码安装 PostgreSQL 9.2.3》</a>，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在<a href=\"http://weibo.com/317166684\" target=\"_blank\">微博</a>上私信或@我）。</p>\r\n<p>首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29213859-9fd41a47d7434984a2c66bf412e0a344.png\" alt=\"\" /></p>\r\n<p>然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\" target=\"_blank\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</p>\r\n<p>在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</p>\r\n<p>使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29200258-ec8c95ef1d3049cea0e15cb25d6fb923.png\" alt=\"\" /></p>\r\n<p>这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</p>\r\n<p>然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p>接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29224120-cc9e84ee622346a8b9ff5937601572b5.png\" alt=\"\" /></p>\r\n<p>&nbsp;这里有几点注意需要提醒各位读者：</p>\r\n<p>　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</p>\r\n<p>　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</p>\r\n<p>　　（3）、网站上传之后各位读者别忘了把Jexus重启。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Mono中使用PetaPoco</p>\r\n<p>微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</p>\r\n<p>尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</p>\r\n<p>面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</p>\r\n<p>Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework&nbsp;-Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</p>\r\n<p>&nbsp;既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">.NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</p>\r\n<p>&nbsp;我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</p>\r\n<p>然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/30155114-37c03ce424b74d4a9b6aa602694b85a1.png\" alt=\"\" /></p>\r\n<p>然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bc3302c6-c0c7-43d6-b449-2e44e6e0d42e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Webb.Config</span></div>\r\n<p>在Model中添加上我们的&rdquo;Person&ldquo;实体类：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cd0a3eae-0982-4fc5-9198-8174b15e3686\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Person.cs</span></div>\r\n<p>跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/30164722-030800f8ce974870a68263c279c116ad.png\" alt=\"\" /></p>\r\n<p>在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</p>\r\n<hr />\r\n<p>就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/23/3092181.html\" target=\"_blank\">下一节</a>，我们尝试在Mono中部署一款优秀的开源框架，也就是在已经在Java中大行其道的Spring，我们部署的是Spring.NET，嗯，我们下回见。</p>\r\n</body>\r\n</html>',1408492228596,1409085240146,0,0,'',1,0,0,'<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\"><a style=\"margin: 0px; padding: 0px; color: #5a5a5a;\" href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\">前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>',1408492228596),(7,'Linux.NET学习手记（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>\r\n<p>嗯，聪明的读者一定猜到了本回合要讨论学习的内容，对了，本回合我们讨论学习的内容就是：服务器软件Jexus。</p>\r\n<p>由于Jexus需要讨论学习的知识比较多，为此我会把Jexus分开两个回合来讲解，分别是这个回合对于Jexus的一些概念性和基础配置的讲解，以及下一回合Jexus网站配置高级功能的演示与讲解。</p>\r\n<p>本回合我们一起讨论学习的内容：</p>\r\n<p>　　（1）、对Jexus的概念性理解：什么是Jexus</p>\r\n<p>　　（2）、对上回合搭建环境时所遗留的问题进行辨析：为什么要选择Jexus</p>\r\n<p>　　（3）、Jexus的基本操作</p>\r\n<p>　　（4）、Jexus的整体配置</p>\r\n<p>　　（5）、介绍并使用Jexus的进程守护工具jws.guard</p>\r\n<hr />\r\n<p>&nbsp;1、什么是Jexus</p>\r\n<p>&ldquo;孔子门徒三千，成名七十二&rdquo;，世界上存在着各种各样不同类型的服务器软件，当然也包括你当时写来玩玩没有发布的那款，而在这众多的软件中，比较著名的有：IIS、Apache、Nginx、LIgHttpd等。而Jexus作为这众多服务器软件的其中一员，现在的排名应该就是这三千名中的第七十三名，也就是还没&ldquo;成名&rdquo;的那一位。</p>\r\n<p>的确，Jexus并没有出身在贵族之中，它没有像IIS一样拥有一个有钱有势有技术的托拉斯父亲帮它修饰与推广，也没有像Apache服务器软件一样成为&ldquo;Apache基金会&rdquo;的顶级项目被世界所认知，同样也没有像LigHttpd一样拥有高贵的普鲁士血种成为大家的新宠。<a href=\"http://baike.baidu.com/view/4562810.htm\" target=\"_blank\">百度百科</a>中对于Jexus的介绍也只有仅仅的那么几行，（至写本文章为止）<a href=\"http://zh.wikipedia.org/w/index.php?search=jexus&amp;title=Special%3A%E6%90%9C%E7%B4%A2\" target=\"_blank\">维基百科</a>中直接就找不到Jexus的存在，很多读者对于Jexus还是比较陌生的，对于Jexus的认知或许也仅仅是&ldquo;这东西可以在Linux中跑.NET&rdquo;，甚至直接就不知道有这么一款软件存在。</p>\r\n<p>孔子的弟子中，虽然只有七十二名的弟子被成为贤人，但是，谁又能说第一百七十二名就不是贤人呢？第七百二十名弟子就不优秀呢？在这剩下的两千多人中，其中也有很多弟子是很优秀的，只不过由于种种的原因而没有被其他人称作&ldquo;贤人而已&rdquo;。最近这两天，我跟群主（Jexus的作者）聊了不少东西，咨询了不少关于Jexus的情况，同时也感谢作者对我的一些ASP.NET的知识进行科普和扫盲，通过对Jexus的讨论，我体会到Jexus确实是一款优秀但却没太高名气的服务器软件，也就是那一位&ldquo;优秀而没有成名的弟子&rdquo;。</p>\r\n<p>用一句话介绍Jexus：Jexus是一款国产的基于.NET环境的有条件开源的免费的Web服务器软件，目前支持的平台有：Linux、FreeBSD和龙芯（旧版的海支持Windows），由作者（宇内流云）一人独力开发并长期维护，官方的论坛为：<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet 大本营</a>。</p>\r\n<p>我们在看看Jexus有那些功能特点（摘抄自Jexus说明书）</p>\r\n<p>　　（1）、高性能的ASP.NET处理能力。这是Jexus的核心功能。不管是稳定性、易用性还是并发承载能力、并行处理速度，Jexus对ASP.NET的支持都是非常优秀的；<br />　　（2）、支持Fast-CGI。通Fast-CGI，Jexus能支持包括PHP在内的所有拥有Fast-CGI服务功能的WEB应用；<br />　　（3）、具备基于正则表达式的强大的URL重写功能；<br />　　（4）、具有强劲的反向代理功能。支持多目标负载均衡，支持本地网站与远程网站无缝整合；<br />　　（5）、拥有强大的流媒体支持能力，支持FLV/F4V视频文件拖动播放，支持微软平滑流媒体技术；<br />　　（6）、支持&ldquo;服务器推送&rdquo;技术，配备了相应的服务器端、客户端开发接口，是开发现代WEB应用的利器；（注意，此功能在5.3版中已经除去，待到HTML5成熟并且大多数浏览器支持之后才重新推出）<br />　　（7）、具备可控的&ldquo;ASP.NET前置缓存&rdquo;，能最大限度地提高ASP.NET网站的承载能力和响应速度；<br />　　（8）、支持Https，具有SSL加密数据安全传输能力；<br />　　（9）、具有基础而实用的入侵检测功能，能自动终止已被识别的非法请求；<br />　　（10）、安装部署非常简便，操作使用极为简单。</p>\r\n<p>Jexus凝聚了作者的智慧和心血，针对当前Linux.NET服务器软件的不足实行有针对性的开发，因此是为.NET量身定做的一款服务器软件，再加上它所拥有的丰富的功能，确实是一款不错的软件。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么选择Jexus</p>\r\n<p>上回合，我们部署mono时，我们选择了Jexus作为服务器软件，同时也遗留了一个值得我们讨论的问题：为什么我们选择Jexus作为服务器软件而不是其他？下面我将会 通过两个主要方面的比较来推演出我们选择Jexus的原因：</p>\r\n<p>（1）、Windows 与 Linux 服务器软件的对比</p>\r\n<p>在上一回合的文章中，我阅读了所有读者给我的留言，其中有不少留言比较有趣的，当中有那么一则留言：&ldquo;.NET在Linux中跑效率和稳定性要比在Windows Server 2003 中要好&rdquo;，这时我就纳闷了.NET在WinServ03中还跑不过Linux？在自家做的环境中还比不上他人做的？此外，我也在Jexus的作者中得出那么一则消息：&ldquo;在相同的物理环境中，IIS 6.0 跑不过 Jexus 4.X&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144933-4d1303694d6c4f67a2b3c5a5c6cea530.jpg\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144946-0b8d0d91313e49cda60dd926d6e56035.jpg\" alt=\"\" />&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>上面的两幅图片是作者提供的关于IIS6.0 与 Jexus 4.3的简单性能测试，明显的看出Jexus 4.3的负载能力要比IIS 6 要强。当然，对于这片面的简单测试是远远不足以判定Jexus就比IIS性能强悍的，这需要通过更多更严格的系统性的测试，而且还要通过长期的实际使用才能对它们之间的性能对比作出判定。</p>\r\n<p>同时，我这里还要重申一点：&ldquo;IIS 绝对是一款性能优异的服务器软件&rdquo;，至于为什么会出现IIS跑不过Jexus的这种情况（这里的讨论仅限于图中的这两个版本的对比，对于新版的IIS与Jexus，这里不作讨论），我想其中的原因更大是由于运作的平台中的不同。</p>\r\n<p>IIS运行在Windows中，而Jexus则运行在Linux中，他们运行在不同的平台中，通过对比平台的差异，或许能够更容易的得出它们的差异。IIS6.0的性能低下（相对于Jexus4.3）很大程度上是由于Windows系统的拖累，为什么这么说？各位读者如果有兴趣的话可以右键点击计算机（我的电脑），然后打开它的服务列表，看看那庞大的列表中共有多少个服务，又有多少个服务是正在运行的（我刚刚自己手数了一下自己的电脑，共有178个服务，运行中的有92个，这里是普通系统，Server版本的当然没有这么多）。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05151116-8bbce625868548808089ab3ed7218bdc.png\" alt=\"\" /></p>\r\n<p>在这众多的服务当中，各位读者能够认得多少个呢？又是否能够清楚的说出每一个服务是干嘛用的呢？我相信各位读者应该没有认得出多少个，在这众多正在运行中的服务，很多都是为Windows系统提供一些体验性的功能，我们即使关闭了也对系统的影响不大，这些服务虽然可有可无，但是在我们安装系统的时候却会自动的给我们装上，并且默认的开机运行，运行就意味着系统需要从CPU消耗计算能力，需要从内存中划分出空间，这都是会浪费我们服务器的资源的。相反的，我们再看看Linux，在安装系统的时候就可以定制软件包，定制服务，我们可以选择最小化安装，也可以只安装我们需要的服务，对于我们不需要的服务，我们可以完全的无视之。还记得一位做服务器管理的老师曾经说过：&ldquo;对于运行的服务器，我们希望越轻越好，提供的服务越单一越好，开启的服务越少越不容易出错&rdquo;。我们回过头来看Windows，不免会觉得：&ldquo;Windows，你太重了&rdquo;。</p>\r\n<p>此外还有一点更重要，对Windows性能影响更大的，那就是Windows的图形界面。图形的处理会消耗大量的系统资源，而Windows在维持它的系统界面过程中就需要浪费服务器中大量的宝贵资源。我一直有这么一个观点：&ldquo;Linux是不应该存在图形界面的&rdquo;，同样，Server版的操作系统也不应该存在图形界面，正规的服务器是要被关在机房的，图形界面做得再好，画面再好看也不会有人去欣赏，尽管WinServ03的界面一点都不美观，但是丑归丑，维持这个界面还是要消耗大量的系统资源，安装CentOS6.4时内存如果没有1G，那图形的安装界面还起不了来，可见图形界面需要消耗多少的资源。同时，如果你是通过远程登陆到机房的服务器进行管理，网络问题同样会成为图形界面推送的一个瓶颈问题。</p>\r\n<p>就这样，过多的服务，加上万恶的图形界面，服务器在真正投入生产之前已经浪费了一笔珍贵的系统资源，相同物理配置的服务器，看似配置相同的环境，实际能够提供给服务器软件支配的系统资源却不同，IIS 6.0跑不过 Jexus 4.3也不足为奇了。</p>\r\n<p>&nbsp;（2）、同是Linux中.NET服务器软件的比较</p>\r\n<p>同时Linux中，运行环境才是真正的相同，这个比Windows/Linux更有可比性。Linux中搭建.NEt环境除了mono+Jexus之外还有一种方式，那就是mono+XSP。XSP是一款.NET的解析容器，它能够对.NET程序进行解析并维持高效的运行，但是它却有一个缺点，就是对于静态资源的处理能力相当有限，而一个网站中，大部分都是图片、CSS、JS等静态文件，真正动态生成的东西并不多，在这种情况下XSP就会暴露出它的软肋，面对这种情况，XSP一般都会整合一个高效的服务器软件进行弥补它的不足。类似于Tomcat+Apache的这种情况。这就衍生出了：网上提供的搭建Linux.NET的另外一种方式Linux+Apache（Nginx）+mono这种方式，它们在Apache（Nginx）和mono之间都会有一个插件，原理实际上就跟XSP一样。</p>\r\n<p>这里推荐一篇文章：《<a href=\"http://blog.csdn.net/jexus/article/details/5650714\" target=\"_blank\">为什么说Jexus更适合打造基于Linux/Unix系统的企业级 ASP.NET平台</a>》，该文章是Jexus的作者写的，里面有比较详细的对比了Linux采用Jexus的好处。阅读完这篇文章之后，相信读者也会明白为什么上回合搭建环境的时候直接选择了Jexus。</p>\r\n<p>最求更稳定，性能更优秀，效率更高，这就是我们选择Jexus的原因。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的操作</p>\r\n<p>经过两个章节关于Jexus的介绍，相信读者对于Jexus已经有了一个概念上的认识，从这个章节开始，接下来我们会对Jexus的使用进行实操，并通过操作Jexus时产生的现象进行讨论，从而进一步的了解并学会使用Jexus。</p>\r\n<p>Linux软件包有一个做得非常好的地方，那就是对于这款软件的使用手册、帮助文档往往都会存在软件本身之中，像&ldquo;有问题问男人&rdquo;（man命令）、&ldquo;--help&rdquo;等命令都能够提供快速的使用方法查阅，同样，关于Jexus的使用方法我们也可以通过Jexus软件包中的&ldquo;readme&rdquo;查阅得到。</p>\r\n<p>我们先看一下Jexus目录中有些什么东西：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05170609-411d6ae7b7824605ac00cd09311a9fa7.png\" alt=\"\" /></p>\r\n<p>里面也没有什么东西，包括四个文件夹（蓝色那种），六个脚本文件（绿色那种）和一些的其他文件（白色那种）。在这个章节里，我们介绍的是Jexus的操作，实际上就是对于Jexus脚本的操作和介绍。</p>\r\n<p>Jexus提供了六个操作脚本（针对5.3之前的版本,5.3版本已把所有jws脚步融合到jws中，使用方法为./jws 参数），他们的名称和功能分别是：</p>\r\n<p>　　jws.start: 启动Jexus；(如果需要开机自启动的，可以把脚本的全路径[包括脚步本身]添加到/etc/rc.local中；5.3中已改为：jws start)<br />　　jws.restart: 重启Jexus，如果命令后边加网站名作为参数，那么就表示启动或重启指定的网站；（5.3中已改为：jws restart）<br />　　jws.stop: 停止Jexus，如果命令后边加网站名作为参数，那么就表示停止指定的网站；（5.3中已改为：jws stop）<br />　　jws.regsvr: 注册jexus所需要的全局程序集（本命令只在安装或更新jexus后才用，而且必须用；5.3中已改为：jws regsvr）。<br />　　state.start: 启动Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）<br />　　state.stop: 停止Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</p>\r\n<p>　　此外，5.3中还增加以下功能：</p>\r\n<p>　　　　jws status：检查Jexus的运行状态</p>\r\n<p>　　　　jws -V：查看Jexus的版本　　　　　　　　　　　　　　　　</p>\r\n<p>操作方法跟运行普通脚本一样./XXX，没有多少技术含量。这里值得注意的是，这些脚步文件的拥有者应该保证是root用户，并且有运行的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>4、Jexus的配置</p>\r\n<p>Jexus的配置分为两个方面，一个是Jexus整体的配置（jws.conf），另外则是网站独立的配置（默认所有的网站配置文件都在siteconf文件夹中）。网站的独立配置可以调用很多Jexus的高级功能，我们把它当到下一回合再进行学习讨论，本章中我们主要进行Jexus的整站配置。我们用vi打开jws.conf看看里面有些什么设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05180814-e7e3731f09394f169969cdb65111ab25.png\" alt=\"\" /></p>\r\n<p>在这里，我解析一下每个选项的作用和注意事项：</p>\r\n<p>（1）、SiteLogDir：这个设置项必须得存在并且开启，该设置项设置Jexus的运行日志记录、各网站运行的日志记录都会存放到该文件夹中。此外，当记录的日志文件大小达到一定程度的时候，Jexus会自动的把日志写到一个新的日志文件中，不会一直通过追加写的方式把所有的日志记录都写到同一文件中。</p>\r\n<p>（2）、SiteConfigDir：这也是一个必须存在并且开启的设置项，这个设置项设置Jexus中各网站配置的存放地点，Jexus中默认的网站配置之所以存放在siteconf就是因为这里默认的值就为siteconf。此外值得注意的是，存放在该配置文件夹中的文件只能是网站的配置文件，其他任何的文件都不能存到到该目录（包括网站配置文件本身的备份文件），因为Linux系统所有的事物都是以文件的方式作为存储，因此无论你采用什么样的后缀，在Linux系统中都只当作普通文件来对待。</p>\r\n<p>（3）、Runtime：该设置项用于配置Runtime的版本，除非有特殊需求需要改动Runtime的版本，一般情况下无需修改。</p>\r\n<p>再来看一下一些高级点的设置项，这些设置项都是默认关闭的，</p>\r\n<p>（4）、LLVM：是否开启LLVM编译器功能。开启LLVM可以把中间语言的编译交给LLVM编译器，这可以加快编译的速度，编译出来的代码性能或许会更优秀一些。不过值得注意的地方：并不是所有的Linux都带有LLVM编译器，并且mono自带的编译器编译效率和编译生成的代码性能上也不差什么，因此如果没有特殊的需要，这一项可以让他保持默认关闭。</p>\r\n<p>（5）、httpd.processes：Jexus中默认的工作进程为1个，单个进程最大的并发数固定为1万个，通过开启多个工作进程可以提高Jexus处理并发的能力，开启多个进程的方式非常简单，只要修改httpd.processes的值并重启Jexus即可。不过这里有几点需要注意的地方：[1]Jexus最大支持的工作进程为4个，因此这里最大只能填写4；[2]如果开启了多个Jexus的工作进程，请注意网站的Session的保存方式，请通过修改网站config文件来修改Session的保存方式，避免采用进程的方式保存Session，否则将会造成Session的不同步，给网站的运作造成不必要的麻烦，Session的保存可以借助第三方的方式来保存（比如数据库，或者Jexus提供的强大的ASP.NET服务状态保存）；[3]Jexus工作进程的设置跟服务器的CPU内核数和内存数有关，如果你的Cpu只有一个核，而你配置开启了两个进程，也只能达到一个容错的效果，能够承载的并发数是不会上去的。详细可以参考文章<a href=\"http://www.linuxdot.net/bbsfile-3125\" target=\"_blank\">《让Jexus支持高并发请求的优化技巧》</a>。</p>\r\n<p>（6）、httpd.user：不知道各位读者用过Apache没有，在Apache中的httpd.conf有这么一项设置user=XXX：可以把Apache以某个用户的方式启动，相应的该用户的所拥有的操作权限都会赋给Apache进程。同样，httpd.user的作用也是跟Apache中的user是一样的，只要把一个已有的用户的用户名填写到httpd.user中，Jexus就会拥有该用户的操作权限。有什么用？嗯，举个例子吧，如果网站的运行会产生一些新文件的（比如做页面静态化），各位读者会采用什么办法解决呢？chmod 777？这可以解决，但是把目录的权限设置为777会存在安全性的问题，如果可以有一种解决方案：进程和某些用户可以对该目录进行读写操作，而其他用户不能，那就可以解决安全性问题了。嗯，对的，这个时候httpd.user就派上了用场，我们只要创建一个仅能供某个用户读写的目录，并把此用户的用户名填写到httpd.user中，就可以实现我们想要的功能了。</p>\r\n<p>（7）、php-fcgi.set：此功能是用于让Jexus支持PHP，由于这里与.NET关系不大，这里就不做过多的介绍了，需要了解的读者可以参照这篇文章<a href=\"http://www.linuxdot.net/bbsfile-3132\" target=\"_blank\">：《让Jexus V5.1支持PHP的操作步骤》</a>。</p>\r\n<p>（8）、CertificateFile 与 CertificateKeyFile：这个是让Jexus支持SSL的配置项，是用方法可以参照文章：<a href=\"http://zhumeng8337797.blog.163.com/blog/static/10076891420104654343279/\" target=\"_blank\">《Linux+Apache安装生成配置SSL证书》</a>和<a href=\"http://www.linuxdot.net/bbsfile-2970\" target=\"_blank\">《如何让jexus 支持ssl》</a></p>\r\n<p>在这八大Jexus的网站配置中，有一个终极的注意事项：每次配置后记得重启Jexus，否则刚才的配置是不会生效的！！！</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus进程守护工具jws.guard</p>\r\n<p>一个运行中的进程，难免会因为各种各样的原因无缘无故的宕掉（比如网站瞬间的负载过高、内存不足等），而Jexus宕掉的后果往往只有一个：对外提供服务的网站无法访问了。因此，我们需要最大限度的保障我们的网站能够提供7*24小时的不间断访问，而一个网站或者一个进程宕掉的过程是瞬间的，也许前一秒还访问得好好的，下一秒就突然间报个404的错误，而从网站或进程挂掉到我们人工的发现并重启服务的过程是漫长的，除非该网站有应对单点故障的解决方案，否则在这漫长的时间之中，网站都处于一个无法访问的黑色时期。如果这个宕掉的网站是一个企业网站，这会造成企业信誉度的下降；如果是一个商城网站，这会造成经济和人气的损失；因此，我们需要让系统能够自动的检测出网站的运行状态，当出现进程服务死机的时候能够自动重启。</p>\r\n<p>jws.guard的是一个python的脚本，工作原理也比较简单：根据设置好的预设值，每隔十秒钟访问一次访问一次指定的端口与文件，当三十秒内出现无法网站时就执行jws.restart进行重启网站。这里的三十秒指的是累计连续三次无法访问，防止因为检测时因为Jexus正忙而误判断重启，对网站进行误伤。</p>\r\n<p>jws.guard的使用方法也比较简单，只要把 &ldquo;tools/jws_guard&rdquo; 目录中的 &ldquo;guard.py&rdquo; 和 &ldquo;jws.guard&rdquo; 两个脚本文件拷贝到Jexus的工作目录（跟jws.start同一目录），然后配置一下jws.guard 中的预设值即可。</p>\r\n<p>我们首先把这两个文件拷贝出去</p>\r\n<p>cd /usr/local/jexus/tools/jws_guard/</p>\r\n<p>cp jws.guard guard.py /usr/local/jexus/</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>我们已经把这两个脚本拷贝到工作目录中。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/05202404-de9e4e1008c54293b161bc89aa34124f.png\" alt=\"\" /></p>\r\n<p>用vi打开并编辑jws.guard</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05202526-5f0fd75058e847b59ec0936962dd30ec.png\" alt=\"\" /></p>\r\n<p>把host、port、path改为我们需要的配置即可，它们分别代表主机地址，端口，检查的路径。一般情况下，如果Jexus采用80端口，这里可以不作修改直接使用，而如果Jexus采用的不是80端口，也只需要修改port，改为正确的端口并保存退出就可以了。host和path一般是不需要修改的，同时也不建议非必要的修改，因为修改jws.guard必须确保修改后修改的配置项是正确的，否则jws.guard就会因为无法访问配置后的网站而反复的重启Jexus，造成不必要的麻烦。</p>\r\n<p>修改好了之后只需要执行./jws.guard即可启动这款Jexus的进程守护工具。</p>\r\n<p>&nbsp;我们尝试性的把Jexus关掉。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203621-740e2ccb31b44910b38dd9d486334b40.png\" alt=\"\" /></p>\r\n<p>&hellip;&hellip;30秒之后&hellip;&hellip;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203850-cbb80f4d87e34a39a0fba02e47aade0a.png\" alt=\"\" /></p>\r\n<p>Jexus又起来了。</p>\r\n<p>通过jws.guard守护守护工具，我们可以很方便的让系统自动的发现Jexus进程宕机并快速的重启进程。同时我们只需要查阅Jexus的运行日志即可发现问题所在。</p>\r\n<p>这里有三点需要提醒的：</p>\r\n<p>　　（1）、如果需要关闭Jexus服务30秒以上的，请在关闭Jexus之前先执行./jws.guard stopg关闭jws.guard守护工具，以免守护工具自动的把Jexus又启动了起来。</p>\r\n<p>　　（2）、jws.guard是使用python语言编写的脚本，需要运行该工具时请确保系统中已经安装了python，检查方式可以执行 python -V ，如果没有出现python的版本信息则说明系统中没有安装python，这是，各位读者可以通过yum或者其他方式安装上python之后再运行jws.guard。</p>\r\n<p>　　（3）、再啰嗦一次，配置jws.guard时请确保配置的值是正确的。</p>\r\n<p>新版的Jexus的稳定性已经非常强，加上jws.guard可以起到加固作用。</p>\r\n<p>好的，至此Jexus的守护工具jws.guard就已经介绍完毕了。</p>\r\n<p>这里补充一点，高版本的Jexus已经把此工具从版本包中剔除，相信是因为高版本的Jexus中抗压能力有了更大的提高，因此作者也放心的将jws.guard移除。如果各位读者想保留功能的，可以下载一个之前版本的Jexus（可以在第一篇的学习手记中找到下载地址），然后在里面把此脚本提取出来使用。【补充于：2014/03/29】</p>\r\n<hr />\r\n<p>至此为止，本回合对于Jexus的基础讨论已经全部讲解完毕了。希望各位读者在阅读完本回合的文章之后能够对Jexus有一个基础性的了解，同时，如果各位读者有发现本回合中任何知识点的错漏、对本文章有任何的意见或者建议、对Linux.NEt的发展有任何的见解，都欢迎留言指教。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">下一回合</a>，我们将会对Jexus的高级功能：访问IP过滤、服务器的高速缓存、URL重写等功能进行深入的讲解并逐一的演示，同时，也希望没有搭建好Linux.NET的读者能够把环境搭建好，因为下回合所有的演示都是基于这个环境来进行实操。好吧，我们下回再见吧。</p>\r\n</body>\r\n</html>',1408492242317,1409073137330,0,0,'',1,0,0,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>',1408492242317),(8,'Linux.NET学习手记（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>\r\n<p>本回合，我们主要讨论学习：</p>\r\n<p>1、什么是mono</p>\r\n<p>2、为什么要用mono</p>\r\n<p>3、如何在Linux中部署一个.NET的运行环境</p>\r\n<p>4、部署时我们需要注意什么，以及对一些关键步骤的解析</p>\r\n<hr />\r\n<p>1、什么是mono</p>\r\n<p>关于什么是mono，我想无论我怎么说，应该都不会比官方的解释，或者是<a href=\"http://baike.baidu.com/view/26639.htm\" target=\"_blank\">百科</a>更加详细；我这里就简单说吧，Java之所以能够跨平台运作，是依赖与Java的虚拟机JVM，而.NET之所以只能够在Windows中跑，同样是因为.NET运行需要依赖与Framework的Runtime（公共运行时），那如果能够在Linux同提供适合于.NET运作的环境（包括CLR等），那.NET也可以在Linux中跑起来了，这就是mono了。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么要使用mono</p>\r\n<p>为什么使用mono，原因有很多，不过归结起来，我个人认为以下这是最重要的：</p>\r\n<p>（1）、作为服务器来说，如果能够实现一模一样的功能的，还是主推Linux。为什么呢？我列举了几个实例：</p>\r\n<p>　　首先，如果服务器需要打补丁，作为Windows服务器，你打完补丁之后必须重启，这一定程度上会对你的业务造成一定程度上的影响</p>\r\n<p>　　其次，我们经常会听到Windows会中毒，特别是作为Web服务器和邮件服务器，我们不知道用户会给我们上传一些什么东西上来，相反，我们却很少会听到Linux中毒这么一个说法；这是由于Linux存在着太多的发行版本，不同版本之间编译后的软件无法相互调用，因此，如果能够感染A版本的Linux病毒无法感染B版本的Linux，这在很大程度上削减了病毒的危害性。</p>\r\n<p>　　再者，作为服务器，我们会尽量希望自己的系统更加的轻量化，更加的高效，和更加的稳定；Linux对于我们的要求，都提供了，我们可以定制的安装软件和服务，对于一些不必要的服务我们可以直接不安装（注意，是直接不安装，而不是安装之后再关闭），相反，如果采用Windows的话，一上来就啪嗒啪嗒的安装一大堆软件和服务，无论你用不用得上，先给你安装；也许这个可以让您的服务器充当更多的角色，但是我们更加希望服务器能够做到单一高效而不是面面俱到。</p>\r\n<p>　　最后，Linux运行对于硬件的要求比较低，这也是由于Linux抛弃桌面环境（作为服务器，我们不应该安装XWindow）和没有太多不必要的服务所决定的，而Windows则显得矜贵多了，硬件配置低一点还不一定能够正常运作。</p>\r\n<p>（2）、从成本考虑：</p>\r\n<p>　　一般部署在Windows中的.NET程序都是采用 &ldquo;Windows Server版本 + IIS + &nbsp;MS SQLServer&rdquo; 这确实是.NET的黄金组合，但是，值得遗憾的是，它们都是要收费的，系统要收费，数据库要收费；作为大企业来说，上千上万台服务器，如果都采用这种模式的话，那将是一笔巨额的开销；对于小公司，资金对于它们来说本就是一个难题，能省下来的基本上都希望省下来，如果放着一个能够达到相同功能而且免费的模式不用而采取这种付费模式，那太说不过去了。</p>\r\n<p>　　　而如果我们采用mono，把.NEt部署在Linux中，我们可以采用以下的组合：&ldquo;Linux + mono + jexus（Apache/nginx +&nbsp;XSP2）+ MySql(PostgerSQL或其他免费数据库)&rdquo;，所有的这些无论是否开源（jexus不开源）都是免费的。</p>\r\n<p>　　作为老板，你会选择哪种呢？&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>3、mono环境的部署</p>\r\n<p>介绍再多也不过是纸上谈兵，实战才是硬道理。工欲善其事必先利其器，要实操，还必须先要有这个环境，下面进入本回合的重点环节，Mono环境的配置。</p>\r\n<p>网上也有大量关于mono环境搭建的帖子，基本上都是搭配以下这两种类型的mono环境：以免费不开源jexus作为服务器软件的mono环境 和 以Apache（或nginx）作为服务器软件的mono环境，具体选择哪款环境读者可以自由选择。选择前者的，可以参考张善友先生的<a href=\"http://www.cnblogs.com/shanyou/archive/2012/01/07/2315982.html\" target=\"_blank\">《32和64位的CentOS 6.0下 安装 Mono 2.10.8 和Jexus 5.0》</a>；而选择后者的读者则可以参考<a href=\"http://www.cnblogs.com/aquilahkj/archive/2011/11/03/2234380.html\" target=\"_blank\">《CentOS 6.0 安装 MONO 2.10.8》</a>。</p>\r\n<p>这里我们就选择前者[选择的原因我打算放到下一回合再来说明]。</p>\r\n<p>版本选择，均选择当前所能下载的最新版本（需要下载的可以链接下载）：</p>\r\n<p>操作系统：<a href=\"http://mirrors.grandcloud.cn/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-bin-DVD1.iso\" target=\"_blank\">CentOS-6.4-x86_64</a></p>\r\n<p>libgdiplus：<a href=\"http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2\" target=\"_blank\">libgdiplus-2.10.9</a></p>\r\n<p>mono：<a href=\"http://download.mono-project.com/sources/mono/mono-3.0.7.tar.bz2\" target=\"_blank\">mono-3.0.7</a></p>\r\n<p>jexus：<a href=\"http://www.linuxdot.net/down/jexus-5.2.3.tar.gz\" target=\"_blank\">jexus-5.2.3</a>（这里最新版其实是jexus-5.3.0 beta3，不过基于稳定性，我选择了最新的稳定发行版）</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01155420-f8be87af3239421987d08120d54e4a7e.png\" alt=\"\" /></p>\r\n<p>首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</p>\r\n<p>装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01163416-47fa6ccd205b41c783232babc686d0c0.png\" alt=\"\" /></p>\r\n<p>（1）、更新系统 yum update &nbsp; （这里我就不更新了，因为都是最新版的东西了）</p>\r\n<p>（2）、通过yum安装编译mono所需要的库</p>\r\n<p>&nbsp;yum -y install gcc gcc-c++ bison pkgconfig glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel&nbsp; cairo-devel<br />（3）、编译安装Libgdiplus</p>\r\n<p>tar jxf libgdiplus-2.10.9.tar.bz2</p>\r\n<p>cd libgdiplus-2.10.9</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make &amp;&amp; make install</p>\r\n<p>echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</p>\r\n<p>ldconfig</p>\r\n<p>（4）、安装mono</p>\r\n<p>由于mono比较大，因此解压和编译安装都需要比较长的时间</p>\r\n<p>tar jxf mono-3.0.7.tar.bz2</p>\r\n<p>cd mono-3.0.7</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make</p>\r\n<p>make install</p>\r\n<p>ldconfig</p>\r\n<p>echo &nbsp;PATH=/usr/local/mono/bin:$PATH&gt;&gt;~/.bash_profile</p>\r\n<p>source ~/.bash_profile</p>\r\n<p>执行 &nbsp;&ldquo; mono -V &rdquo;如果可以看到mono的版本信息，则表明编译安装成功</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01181638-1dfdf90f13734224a37b1674576165eb.png\" alt=\"\" /></p>\r\n<p>（5）、安装jexus</p>\r\n<p>安装jexus比较简单，jexus安装分为全新安装和升级安装两种，由于我们这里是全新安装，所以只讲全新安装部分，升级安装可以阅读jexus中自带的readme文档，里面有详细介绍。</p>\r\n<p>tar xzf jexus-5.2.3.tar.gz</p>\r\n<p>mv jexus-5.2.3 /usr/local/jexus</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>./jws.regsvr</p>\r\n<p>ln -s /usr/local/mono/ /opt/mono</p>\r\n<p>至此，jexus就安装完毕了</p>\r\n<p>&nbsp;</p>\r\n<p>输入操作 &ldquo;./jws.start&rdquo;启动服务器，输入网址XXXX/info，得到以下画面，表明全部安装成功。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01182900-cfe15941dd9c48a1a32b675bddf1b5e6.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>4、部署需要注意的事项与解释</p>\r\n<p>上回合我们只是单纯的部署讲怎么部署mono，并没有对部署mono中每一步的作用做出解释，很多读者或许部署完了还不明白到底怎么回事，因此这回合我们就上回合的操作作出解释，并了解重点需要注意哪些事项。</p>\r\n<p>（1）、部署&nbsp;libgdiplus 时，执行最后一步是什么意思？</p>\r\n<p>　　上回合中，我们部署 libgdiplus 时执行了一步 &ldquo;echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf&rdquo;，这一步的作用其实到了部署mono时，执行&nbsp;ldconfig 才正式的发挥作用。由于我们部署libgdiplus 和mono没有部署到系统默认的/usr 中，因此系统是不会默认的到我们部署mono的文件夹中搜寻和读取里面的动态库文件，这时，我们需要在/etc/ld.so.conf.d/文件夹中，手动的添加mono动态库文件夹的地址，再执行 ldconfig 来让系统能够找到我们的动态库文件。</p>\r\n<p>（2）、部署mono后，执行 ldconfig 很重要</p>\r\n<p>编译部署mono之后，我们会得到大量需要加载的动态库文件，而这些动态库文件，我们再下一步的时候就需要用到，因此需要让系统重新加载。（如果没有重新加载，有可能在部署jexus的时候会出现各种各样的问题）</p>\r\n<p>（3）、部署mono之后，需要把bin目录的路径加入到环境变量PATH中</p>\r\n<p>原理跟安装完jdk之后，需要在环境变量注册是一样的。</p>\r\n<p>（4）、部署jexus需要执行注册</p>\r\n<p>部署jexus的过程相当简单，只需要解压，然后把文件夹拷贝到我们想要它存放的目录就可以了，不过在此之后，我们需要注册全局程序集（./jws.regsvr），这个很重要</p>\r\n<p>（5）、为什么注册完jexus之后需要添加一个软链接</p>\r\n<p>事实上，本来这个软链接是不会写上来的，因为之前部署mono时，注册完jexus了，服务就可以正常的跑起来了。但是这次不同，注册完之后，&ldquo;./jws.start&rdquo;之后，服务并没有起来，执行\"./jws.stop\"系统报了个notfoundXXX（找不到XXX）。于是用vi随便打开了其中的一个脚本，注意到了如下的代码：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01195628-72782097379e44069f62b30c68aebc56.png\" alt=\"\" /></p>\r\n<p>很明显，jws脚本哪里写有了寻找mono的搜寻路径，而恰好，我们部署的mono都不在这几个路径中，因此，jexus找不到想要的bin目录下的文件，所以就服务起不来或者报了个notfound。这时，我们只要在/opt/mono/ 中（当然Path中的任意一个都行，或者你也可以自己手动的一个一个脚本文件添加上mono的目录路径）添加一个软链接，把它链接到我们部署mono的目录下，jexus就能够顺利的找到想要的文件。</p>\r\n<hr />\r\n<p>好了，要讲的暂时就这么多，我们的Linux.NET环境就基本搭建起来了。各位读者此刻时候有一种跃跃欲试的感觉，如果有，欢迎您马上行动，纸上得来终觉浅绝知此事必躬行。</p>\r\n<p>此外：由于本人对Linux.NET接触时间并不太久，手上也没有比较有效的资料，因此很多时候都是采取摸着石头过河的方式来学习研究，如果在讨论学习的过程中有任何错漏的，欢迎各位读者能够指正出来，同时，如果各位读者有任何的意见或者建议，也欢迎大家提出。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">下一回合</a>，我们将讨论学习：jexus作为Linux下基于mono的.NET服务器，其优势在哪？jexus的配置与特色功能，还有其中的一些注意事项与小技巧。</p>\r\n</body>\r\n</html>',1408908907822,1409073089392,0,0,'',1,1,0,'<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>',1408908907822),(9,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>\r\n<p>好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</p>\r\n<p>　　1、NOFILE功能　　</p>\r\n<p>　　2、Jexus的URLRewrite</p>\r\n<p>　　3、Jexus如果做IP过滤</p>\r\n<p>　　4、对目录访问禁止</p>\r\n<p>　　5、Jexus如何使用反向代理功能</p>\r\n<p>　　6、如何使用SendFile技术</p>\r\n<p>　　7、Jexus的高速缓存</p>\r\n<p>　　8、Jexus如何对静态资源进行压缩传输</p>\r\n<hr />\r\n<p>0、新建一个网站配置</p>\r\n<p>这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</p>\r\n<p>上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</p>\r\n<p><span class=\"Apple-converted-space\">Jexus中默认</span>SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/07195426-860ad529f327422e8105e5e0d31bf181.png\" alt=\"\" /></p>\r\n<p>该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</p>\r\n<p>先来讲解一下这三项是干嘛用的：</p>\r\n<p>port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</p>\r\n<p>　　这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</p>\r\n<p>&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</p>\r\n<p>　　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</p>\r\n<p>hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</p>\r\n<p>下面，我就开始演示操作：</p>\r\n<p>我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184417-05f1ea4477f74ca69b123ffe42054c26.png\" alt=\"\" /></p>\r\n<p>接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08183855-7d36d60425694318a037fc9535634ee0.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184651-7ec0488710684303bb716316110f359b.png\" alt=\"\" /></p>\r\n<p>证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</p>\r\n<p>&nbsp;</p>\r\n<p>1、Jexus的NOFile功能。</p>\r\n<p>当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</p>\r\n<p>我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_983f4aca-2809-4ee2-81c6-b710f9065e1b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">404.html</span></div>\r\n<p>然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215337-b2d264da1eb248809791f8c8ec8c5595.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215544-b061f60964514812b3a2056a474e0254.png\" alt=\"\" /></p>\r\n<p>使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</p>\r\n<p>这里值得提醒的就是此功能的使用情况，</p>\r\n<p>　　（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</p>\r\n<p>　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的URL地址都被Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）</p>\r\n<p>&nbsp;</p>\r\n<p>2、Jexus的URL重写</p>\r\n<p>URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在<a href=\"http://baike.baidu.com/view/1002788.htm\" target=\"_blank\">百度百科</a>中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</p>\r\n<p>URLRewrite有以下的好处：</p>\r\n<p>　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</p>\r\n<p>　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</p>\r\n<p>　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</p>\r\n<p>在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</p>\r\n<p>下面进行URL重写的实验：</p>\r\n<p>要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</p>\r\n<p>首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码。　　</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_55623fe4-7375-4626-9a48-be22cef27aff\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">php.html</span></div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a313ec63-04fc-4b62-9452-1ffb07a48695\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">aspx.html</span></div>\r\n<p>然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08225515-2ef717370f31432c89c93aaf1dbdf6b7.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222339-bfb266021b1845f28ddcecbb065bafa3.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222431-2b52120bc6154fb09eb07d5a2f611cf9.png\" alt=\"\" /></p>\r\n<p>成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</p>\r\n<p>　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</p>\r\n<p>　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</p>\r\n<p>　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08230921-03e2181f714b4c46b227f8a921d9977c.png\" alt=\"\" /></p>\r\n<p>　　（4）、配置之后必须重启Jexus，否则是不会生效的。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的IP封杀</p>\r\n<p>有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</p>\r\n<p>我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231213-2143c4d089784d08936639259e4c7d38.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，再来访问网站：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231355-23426f11421a401e9d608ea825f3d856.png\" alt=\"\" /></p>\r\n<p>我们的IP就被封杀掉了。</p>\r\n<p>&nbsp;</p>\r\n<p>4、禁止访问某目录中的内容</p>\r\n<p>此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</p>\r\n<p>在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f0173184-43f9-4d01-b995-b7714b2a88ae\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">denydir.html</span></div>\r\n<p>我们在修改配置文件之前先尝试访问： <img src=\"http://images.cnitblog.com/blog/499899/201304/10085920-d55b67301c4a4b61a8f4fbb07b856e93.png\" alt=\"\" /></p>\r\n<p>之后我们修改我们的网站配置文件：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090135-56087f20b3b94b0387082426339e60ec.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus后再刷新页面：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090240-75353923867546af80ccad0f9d42fc01.png\" alt=\"\" /></p>\r\n<p>我们达到了我们想要的效果。</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus反向代理</p>\r\n<p>Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在<a href=\"http://baike.baidu.com/view/1165595.htm\" target=\"_blank\">百度百科</a>、<a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" target=\"_blank\">维基百科</a>或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</p>\r\n<p>在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</p>\r\n<p>使用代理具有以下优势：</p>\r\n<p>　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</p>\r\n<p>　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</p>\r\n<p>　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</p>\r\n<p>说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/10093405-4b5f999e4f104808910fa4ecf63b5cd7.png\" alt=\"\" /></p>\r\n<p>我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</p>\r\n<p>使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</p>\r\n<p>此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</p>\r\n<p>&nbsp;在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10221804-6eaf0d60f40f447c98c88e37926fa8e7.png\" alt=\"\" /></p>\r\n<p>分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223311-bd41bbb7d09a4aa5a910c7dfcb39e44f.png\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223423-705f9aca8b0e4293b9258ed81e08163b.png\" alt=\"\" /></p>\r\n<p>再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224159-d02ed535eec049ec991d3665347b5caa.png\" alt=\"\" /></p>\r\n<p>保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224323-362ef60552ac4a36a096e1c580540046.png\" alt=\"\" /></p>\r\n<p>Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</p>\r\n<p>&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</p>\r\n<p>　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</p>\r\n<p>　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10230231-b9d300e89ba947269d726f31d6052020.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;6、SendFile技术</p>\r\n<p>我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12175257-b719679488e440eb990de3f6ac363ee8.png\" alt=\"\" /></p>\r\n<p>我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12183043-8ef79074843f41af9de99f024031d418.png\" alt=\"\" /></p>\r\n<p>SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</p>\r\n<p>现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</p>\r\n<p>下面我们完成此实验：</p>\r\n<p>在网站根目录中通过Linux创建一个100M大小的文件</p>\r\n<p>cd /var/www/xiaodiejinghong/</p>\r\n<p>&nbsp;dd if=/dev/zero of=./file.zip bs=1M count=100</p>\r\n<p>然后在Windows中创建一个网站，并写好我们的应用程序代码</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12200958-4f273e2a838d4457aff2b2dc52696e8b.png\" alt=\"\" /></p>\r\n<p>界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</p>\r\n<div class=\"cnblogs_code\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n<pre>    protected void Button1_Click(object sender, EventArgs e)\r\n    {\r\n        Response.ContentType = \"application/octet-stream\";\r\n        Response.AddHeader(\"Content-Disposition\", \"attachment;filename=file.zip\");\r\n        Response.AddHeader(\"X-SendFile\", \"/var/www/xiaodiejinghong/file.zip\");\r\n        Response.End();\r\n    }</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n</div>\r\n<p>点击Button后，文件就可以下载了</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12201256-9d490313999644f390ffa885327bb5a1.png\" alt=\"\" /></p>\r\n<p>这里有两个注意事项需要注意的：</p>\r\n<p>　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</p>\r\n<p>　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>7、前置缓存</p>\r\n<p>对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</p>\r\n<p>&nbsp;</p>\r\n<p>8、Gzip传输压缩</p>\r\n<p>各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</p>\r\n<p>Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13095650-64e073310a0f41e9a8d16fd5493563b5.png\" alt=\"\" /></p>\r\n<p>开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</p>\r\n<p>开启前：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102039-e850745d21cb45e5925ce1c95805d3be.png\" alt=\"\" /></p>\r\n<p>开启后：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102114-f34f5ebf338d4b78ad58f6129d7c7b49.png\" alt=\"\" /></p>\r\n<p>虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13110436-588337d85859442087fedcd8e53336c6.png\" alt=\"\" /></p>\r\n<p>比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</p>\r\n<p>&nbsp;</p>\r\n<hr />\r\n<p>好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/03/3047317.html\" target=\"_blank\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</p>\r\n</body>\r\n</html>',1408492126065,1409072773318,0,0,'3,2',1,1,1,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>',1408492126065),(10,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>safsadfasdf</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p>前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>\r\n<p>在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</p>\r\n<p>正式进入到本回合的正题，案例代码可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\" target=\"_blank\">点击这里</a>下载：</p>\r\n<p>在本回合中，我们将讨论学习：</p>\r\n<p>　　（1）、在Mono中部署一个简单的在线加法器</p>\r\n<p>　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</p>\r\n<p>　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</p>\r\n<hr />\r\n<p>1、牛刀小试</p>\r\n<p>在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</p>\r\n<p>针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/27165836-9b061074ab464d369c341a62e2cffb6b.png\" alt=\"\" /></p>\r\n<p>然后在Windows中的Visual Studio写一个简单的网站。</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre> <span style=\"color: #800080;\">1</span> <span style=\"color: #000000;\">&lt;%</span><span style=\"color: #000000;\">@ Page Language</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> AutoEventWireup</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> CodeFile</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default.aspx.cs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Inherits</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_Default</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">%&gt;</span>\r\n <span style=\"color: #800080;\">2</span> \r\n <span style=\"color: #800080;\">3</span> <span style=\"color: #000000;\">&lt;!</span><span style=\"color: #000000;\">DOCTYPE html</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">4</span> \r\n <span style=\"color: #800080;\">5</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html xmlns</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">6</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">7</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">/&gt;</span>\r\n <span style=\"color: #800080;\">8</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">9</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">10</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">11</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">form id</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">form1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">12</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">div style</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">background-color:pink;height:40px;width:600px;padding:10px;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">13</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>  <span style=\"color: #000000;\">+</span>\r\n<span style=\"color: #800080;\">14</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">15</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:Button ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Text</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> OnClick</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Add</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">/&gt;</span>\r\n<span style=\"color: #800080;\">16</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Result</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ReadOnly</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">17</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">div</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">18</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">form</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">19</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">20</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\"> 1 &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n 2 \r\n 3 &lt;!DOCTYPE html&gt;\r\n 4 \r\n 5 &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n 6 &lt;head runat=\"server\"&gt;\r\n 7 &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n 8     &lt;title&gt;&lt;/title&gt;\r\n 9 &lt;/head&gt;\r\n10 &lt;body&gt;\r\n11     &lt;form id=\"form1\" runat=\"server\"&gt;\r\n12     &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n13         &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n14         &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n15         &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n16         &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n17     &lt;/div&gt;\r\n18     &lt;/form&gt;\r\n19 &lt;/body&gt;\r\n20 &lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/27170247-4088cfd2bed94e059e9d806a465d7df3.png\" alt=\"\" /></p>\r\n<p>成功的访问并计算~~~！！！</p>\r\n<p>这里有几个需要提醒的地方：</p>\r\n<p>　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</p>\r\n<p>　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</p>\r\n<p>　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</p>\r\n<p>&nbsp;</p>\r\n<p>2、PostgreSQL与Mono的结合</p>\r\n<p>一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</p>\r\n<p>而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</p>\r\n<p>在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\" target=\"_blank\">《PostgreSQL和MySQL的对比》</a>和<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\" target=\"_blank\">《MySQL VS PostgreSQL》</a>。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</p>\r\n<p>好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\" target=\"_blank\">《CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3》</a>和<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\" target=\"_blank\">《CentOS 6.3 Minimal&nbsp;源码安装 PostgreSQL 9.2.3》</a>，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在<a href=\"http://weibo.com/317166684\" target=\"_blank\">微博</a>上私信或@我）。</p>\r\n<p>首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29213859-9fd41a47d7434984a2c66bf412e0a344.png\" alt=\"\" /></p>\r\n<p>然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\" target=\"_blank\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</p>\r\n<p>在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</p>\r\n<p>使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29200258-ec8c95ef1d3049cea0e15cb25d6fb923.png\" alt=\"\" /></p>\r\n<p>这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</p>\r\n<p>然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p>接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29224120-cc9e84ee622346a8b9ff5937601572b5.png\" alt=\"\" /></p>\r\n<p>&nbsp;这里有几点注意需要提醒各位读者：</p>\r\n<p>　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</p>\r\n<p>　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</p>\r\n<p>　　（3）、网站上传之后各位读者别忘了把Jexus重启。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Mono中使用PetaPoco</p>\r\n<p>微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</p>\r\n<p>尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</p>\r\n<p>面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</p>\r\n<p>Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework&nbsp;-Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</p>\r\n<p>&nbsp;既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">.NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</p>\r\n<p>&nbsp;我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</p>\r\n<p>然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/30155114-37c03ce424b74d4a9b6aa602694b85a1.png\" alt=\"\" /></p>\r\n<p>然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bc3302c6-c0c7-43d6-b449-2e44e6e0d42e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Webb.Config</span></div>\r\n<p>在Model中添加上我们的&rdquo;Person&ldquo;实体类：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cd0a3eae-0982-4fc5-9198-8174b15e3686\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Person.cs</span></div>\r\n<p>跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/30164722-030800f8ce974870a68263c279c116ad.png\" alt=\"\" /></p>\r\n<p>在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</p>\r\n<hr />\r\n<p>就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/23/3092181.html\" target=\"_blank\">下一节</a>，我们尝试在Mono中部署一款优秀的开源框架，也就是在已经在Java中大行其道的Spring，我们部署的是Spring.NET，嗯，我们下回见。</p>\r\n</body>\r\n</html>',1408492228596,1409085240146,0,0,'',1,0,0,'<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\"><a style=\"margin: 0px; padding: 0px; color: #5a5a5a;\" href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\">前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>',1408492228596),(11,'Linux.NET学习手记（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>\r\n<p>嗯，聪明的读者一定猜到了本回合要讨论学习的内容，对了，本回合我们讨论学习的内容就是：服务器软件Jexus。</p>\r\n<p>由于Jexus需要讨论学习的知识比较多，为此我会把Jexus分开两个回合来讲解，分别是这个回合对于Jexus的一些概念性和基础配置的讲解，以及下一回合Jexus网站配置高级功能的演示与讲解。</p>\r\n<p>本回合我们一起讨论学习的内容：</p>\r\n<p>　　（1）、对Jexus的概念性理解：什么是Jexus</p>\r\n<p>　　（2）、对上回合搭建环境时所遗留的问题进行辨析：为什么要选择Jexus</p>\r\n<p>　　（3）、Jexus的基本操作</p>\r\n<p>　　（4）、Jexus的整体配置</p>\r\n<p>　　（5）、介绍并使用Jexus的进程守护工具jws.guard</p>\r\n<hr />\r\n<p>&nbsp;1、什么是Jexus</p>\r\n<p>&ldquo;孔子门徒三千，成名七十二&rdquo;，世界上存在着各种各样不同类型的服务器软件，当然也包括你当时写来玩玩没有发布的那款，而在这众多的软件中，比较著名的有：IIS、Apache、Nginx、LIgHttpd等。而Jexus作为这众多服务器软件的其中一员，现在的排名应该就是这三千名中的第七十三名，也就是还没&ldquo;成名&rdquo;的那一位。</p>\r\n<p>的确，Jexus并没有出身在贵族之中，它没有像IIS一样拥有一个有钱有势有技术的托拉斯父亲帮它修饰与推广，也没有像Apache服务器软件一样成为&ldquo;Apache基金会&rdquo;的顶级项目被世界所认知，同样也没有像LigHttpd一样拥有高贵的普鲁士血种成为大家的新宠。<a href=\"http://baike.baidu.com/view/4562810.htm\" target=\"_blank\">百度百科</a>中对于Jexus的介绍也只有仅仅的那么几行，（至写本文章为止）<a href=\"http://zh.wikipedia.org/w/index.php?search=jexus&amp;title=Special%3A%E6%90%9C%E7%B4%A2\" target=\"_blank\">维基百科</a>中直接就找不到Jexus的存在，很多读者对于Jexus还是比较陌生的，对于Jexus的认知或许也仅仅是&ldquo;这东西可以在Linux中跑.NET&rdquo;，甚至直接就不知道有这么一款软件存在。</p>\r\n<p>孔子的弟子中，虽然只有七十二名的弟子被成为贤人，但是，谁又能说第一百七十二名就不是贤人呢？第七百二十名弟子就不优秀呢？在这剩下的两千多人中，其中也有很多弟子是很优秀的，只不过由于种种的原因而没有被其他人称作&ldquo;贤人而已&rdquo;。最近这两天，我跟群主（Jexus的作者）聊了不少东西，咨询了不少关于Jexus的情况，同时也感谢作者对我的一些ASP.NET的知识进行科普和扫盲，通过对Jexus的讨论，我体会到Jexus确实是一款优秀但却没太高名气的服务器软件，也就是那一位&ldquo;优秀而没有成名的弟子&rdquo;。</p>\r\n<p>用一句话介绍Jexus：Jexus是一款国产的基于.NET环境的有条件开源的免费的Web服务器软件，目前支持的平台有：Linux、FreeBSD和龙芯（旧版的海支持Windows），由作者（宇内流云）一人独力开发并长期维护，官方的论坛为：<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet 大本营</a>。</p>\r\n<p>我们在看看Jexus有那些功能特点（摘抄自Jexus说明书）</p>\r\n<p>　　（1）、高性能的ASP.NET处理能力。这是Jexus的核心功能。不管是稳定性、易用性还是并发承载能力、并行处理速度，Jexus对ASP.NET的支持都是非常优秀的；<br />　　（2）、支持Fast-CGI。通Fast-CGI，Jexus能支持包括PHP在内的所有拥有Fast-CGI服务功能的WEB应用；<br />　　（3）、具备基于正则表达式的强大的URL重写功能；<br />　　（4）、具有强劲的反向代理功能。支持多目标负载均衡，支持本地网站与远程网站无缝整合；<br />　　（5）、拥有强大的流媒体支持能力，支持FLV/F4V视频文件拖动播放，支持微软平滑流媒体技术；<br />　　（6）、支持&ldquo;服务器推送&rdquo;技术，配备了相应的服务器端、客户端开发接口，是开发现代WEB应用的利器；（注意，此功能在5.3版中已经除去，待到HTML5成熟并且大多数浏览器支持之后才重新推出）<br />　　（7）、具备可控的&ldquo;ASP.NET前置缓存&rdquo;，能最大限度地提高ASP.NET网站的承载能力和响应速度；<br />　　（8）、支持Https，具有SSL加密数据安全传输能力；<br />　　（9）、具有基础而实用的入侵检测功能，能自动终止已被识别的非法请求；<br />　　（10）、安装部署非常简便，操作使用极为简单。</p>\r\n<p>Jexus凝聚了作者的智慧和心血，针对当前Linux.NET服务器软件的不足实行有针对性的开发，因此是为.NET量身定做的一款服务器软件，再加上它所拥有的丰富的功能，确实是一款不错的软件。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么选择Jexus</p>\r\n<p>上回合，我们部署mono时，我们选择了Jexus作为服务器软件，同时也遗留了一个值得我们讨论的问题：为什么我们选择Jexus作为服务器软件而不是其他？下面我将会 通过两个主要方面的比较来推演出我们选择Jexus的原因：</p>\r\n<p>（1）、Windows 与 Linux 服务器软件的对比</p>\r\n<p>在上一回合的文章中，我阅读了所有读者给我的留言，其中有不少留言比较有趣的，当中有那么一则留言：&ldquo;.NET在Linux中跑效率和稳定性要比在Windows Server 2003 中要好&rdquo;，这时我就纳闷了.NET在WinServ03中还跑不过Linux？在自家做的环境中还比不上他人做的？此外，我也在Jexus的作者中得出那么一则消息：&ldquo;在相同的物理环境中，IIS 6.0 跑不过 Jexus 4.X&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144933-4d1303694d6c4f67a2b3c5a5c6cea530.jpg\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144946-0b8d0d91313e49cda60dd926d6e56035.jpg\" alt=\"\" />&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>上面的两幅图片是作者提供的关于IIS6.0 与 Jexus 4.3的简单性能测试，明显的看出Jexus 4.3的负载能力要比IIS 6 要强。当然，对于这片面的简单测试是远远不足以判定Jexus就比IIS性能强悍的，这需要通过更多更严格的系统性的测试，而且还要通过长期的实际使用才能对它们之间的性能对比作出判定。</p>\r\n<p>同时，我这里还要重申一点：&ldquo;IIS 绝对是一款性能优异的服务器软件&rdquo;，至于为什么会出现IIS跑不过Jexus的这种情况（这里的讨论仅限于图中的这两个版本的对比，对于新版的IIS与Jexus，这里不作讨论），我想其中的原因更大是由于运作的平台中的不同。</p>\r\n<p>IIS运行在Windows中，而Jexus则运行在Linux中，他们运行在不同的平台中，通过对比平台的差异，或许能够更容易的得出它们的差异。IIS6.0的性能低下（相对于Jexus4.3）很大程度上是由于Windows系统的拖累，为什么这么说？各位读者如果有兴趣的话可以右键点击计算机（我的电脑），然后打开它的服务列表，看看那庞大的列表中共有多少个服务，又有多少个服务是正在运行的（我刚刚自己手数了一下自己的电脑，共有178个服务，运行中的有92个，这里是普通系统，Server版本的当然没有这么多）。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05151116-8bbce625868548808089ab3ed7218bdc.png\" alt=\"\" /></p>\r\n<p>在这众多的服务当中，各位读者能够认得多少个呢？又是否能够清楚的说出每一个服务是干嘛用的呢？我相信各位读者应该没有认得出多少个，在这众多正在运行中的服务，很多都是为Windows系统提供一些体验性的功能，我们即使关闭了也对系统的影响不大，这些服务虽然可有可无，但是在我们安装系统的时候却会自动的给我们装上，并且默认的开机运行，运行就意味着系统需要从CPU消耗计算能力，需要从内存中划分出空间，这都是会浪费我们服务器的资源的。相反的，我们再看看Linux，在安装系统的时候就可以定制软件包，定制服务，我们可以选择最小化安装，也可以只安装我们需要的服务，对于我们不需要的服务，我们可以完全的无视之。还记得一位做服务器管理的老师曾经说过：&ldquo;对于运行的服务器，我们希望越轻越好，提供的服务越单一越好，开启的服务越少越不容易出错&rdquo;。我们回过头来看Windows，不免会觉得：&ldquo;Windows，你太重了&rdquo;。</p>\r\n<p>此外还有一点更重要，对Windows性能影响更大的，那就是Windows的图形界面。图形的处理会消耗大量的系统资源，而Windows在维持它的系统界面过程中就需要浪费服务器中大量的宝贵资源。我一直有这么一个观点：&ldquo;Linux是不应该存在图形界面的&rdquo;，同样，Server版的操作系统也不应该存在图形界面，正规的服务器是要被关在机房的，图形界面做得再好，画面再好看也不会有人去欣赏，尽管WinServ03的界面一点都不美观，但是丑归丑，维持这个界面还是要消耗大量的系统资源，安装CentOS6.4时内存如果没有1G，那图形的安装界面还起不了来，可见图形界面需要消耗多少的资源。同时，如果你是通过远程登陆到机房的服务器进行管理，网络问题同样会成为图形界面推送的一个瓶颈问题。</p>\r\n<p>就这样，过多的服务，加上万恶的图形界面，服务器在真正投入生产之前已经浪费了一笔珍贵的系统资源，相同物理配置的服务器，看似配置相同的环境，实际能够提供给服务器软件支配的系统资源却不同，IIS 6.0跑不过 Jexus 4.3也不足为奇了。</p>\r\n<p>&nbsp;（2）、同是Linux中.NET服务器软件的比较</p>\r\n<p>同时Linux中，运行环境才是真正的相同，这个比Windows/Linux更有可比性。Linux中搭建.NEt环境除了mono+Jexus之外还有一种方式，那就是mono+XSP。XSP是一款.NET的解析容器，它能够对.NET程序进行解析并维持高效的运行，但是它却有一个缺点，就是对于静态资源的处理能力相当有限，而一个网站中，大部分都是图片、CSS、JS等静态文件，真正动态生成的东西并不多，在这种情况下XSP就会暴露出它的软肋，面对这种情况，XSP一般都会整合一个高效的服务器软件进行弥补它的不足。类似于Tomcat+Apache的这种情况。这就衍生出了：网上提供的搭建Linux.NET的另外一种方式Linux+Apache（Nginx）+mono这种方式，它们在Apache（Nginx）和mono之间都会有一个插件，原理实际上就跟XSP一样。</p>\r\n<p>这里推荐一篇文章：《<a href=\"http://blog.csdn.net/jexus/article/details/5650714\" target=\"_blank\">为什么说Jexus更适合打造基于Linux/Unix系统的企业级 ASP.NET平台</a>》，该文章是Jexus的作者写的，里面有比较详细的对比了Linux采用Jexus的好处。阅读完这篇文章之后，相信读者也会明白为什么上回合搭建环境的时候直接选择了Jexus。</p>\r\n<p>最求更稳定，性能更优秀，效率更高，这就是我们选择Jexus的原因。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的操作</p>\r\n<p>经过两个章节关于Jexus的介绍，相信读者对于Jexus已经有了一个概念上的认识，从这个章节开始，接下来我们会对Jexus的使用进行实操，并通过操作Jexus时产生的现象进行讨论，从而进一步的了解并学会使用Jexus。</p>\r\n<p>Linux软件包有一个做得非常好的地方，那就是对于这款软件的使用手册、帮助文档往往都会存在软件本身之中，像&ldquo;有问题问男人&rdquo;（man命令）、&ldquo;--help&rdquo;等命令都能够提供快速的使用方法查阅，同样，关于Jexus的使用方法我们也可以通过Jexus软件包中的&ldquo;readme&rdquo;查阅得到。</p>\r\n<p>我们先看一下Jexus目录中有些什么东西：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05170609-411d6ae7b7824605ac00cd09311a9fa7.png\" alt=\"\" /></p>\r\n<p>里面也没有什么东西，包括四个文件夹（蓝色那种），六个脚本文件（绿色那种）和一些的其他文件（白色那种）。在这个章节里，我们介绍的是Jexus的操作，实际上就是对于Jexus脚本的操作和介绍。</p>\r\n<p>Jexus提供了六个操作脚本（针对5.3之前的版本,5.3版本已把所有jws脚步融合到jws中，使用方法为./jws 参数），他们的名称和功能分别是：</p>\r\n<p>　　jws.start: 启动Jexus；(如果需要开机自启动的，可以把脚本的全路径[包括脚步本身]添加到/etc/rc.local中；5.3中已改为：jws start)<br />　　jws.restart: 重启Jexus，如果命令后边加网站名作为参数，那么就表示启动或重启指定的网站；（5.3中已改为：jws restart）<br />　　jws.stop: 停止Jexus，如果命令后边加网站名作为参数，那么就表示停止指定的网站；（5.3中已改为：jws stop）<br />　　jws.regsvr: 注册jexus所需要的全局程序集（本命令只在安装或更新jexus后才用，而且必须用；5.3中已改为：jws regsvr）。<br />　　state.start: 启动Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）<br />　　state.stop: 停止Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</p>\r\n<p>　　此外，5.3中还增加以下功能：</p>\r\n<p>　　　　jws status：检查Jexus的运行状态</p>\r\n<p>　　　　jws -V：查看Jexus的版本　　　　　　　　　　　　　　　　</p>\r\n<p>操作方法跟运行普通脚本一样./XXX，没有多少技术含量。这里值得注意的是，这些脚步文件的拥有者应该保证是root用户，并且有运行的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>4、Jexus的配置</p>\r\n<p>Jexus的配置分为两个方面，一个是Jexus整体的配置（jws.conf），另外则是网站独立的配置（默认所有的网站配置文件都在siteconf文件夹中）。网站的独立配置可以调用很多Jexus的高级功能，我们把它当到下一回合再进行学习讨论，本章中我们主要进行Jexus的整站配置。我们用vi打开jws.conf看看里面有些什么设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05180814-e7e3731f09394f169969cdb65111ab25.png\" alt=\"\" /></p>\r\n<p>在这里，我解析一下每个选项的作用和注意事项：</p>\r\n<p>（1）、SiteLogDir：这个设置项必须得存在并且开启，该设置项设置Jexus的运行日志记录、各网站运行的日志记录都会存放到该文件夹中。此外，当记录的日志文件大小达到一定程度的时候，Jexus会自动的把日志写到一个新的日志文件中，不会一直通过追加写的方式把所有的日志记录都写到同一文件中。</p>\r\n<p>（2）、SiteConfigDir：这也是一个必须存在并且开启的设置项，这个设置项设置Jexus中各网站配置的存放地点，Jexus中默认的网站配置之所以存放在siteconf就是因为这里默认的值就为siteconf。此外值得注意的是，存放在该配置文件夹中的文件只能是网站的配置文件，其他任何的文件都不能存到到该目录（包括网站配置文件本身的备份文件），因为Linux系统所有的事物都是以文件的方式作为存储，因此无论你采用什么样的后缀，在Linux系统中都只当作普通文件来对待。</p>\r\n<p>（3）、Runtime：该设置项用于配置Runtime的版本，除非有特殊需求需要改动Runtime的版本，一般情况下无需修改。</p>\r\n<p>再来看一下一些高级点的设置项，这些设置项都是默认关闭的，</p>\r\n<p>（4）、LLVM：是否开启LLVM编译器功能。开启LLVM可以把中间语言的编译交给LLVM编译器，这可以加快编译的速度，编译出来的代码性能或许会更优秀一些。不过值得注意的地方：并不是所有的Linux都带有LLVM编译器，并且mono自带的编译器编译效率和编译生成的代码性能上也不差什么，因此如果没有特殊的需要，这一项可以让他保持默认关闭。</p>\r\n<p>（5）、httpd.processes：Jexus中默认的工作进程为1个，单个进程最大的并发数固定为1万个，通过开启多个工作进程可以提高Jexus处理并发的能力，开启多个进程的方式非常简单，只要修改httpd.processes的值并重启Jexus即可。不过这里有几点需要注意的地方：[1]Jexus最大支持的工作进程为4个，因此这里最大只能填写4；[2]如果开启了多个Jexus的工作进程，请注意网站的Session的保存方式，请通过修改网站config文件来修改Session的保存方式，避免采用进程的方式保存Session，否则将会造成Session的不同步，给网站的运作造成不必要的麻烦，Session的保存可以借助第三方的方式来保存（比如数据库，或者Jexus提供的强大的ASP.NET服务状态保存）；[3]Jexus工作进程的设置跟服务器的CPU内核数和内存数有关，如果你的Cpu只有一个核，而你配置开启了两个进程，也只能达到一个容错的效果，能够承载的并发数是不会上去的。详细可以参考文章<a href=\"http://www.linuxdot.net/bbsfile-3125\" target=\"_blank\">《让Jexus支持高并发请求的优化技巧》</a>。</p>\r\n<p>（6）、httpd.user：不知道各位读者用过Apache没有，在Apache中的httpd.conf有这么一项设置user=XXX：可以把Apache以某个用户的方式启动，相应的该用户的所拥有的操作权限都会赋给Apache进程。同样，httpd.user的作用也是跟Apache中的user是一样的，只要把一个已有的用户的用户名填写到httpd.user中，Jexus就会拥有该用户的操作权限。有什么用？嗯，举个例子吧，如果网站的运行会产生一些新文件的（比如做页面静态化），各位读者会采用什么办法解决呢？chmod 777？这可以解决，但是把目录的权限设置为777会存在安全性的问题，如果可以有一种解决方案：进程和某些用户可以对该目录进行读写操作，而其他用户不能，那就可以解决安全性问题了。嗯，对的，这个时候httpd.user就派上了用场，我们只要创建一个仅能供某个用户读写的目录，并把此用户的用户名填写到httpd.user中，就可以实现我们想要的功能了。</p>\r\n<p>（7）、php-fcgi.set：此功能是用于让Jexus支持PHP，由于这里与.NET关系不大，这里就不做过多的介绍了，需要了解的读者可以参照这篇文章<a href=\"http://www.linuxdot.net/bbsfile-3132\" target=\"_blank\">：《让Jexus V5.1支持PHP的操作步骤》</a>。</p>\r\n<p>（8）、CertificateFile 与 CertificateKeyFile：这个是让Jexus支持SSL的配置项，是用方法可以参照文章：<a href=\"http://zhumeng8337797.blog.163.com/blog/static/10076891420104654343279/\" target=\"_blank\">《Linux+Apache安装生成配置SSL证书》</a>和<a href=\"http://www.linuxdot.net/bbsfile-2970\" target=\"_blank\">《如何让jexus 支持ssl》</a></p>\r\n<p>在这八大Jexus的网站配置中，有一个终极的注意事项：每次配置后记得重启Jexus，否则刚才的配置是不会生效的！！！</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus进程守护工具jws.guard</p>\r\n<p>一个运行中的进程，难免会因为各种各样的原因无缘无故的宕掉（比如网站瞬间的负载过高、内存不足等），而Jexus宕掉的后果往往只有一个：对外提供服务的网站无法访问了。因此，我们需要最大限度的保障我们的网站能够提供7*24小时的不间断访问，而一个网站或者一个进程宕掉的过程是瞬间的，也许前一秒还访问得好好的，下一秒就突然间报个404的错误，而从网站或进程挂掉到我们人工的发现并重启服务的过程是漫长的，除非该网站有应对单点故障的解决方案，否则在这漫长的时间之中，网站都处于一个无法访问的黑色时期。如果这个宕掉的网站是一个企业网站，这会造成企业信誉度的下降；如果是一个商城网站，这会造成经济和人气的损失；因此，我们需要让系统能够自动的检测出网站的运行状态，当出现进程服务死机的时候能够自动重启。</p>\r\n<p>jws.guard的是一个python的脚本，工作原理也比较简单：根据设置好的预设值，每隔十秒钟访问一次访问一次指定的端口与文件，当三十秒内出现无法网站时就执行jws.restart进行重启网站。这里的三十秒指的是累计连续三次无法访问，防止因为检测时因为Jexus正忙而误判断重启，对网站进行误伤。</p>\r\n<p>jws.guard的使用方法也比较简单，只要把 &ldquo;tools/jws_guard&rdquo; 目录中的 &ldquo;guard.py&rdquo; 和 &ldquo;jws.guard&rdquo; 两个脚本文件拷贝到Jexus的工作目录（跟jws.start同一目录），然后配置一下jws.guard 中的预设值即可。</p>\r\n<p>我们首先把这两个文件拷贝出去</p>\r\n<p>cd /usr/local/jexus/tools/jws_guard/</p>\r\n<p>cp jws.guard guard.py /usr/local/jexus/</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>我们已经把这两个脚本拷贝到工作目录中。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/05202404-de9e4e1008c54293b161bc89aa34124f.png\" alt=\"\" /></p>\r\n<p>用vi打开并编辑jws.guard</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05202526-5f0fd75058e847b59ec0936962dd30ec.png\" alt=\"\" /></p>\r\n<p>把host、port、path改为我们需要的配置即可，它们分别代表主机地址，端口，检查的路径。一般情况下，如果Jexus采用80端口，这里可以不作修改直接使用，而如果Jexus采用的不是80端口，也只需要修改port，改为正确的端口并保存退出就可以了。host和path一般是不需要修改的，同时也不建议非必要的修改，因为修改jws.guard必须确保修改后修改的配置项是正确的，否则jws.guard就会因为无法访问配置后的网站而反复的重启Jexus，造成不必要的麻烦。</p>\r\n<p>修改好了之后只需要执行./jws.guard即可启动这款Jexus的进程守护工具。</p>\r\n<p>&nbsp;我们尝试性的把Jexus关掉。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203621-740e2ccb31b44910b38dd9d486334b40.png\" alt=\"\" /></p>\r\n<p>&hellip;&hellip;30秒之后&hellip;&hellip;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203850-cbb80f4d87e34a39a0fba02e47aade0a.png\" alt=\"\" /></p>\r\n<p>Jexus又起来了。</p>\r\n<p>通过jws.guard守护守护工具，我们可以很方便的让系统自动的发现Jexus进程宕机并快速的重启进程。同时我们只需要查阅Jexus的运行日志即可发现问题所在。</p>\r\n<p>这里有三点需要提醒的：</p>\r\n<p>　　（1）、如果需要关闭Jexus服务30秒以上的，请在关闭Jexus之前先执行./jws.guard stopg关闭jws.guard守护工具，以免守护工具自动的把Jexus又启动了起来。</p>\r\n<p>　　（2）、jws.guard是使用python语言编写的脚本，需要运行该工具时请确保系统中已经安装了python，检查方式可以执行 python -V ，如果没有出现python的版本信息则说明系统中没有安装python，这是，各位读者可以通过yum或者其他方式安装上python之后再运行jws.guard。</p>\r\n<p>　　（3）、再啰嗦一次，配置jws.guard时请确保配置的值是正确的。</p>\r\n<p>新版的Jexus的稳定性已经非常强，加上jws.guard可以起到加固作用。</p>\r\n<p>好的，至此Jexus的守护工具jws.guard就已经介绍完毕了。</p>\r\n<p>这里补充一点，高版本的Jexus已经把此工具从版本包中剔除，相信是因为高版本的Jexus中抗压能力有了更大的提高，因此作者也放心的将jws.guard移除。如果各位读者想保留功能的，可以下载一个之前版本的Jexus（可以在第一篇的学习手记中找到下载地址），然后在里面把此脚本提取出来使用。【补充于：2014/03/29】</p>\r\n<hr />\r\n<p>至此为止，本回合对于Jexus的基础讨论已经全部讲解完毕了。希望各位读者在阅读完本回合的文章之后能够对Jexus有一个基础性的了解，同时，如果各位读者有发现本回合中任何知识点的错漏、对本文章有任何的意见或者建议、对Linux.NEt的发展有任何的见解，都欢迎留言指教。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">下一回合</a>，我们将会对Jexus的高级功能：访问IP过滤、服务器的高速缓存、URL重写等功能进行深入的讲解并逐一的演示，同时，也希望没有搭建好Linux.NET的读者能够把环境搭建好，因为下回合所有的演示都是基于这个环境来进行实操。好吧，我们下回再见吧。</p>\r\n</body>\r\n</html>',1408492242317,1409073137330,0,0,'',1,0,0,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>',1408492242317),(12,'Linux.NET学习手记（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>\r\n<p>本回合，我们主要讨论学习：</p>\r\n<p>1、什么是mono</p>\r\n<p>2、为什么要用mono</p>\r\n<p>3、如何在Linux中部署一个.NET的运行环境</p>\r\n<p>4、部署时我们需要注意什么，以及对一些关键步骤的解析</p>\r\n<hr />\r\n<p>1、什么是mono</p>\r\n<p>关于什么是mono，我想无论我怎么说，应该都不会比官方的解释，或者是<a href=\"http://baike.baidu.com/view/26639.htm\" target=\"_blank\">百科</a>更加详细；我这里就简单说吧，Java之所以能够跨平台运作，是依赖与Java的虚拟机JVM，而.NET之所以只能够在Windows中跑，同样是因为.NET运行需要依赖与Framework的Runtime（公共运行时），那如果能够在Linux同提供适合于.NET运作的环境（包括CLR等），那.NET也可以在Linux中跑起来了，这就是mono了。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么要使用mono</p>\r\n<p>为什么使用mono，原因有很多，不过归结起来，我个人认为以下这是最重要的：</p>\r\n<p>（1）、作为服务器来说，如果能够实现一模一样的功能的，还是主推Linux。为什么呢？我列举了几个实例：</p>\r\n<p>　　首先，如果服务器需要打补丁，作为Windows服务器，你打完补丁之后必须重启，这一定程度上会对你的业务造成一定程度上的影响</p>\r\n<p>　　其次，我们经常会听到Windows会中毒，特别是作为Web服务器和邮件服务器，我们不知道用户会给我们上传一些什么东西上来，相反，我们却很少会听到Linux中毒这么一个说法；这是由于Linux存在着太多的发行版本，不同版本之间编译后的软件无法相互调用，因此，如果能够感染A版本的Linux病毒无法感染B版本的Linux，这在很大程度上削减了病毒的危害性。</p>\r\n<p>　　再者，作为服务器，我们会尽量希望自己的系统更加的轻量化，更加的高效，和更加的稳定；Linux对于我们的要求，都提供了，我们可以定制的安装软件和服务，对于一些不必要的服务我们可以直接不安装（注意，是直接不安装，而不是安装之后再关闭），相反，如果采用Windows的话，一上来就啪嗒啪嗒的安装一大堆软件和服务，无论你用不用得上，先给你安装；也许这个可以让您的服务器充当更多的角色，但是我们更加希望服务器能够做到单一高效而不是面面俱到。</p>\r\n<p>　　最后，Linux运行对于硬件的要求比较低，这也是由于Linux抛弃桌面环境（作为服务器，我们不应该安装XWindow）和没有太多不必要的服务所决定的，而Windows则显得矜贵多了，硬件配置低一点还不一定能够正常运作。</p>\r\n<p>（2）、从成本考虑：</p>\r\n<p>　　一般部署在Windows中的.NET程序都是采用 &ldquo;Windows Server版本 + IIS + &nbsp;MS SQLServer&rdquo; 这确实是.NET的黄金组合，但是，值得遗憾的是，它们都是要收费的，系统要收费，数据库要收费；作为大企业来说，上千上万台服务器，如果都采用这种模式的话，那将是一笔巨额的开销；对于小公司，资金对于它们来说本就是一个难题，能省下来的基本上都希望省下来，如果放着一个能够达到相同功能而且免费的模式不用而采取这种付费模式，那太说不过去了。</p>\r\n<p>　　　而如果我们采用mono，把.NEt部署在Linux中，我们可以采用以下的组合：&ldquo;Linux + mono + jexus（Apache/nginx +&nbsp;XSP2）+ MySql(PostgerSQL或其他免费数据库)&rdquo;，所有的这些无论是否开源（jexus不开源）都是免费的。</p>\r\n<p>　　作为老板，你会选择哪种呢？&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>3、mono环境的部署</p>\r\n<p>介绍再多也不过是纸上谈兵，实战才是硬道理。工欲善其事必先利其器，要实操，还必须先要有这个环境，下面进入本回合的重点环节，Mono环境的配置。</p>\r\n<p>网上也有大量关于mono环境搭建的帖子，基本上都是搭配以下这两种类型的mono环境：以免费不开源jexus作为服务器软件的mono环境 和 以Apache（或nginx）作为服务器软件的mono环境，具体选择哪款环境读者可以自由选择。选择前者的，可以参考张善友先生的<a href=\"http://www.cnblogs.com/shanyou/archive/2012/01/07/2315982.html\" target=\"_blank\">《32和64位的CentOS 6.0下 安装 Mono 2.10.8 和Jexus 5.0》</a>；而选择后者的读者则可以参考<a href=\"http://www.cnblogs.com/aquilahkj/archive/2011/11/03/2234380.html\" target=\"_blank\">《CentOS 6.0 安装 MONO 2.10.8》</a>。</p>\r\n<p>这里我们就选择前者[选择的原因我打算放到下一回合再来说明]。</p>\r\n<p>版本选择，均选择当前所能下载的最新版本（需要下载的可以链接下载）：</p>\r\n<p>操作系统：<a href=\"http://mirrors.grandcloud.cn/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-bin-DVD1.iso\" target=\"_blank\">CentOS-6.4-x86_64</a></p>\r\n<p>libgdiplus：<a href=\"http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2\" target=\"_blank\">libgdiplus-2.10.9</a></p>\r\n<p>mono：<a href=\"http://download.mono-project.com/sources/mono/mono-3.0.7.tar.bz2\" target=\"_blank\">mono-3.0.7</a></p>\r\n<p>jexus：<a href=\"http://www.linuxdot.net/down/jexus-5.2.3.tar.gz\" target=\"_blank\">jexus-5.2.3</a>（这里最新版其实是jexus-5.3.0 beta3，不过基于稳定性，我选择了最新的稳定发行版）</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01155420-f8be87af3239421987d08120d54e4a7e.png\" alt=\"\" /></p>\r\n<p>首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</p>\r\n<p>装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01163416-47fa6ccd205b41c783232babc686d0c0.png\" alt=\"\" /></p>\r\n<p>（1）、更新系统 yum update &nbsp; （这里我就不更新了，因为都是最新版的东西了）</p>\r\n<p>（2）、通过yum安装编译mono所需要的库</p>\r\n<p>&nbsp;yum -y install gcc gcc-c++ bison pkgconfig glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel&nbsp; cairo-devel<br />（3）、编译安装Libgdiplus</p>\r\n<p>tar jxf libgdiplus-2.10.9.tar.bz2</p>\r\n<p>cd libgdiplus-2.10.9</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make &amp;&amp; make install</p>\r\n<p>echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</p>\r\n<p>ldconfig</p>\r\n<p>（4）、安装mono</p>\r\n<p>由于mono比较大，因此解压和编译安装都需要比较长的时间</p>\r\n<p>tar jxf mono-3.0.7.tar.bz2</p>\r\n<p>cd mono-3.0.7</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make</p>\r\n<p>make install</p>\r\n<p>ldconfig</p>\r\n<p>echo &nbsp;PATH=/usr/local/mono/bin:$PATH&gt;&gt;~/.bash_profile</p>\r\n<p>source ~/.bash_profile</p>\r\n<p>执行 &nbsp;&ldquo; mono -V &rdquo;如果可以看到mono的版本信息，则表明编译安装成功</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01181638-1dfdf90f13734224a37b1674576165eb.png\" alt=\"\" /></p>\r\n<p>（5）、安装jexus</p>\r\n<p>安装jexus比较简单，jexus安装分为全新安装和升级安装两种，由于我们这里是全新安装，所以只讲全新安装部分，升级安装可以阅读jexus中自带的readme文档，里面有详细介绍。</p>\r\n<p>tar xzf jexus-5.2.3.tar.gz</p>\r\n<p>mv jexus-5.2.3 /usr/local/jexus</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>./jws.regsvr</p>\r\n<p>ln -s /usr/local/mono/ /opt/mono</p>\r\n<p>至此，jexus就安装完毕了</p>\r\n<p>&nbsp;</p>\r\n<p>输入操作 &ldquo;./jws.start&rdquo;启动服务器，输入网址XXXX/info，得到以下画面，表明全部安装成功。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01182900-cfe15941dd9c48a1a32b675bddf1b5e6.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>4、部署需要注意的事项与解释</p>\r\n<p>上回合我们只是单纯的部署讲怎么部署mono，并没有对部署mono中每一步的作用做出解释，很多读者或许部署完了还不明白到底怎么回事，因此这回合我们就上回合的操作作出解释，并了解重点需要注意哪些事项。</p>\r\n<p>（1）、部署&nbsp;libgdiplus 时，执行最后一步是什么意思？</p>\r\n<p>　　上回合中，我们部署 libgdiplus 时执行了一步 &ldquo;echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf&rdquo;，这一步的作用其实到了部署mono时，执行&nbsp;ldconfig 才正式的发挥作用。由于我们部署libgdiplus 和mono没有部署到系统默认的/usr 中，因此系统是不会默认的到我们部署mono的文件夹中搜寻和读取里面的动态库文件，这时，我们需要在/etc/ld.so.conf.d/文件夹中，手动的添加mono动态库文件夹的地址，再执行 ldconfig 来让系统能够找到我们的动态库文件。</p>\r\n<p>（2）、部署mono后，执行 ldconfig 很重要</p>\r\n<p>编译部署mono之后，我们会得到大量需要加载的动态库文件，而这些动态库文件，我们再下一步的时候就需要用到，因此需要让系统重新加载。（如果没有重新加载，有可能在部署jexus的时候会出现各种各样的问题）</p>\r\n<p>（3）、部署mono之后，需要把bin目录的路径加入到环境变量PATH中</p>\r\n<p>原理跟安装完jdk之后，需要在环境变量注册是一样的。</p>\r\n<p>（4）、部署jexus需要执行注册</p>\r\n<p>部署jexus的过程相当简单，只需要解压，然后把文件夹拷贝到我们想要它存放的目录就可以了，不过在此之后，我们需要注册全局程序集（./jws.regsvr），这个很重要</p>\r\n<p>（5）、为什么注册完jexus之后需要添加一个软链接</p>\r\n<p>事实上，本来这个软链接是不会写上来的，因为之前部署mono时，注册完jexus了，服务就可以正常的跑起来了。但是这次不同，注册完之后，&ldquo;./jws.start&rdquo;之后，服务并没有起来，执行\"./jws.stop\"系统报了个notfoundXXX（找不到XXX）。于是用vi随便打开了其中的一个脚本，注意到了如下的代码：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01195628-72782097379e44069f62b30c68aebc56.png\" alt=\"\" /></p>\r\n<p>很明显，jws脚本哪里写有了寻找mono的搜寻路径，而恰好，我们部署的mono都不在这几个路径中，因此，jexus找不到想要的bin目录下的文件，所以就服务起不来或者报了个notfound。这时，我们只要在/opt/mono/ 中（当然Path中的任意一个都行，或者你也可以自己手动的一个一个脚本文件添加上mono的目录路径）添加一个软链接，把它链接到我们部署mono的目录下，jexus就能够顺利的找到想要的文件。</p>\r\n<hr />\r\n<p>好了，要讲的暂时就这么多，我们的Linux.NET环境就基本搭建起来了。各位读者此刻时候有一种跃跃欲试的感觉，如果有，欢迎您马上行动，纸上得来终觉浅绝知此事必躬行。</p>\r\n<p>此外：由于本人对Linux.NET接触时间并不太久，手上也没有比较有效的资料，因此很多时候都是采取摸着石头过河的方式来学习研究，如果在讨论学习的过程中有任何错漏的，欢迎各位读者能够指正出来，同时，如果各位读者有任何的意见或者建议，也欢迎大家提出。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">下一回合</a>，我们将讨论学习：jexus作为Linux下基于mono的.NET服务器，其优势在哪？jexus的配置与特色功能，还有其中的一些注意事项与小技巧。</p>\r\n</body>\r\n</html>',1408908907822,1409073089392,0,0,'',1,1,0,'<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>',1408908907822),(13,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>\r\n<p>好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</p>\r\n<p>　　1、NOFILE功能　　</p>\r\n<p>　　2、Jexus的URLRewrite</p>\r\n<p>　　3、Jexus如果做IP过滤</p>\r\n<p>　　4、对目录访问禁止</p>\r\n<p>　　5、Jexus如何使用反向代理功能</p>\r\n<p>　　6、如何使用SendFile技术</p>\r\n<p>　　7、Jexus的高速缓存</p>\r\n<p>　　8、Jexus如何对静态资源进行压缩传输</p>\r\n<hr />\r\n<p>0、新建一个网站配置</p>\r\n<p>这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</p>\r\n<p>上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</p>\r\n<p><span class=\"Apple-converted-space\">Jexus中默认</span>SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/07195426-860ad529f327422e8105e5e0d31bf181.png\" alt=\"\" /></p>\r\n<p>该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</p>\r\n<p>先来讲解一下这三项是干嘛用的：</p>\r\n<p>port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</p>\r\n<p>　　这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</p>\r\n<p>&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</p>\r\n<p>　　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</p>\r\n<p>hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</p>\r\n<p>下面，我就开始演示操作：</p>\r\n<p>我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184417-05f1ea4477f74ca69b123ffe42054c26.png\" alt=\"\" /></p>\r\n<p>接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08183855-7d36d60425694318a037fc9535634ee0.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184651-7ec0488710684303bb716316110f359b.png\" alt=\"\" /></p>\r\n<p>证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</p>\r\n<p>&nbsp;</p>\r\n<p>1、Jexus的NOFile功能。</p>\r\n<p>当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</p>\r\n<p>我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_983f4aca-2809-4ee2-81c6-b710f9065e1b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">404.html</span></div>\r\n<p>然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215337-b2d264da1eb248809791f8c8ec8c5595.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215544-b061f60964514812b3a2056a474e0254.png\" alt=\"\" /></p>\r\n<p>使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</p>\r\n<p>这里值得提醒的就是此功能的使用情况，</p>\r\n<p>　　（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</p>\r\n<p>　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的URL地址都被Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）</p>\r\n<p>&nbsp;</p>\r\n<p>2、Jexus的URL重写</p>\r\n<p>URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在<a href=\"http://baike.baidu.com/view/1002788.htm\" target=\"_blank\">百度百科</a>中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</p>\r\n<p>URLRewrite有以下的好处：</p>\r\n<p>　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</p>\r\n<p>　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</p>\r\n<p>　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</p>\r\n<p>在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</p>\r\n<p>下面进行URL重写的实验：</p>\r\n<p>要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</p>\r\n<p>首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码。　　</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_55623fe4-7375-4626-9a48-be22cef27aff\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">php.html</span></div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a313ec63-04fc-4b62-9452-1ffb07a48695\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">aspx.html</span></div>\r\n<p>然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08225515-2ef717370f31432c89c93aaf1dbdf6b7.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222339-bfb266021b1845f28ddcecbb065bafa3.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222431-2b52120bc6154fb09eb07d5a2f611cf9.png\" alt=\"\" /></p>\r\n<p>成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</p>\r\n<p>　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</p>\r\n<p>　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</p>\r\n<p>　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08230921-03e2181f714b4c46b227f8a921d9977c.png\" alt=\"\" /></p>\r\n<p>　　（4）、配置之后必须重启Jexus，否则是不会生效的。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的IP封杀</p>\r\n<p>有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</p>\r\n<p>我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231213-2143c4d089784d08936639259e4c7d38.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，再来访问网站：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231355-23426f11421a401e9d608ea825f3d856.png\" alt=\"\" /></p>\r\n<p>我们的IP就被封杀掉了。</p>\r\n<p>&nbsp;</p>\r\n<p>4、禁止访问某目录中的内容</p>\r\n<p>此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</p>\r\n<p>在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f0173184-43f9-4d01-b995-b7714b2a88ae\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">denydir.html</span></div>\r\n<p>我们在修改配置文件之前先尝试访问： <img src=\"http://images.cnitblog.com/blog/499899/201304/10085920-d55b67301c4a4b61a8f4fbb07b856e93.png\" alt=\"\" /></p>\r\n<p>之后我们修改我们的网站配置文件：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090135-56087f20b3b94b0387082426339e60ec.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus后再刷新页面：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090240-75353923867546af80ccad0f9d42fc01.png\" alt=\"\" /></p>\r\n<p>我们达到了我们想要的效果。</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus反向代理</p>\r\n<p>Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在<a href=\"http://baike.baidu.com/view/1165595.htm\" target=\"_blank\">百度百科</a>、<a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" target=\"_blank\">维基百科</a>或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</p>\r\n<p>在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</p>\r\n<p>使用代理具有以下优势：</p>\r\n<p>　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</p>\r\n<p>　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</p>\r\n<p>　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</p>\r\n<p>说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/10093405-4b5f999e4f104808910fa4ecf63b5cd7.png\" alt=\"\" /></p>\r\n<p>我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</p>\r\n<p>使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</p>\r\n<p>此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</p>\r\n<p>&nbsp;在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10221804-6eaf0d60f40f447c98c88e37926fa8e7.png\" alt=\"\" /></p>\r\n<p>分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223311-bd41bbb7d09a4aa5a910c7dfcb39e44f.png\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223423-705f9aca8b0e4293b9258ed81e08163b.png\" alt=\"\" /></p>\r\n<p>再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224159-d02ed535eec049ec991d3665347b5caa.png\" alt=\"\" /></p>\r\n<p>保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224323-362ef60552ac4a36a096e1c580540046.png\" alt=\"\" /></p>\r\n<p>Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</p>\r\n<p>&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</p>\r\n<p>　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</p>\r\n<p>　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10230231-b9d300e89ba947269d726f31d6052020.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;6、SendFile技术</p>\r\n<p>我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12175257-b719679488e440eb990de3f6ac363ee8.png\" alt=\"\" /></p>\r\n<p>我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12183043-8ef79074843f41af9de99f024031d418.png\" alt=\"\" /></p>\r\n<p>SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</p>\r\n<p>现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</p>\r\n<p>下面我们完成此实验：</p>\r\n<p>在网站根目录中通过Linux创建一个100M大小的文件</p>\r\n<p>cd /var/www/xiaodiejinghong/</p>\r\n<p>&nbsp;dd if=/dev/zero of=./file.zip bs=1M count=100</p>\r\n<p>然后在Windows中创建一个网站，并写好我们的应用程序代码</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12200958-4f273e2a838d4457aff2b2dc52696e8b.png\" alt=\"\" /></p>\r\n<p>界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</p>\r\n<div class=\"cnblogs_code\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n<pre>    protected void Button1_Click(object sender, EventArgs e)\r\n    {\r\n        Response.ContentType = \"application/octet-stream\";\r\n        Response.AddHeader(\"Content-Disposition\", \"attachment;filename=file.zip\");\r\n        Response.AddHeader(\"X-SendFile\", \"/var/www/xiaodiejinghong/file.zip\");\r\n        Response.End();\r\n    }</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n</div>\r\n<p>点击Button后，文件就可以下载了</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12201256-9d490313999644f390ffa885327bb5a1.png\" alt=\"\" /></p>\r\n<p>这里有两个注意事项需要注意的：</p>\r\n<p>　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</p>\r\n<p>　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>7、前置缓存</p>\r\n<p>对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</p>\r\n<p>&nbsp;</p>\r\n<p>8、Gzip传输压缩</p>\r\n<p>各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</p>\r\n<p>Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13095650-64e073310a0f41e9a8d16fd5493563b5.png\" alt=\"\" /></p>\r\n<p>开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</p>\r\n<p>开启前：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102039-e850745d21cb45e5925ce1c95805d3be.png\" alt=\"\" /></p>\r\n<p>开启后：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102114-f34f5ebf338d4b78ad58f6129d7c7b49.png\" alt=\"\" /></p>\r\n<p>虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13110436-588337d85859442087fedcd8e53336c6.png\" alt=\"\" /></p>\r\n<p>比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</p>\r\n<p>&nbsp;</p>\r\n<hr />\r\n<p>好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/03/3047317.html\" target=\"_blank\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</p>\r\n</body>\r\n</html>',1408492126065,1409072773318,0,0,'3,2',1,1,1,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>',1408492126065),(14,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>safsadfasdf</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p>前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>\r\n<p>在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</p>\r\n<p>正式进入到本回合的正题，案例代码可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\" target=\"_blank\">点击这里</a>下载：</p>\r\n<p>在本回合中，我们将讨论学习：</p>\r\n<p>　　（1）、在Mono中部署一个简单的在线加法器</p>\r\n<p>　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</p>\r\n<p>　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</p>\r\n<hr />\r\n<p>1、牛刀小试</p>\r\n<p>在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</p>\r\n<p>针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/27165836-9b061074ab464d369c341a62e2cffb6b.png\" alt=\"\" /></p>\r\n<p>然后在Windows中的Visual Studio写一个简单的网站。</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre> <span style=\"color: #800080;\">1</span> <span style=\"color: #000000;\">&lt;%</span><span style=\"color: #000000;\">@ Page Language</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> AutoEventWireup</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> CodeFile</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default.aspx.cs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Inherits</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_Default</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">%&gt;</span>\r\n <span style=\"color: #800080;\">2</span> \r\n <span style=\"color: #800080;\">3</span> <span style=\"color: #000000;\">&lt;!</span><span style=\"color: #000000;\">DOCTYPE html</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">4</span> \r\n <span style=\"color: #800080;\">5</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html xmlns</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">6</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">7</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">/&gt;</span>\r\n <span style=\"color: #800080;\">8</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">9</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">10</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">11</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">form id</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">form1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">12</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">div style</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">background-color:pink;height:40px;width:600px;padding:10px;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">13</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>  <span style=\"color: #000000;\">+</span>\r\n<span style=\"color: #800080;\">14</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">15</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:Button ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Text</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> OnClick</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Add</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">/&gt;</span>\r\n<span style=\"color: #800080;\">16</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Result</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ReadOnly</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">17</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">div</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">18</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">form</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">19</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">20</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\"> 1 &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n 2 \r\n 3 &lt;!DOCTYPE html&gt;\r\n 4 \r\n 5 &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n 6 &lt;head runat=\"server\"&gt;\r\n 7 &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n 8     &lt;title&gt;&lt;/title&gt;\r\n 9 &lt;/head&gt;\r\n10 &lt;body&gt;\r\n11     &lt;form id=\"form1\" runat=\"server\"&gt;\r\n12     &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n13         &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n14         &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n15         &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n16         &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n17     &lt;/div&gt;\r\n18     &lt;/form&gt;\r\n19 &lt;/body&gt;\r\n20 &lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/27170247-4088cfd2bed94e059e9d806a465d7df3.png\" alt=\"\" /></p>\r\n<p>成功的访问并计算~~~！！！</p>\r\n<p>这里有几个需要提醒的地方：</p>\r\n<p>　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</p>\r\n<p>　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</p>\r\n<p>　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</p>\r\n<p>&nbsp;</p>\r\n<p>2、PostgreSQL与Mono的结合</p>\r\n<p>一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</p>\r\n<p>而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</p>\r\n<p>在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\" target=\"_blank\">《PostgreSQL和MySQL的对比》</a>和<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\" target=\"_blank\">《MySQL VS PostgreSQL》</a>。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</p>\r\n<p>好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\" target=\"_blank\">《CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3》</a>和<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\" target=\"_blank\">《CentOS 6.3 Minimal&nbsp;源码安装 PostgreSQL 9.2.3》</a>，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在<a href=\"http://weibo.com/317166684\" target=\"_blank\">微博</a>上私信或@我）。</p>\r\n<p>首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29213859-9fd41a47d7434984a2c66bf412e0a344.png\" alt=\"\" /></p>\r\n<p>然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\" target=\"_blank\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</p>\r\n<p>在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</p>\r\n<p>使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29200258-ec8c95ef1d3049cea0e15cb25d6fb923.png\" alt=\"\" /></p>\r\n<p>这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</p>\r\n<p>然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p>接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29224120-cc9e84ee622346a8b9ff5937601572b5.png\" alt=\"\" /></p>\r\n<p>&nbsp;这里有几点注意需要提醒各位读者：</p>\r\n<p>　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</p>\r\n<p>　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</p>\r\n<p>　　（3）、网站上传之后各位读者别忘了把Jexus重启。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Mono中使用PetaPoco</p>\r\n<p>微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</p>\r\n<p>尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</p>\r\n<p>面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</p>\r\n<p>Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework&nbsp;-Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</p>\r\n<p>&nbsp;既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">.NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</p>\r\n<p>&nbsp;我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</p>\r\n<p>然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/30155114-37c03ce424b74d4a9b6aa602694b85a1.png\" alt=\"\" /></p>\r\n<p>然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bc3302c6-c0c7-43d6-b449-2e44e6e0d42e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Webb.Config</span></div>\r\n<p>在Model中添加上我们的&rdquo;Person&ldquo;实体类：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cd0a3eae-0982-4fc5-9198-8174b15e3686\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Person.cs</span></div>\r\n<p>跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/30164722-030800f8ce974870a68263c279c116ad.png\" alt=\"\" /></p>\r\n<p>在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</p>\r\n<hr />\r\n<p>就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/23/3092181.html\" target=\"_blank\">下一节</a>，我们尝试在Mono中部署一款优秀的开源框架，也就是在已经在Java中大行其道的Spring，我们部署的是Spring.NET，嗯，我们下回见。</p>\r\n</body>\r\n</html>',1408492228596,1409085240146,0,0,'',1,0,0,'<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\"><a style=\"margin: 0px; padding: 0px; color: #5a5a5a;\" href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\">前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>',1408492228596),(15,'Linux.NET学习手记（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>\r\n<p>嗯，聪明的读者一定猜到了本回合要讨论学习的内容，对了，本回合我们讨论学习的内容就是：服务器软件Jexus。</p>\r\n<p>由于Jexus需要讨论学习的知识比较多，为此我会把Jexus分开两个回合来讲解，分别是这个回合对于Jexus的一些概念性和基础配置的讲解，以及下一回合Jexus网站配置高级功能的演示与讲解。</p>\r\n<p>本回合我们一起讨论学习的内容：</p>\r\n<p>　　（1）、对Jexus的概念性理解：什么是Jexus</p>\r\n<p>　　（2）、对上回合搭建环境时所遗留的问题进行辨析：为什么要选择Jexus</p>\r\n<p>　　（3）、Jexus的基本操作</p>\r\n<p>　　（4）、Jexus的整体配置</p>\r\n<p>　　（5）、介绍并使用Jexus的进程守护工具jws.guard</p>\r\n<hr />\r\n<p>&nbsp;1、什么是Jexus</p>\r\n<p>&ldquo;孔子门徒三千，成名七十二&rdquo;，世界上存在着各种各样不同类型的服务器软件，当然也包括你当时写来玩玩没有发布的那款，而在这众多的软件中，比较著名的有：IIS、Apache、Nginx、LIgHttpd等。而Jexus作为这众多服务器软件的其中一员，现在的排名应该就是这三千名中的第七十三名，也就是还没&ldquo;成名&rdquo;的那一位。</p>\r\n<p>的确，Jexus并没有出身在贵族之中，它没有像IIS一样拥有一个有钱有势有技术的托拉斯父亲帮它修饰与推广，也没有像Apache服务器软件一样成为&ldquo;Apache基金会&rdquo;的顶级项目被世界所认知，同样也没有像LigHttpd一样拥有高贵的普鲁士血种成为大家的新宠。<a href=\"http://baike.baidu.com/view/4562810.htm\" target=\"_blank\">百度百科</a>中对于Jexus的介绍也只有仅仅的那么几行，（至写本文章为止）<a href=\"http://zh.wikipedia.org/w/index.php?search=jexus&amp;title=Special%3A%E6%90%9C%E7%B4%A2\" target=\"_blank\">维基百科</a>中直接就找不到Jexus的存在，很多读者对于Jexus还是比较陌生的，对于Jexus的认知或许也仅仅是&ldquo;这东西可以在Linux中跑.NET&rdquo;，甚至直接就不知道有这么一款软件存在。</p>\r\n<p>孔子的弟子中，虽然只有七十二名的弟子被成为贤人，但是，谁又能说第一百七十二名就不是贤人呢？第七百二十名弟子就不优秀呢？在这剩下的两千多人中，其中也有很多弟子是很优秀的，只不过由于种种的原因而没有被其他人称作&ldquo;贤人而已&rdquo;。最近这两天，我跟群主（Jexus的作者）聊了不少东西，咨询了不少关于Jexus的情况，同时也感谢作者对我的一些ASP.NET的知识进行科普和扫盲，通过对Jexus的讨论，我体会到Jexus确实是一款优秀但却没太高名气的服务器软件，也就是那一位&ldquo;优秀而没有成名的弟子&rdquo;。</p>\r\n<p>用一句话介绍Jexus：Jexus是一款国产的基于.NET环境的有条件开源的免费的Web服务器软件，目前支持的平台有：Linux、FreeBSD和龙芯（旧版的海支持Windows），由作者（宇内流云）一人独力开发并长期维护，官方的论坛为：<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet 大本营</a>。</p>\r\n<p>我们在看看Jexus有那些功能特点（摘抄自Jexus说明书）</p>\r\n<p>　　（1）、高性能的ASP.NET处理能力。这是Jexus的核心功能。不管是稳定性、易用性还是并发承载能力、并行处理速度，Jexus对ASP.NET的支持都是非常优秀的；<br />　　（2）、支持Fast-CGI。通Fast-CGI，Jexus能支持包括PHP在内的所有拥有Fast-CGI服务功能的WEB应用；<br />　　（3）、具备基于正则表达式的强大的URL重写功能；<br />　　（4）、具有强劲的反向代理功能。支持多目标负载均衡，支持本地网站与远程网站无缝整合；<br />　　（5）、拥有强大的流媒体支持能力，支持FLV/F4V视频文件拖动播放，支持微软平滑流媒体技术；<br />　　（6）、支持&ldquo;服务器推送&rdquo;技术，配备了相应的服务器端、客户端开发接口，是开发现代WEB应用的利器；（注意，此功能在5.3版中已经除去，待到HTML5成熟并且大多数浏览器支持之后才重新推出）<br />　　（7）、具备可控的&ldquo;ASP.NET前置缓存&rdquo;，能最大限度地提高ASP.NET网站的承载能力和响应速度；<br />　　（8）、支持Https，具有SSL加密数据安全传输能力；<br />　　（9）、具有基础而实用的入侵检测功能，能自动终止已被识别的非法请求；<br />　　（10）、安装部署非常简便，操作使用极为简单。</p>\r\n<p>Jexus凝聚了作者的智慧和心血，针对当前Linux.NET服务器软件的不足实行有针对性的开发，因此是为.NET量身定做的一款服务器软件，再加上它所拥有的丰富的功能，确实是一款不错的软件。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么选择Jexus</p>\r\n<p>上回合，我们部署mono时，我们选择了Jexus作为服务器软件，同时也遗留了一个值得我们讨论的问题：为什么我们选择Jexus作为服务器软件而不是其他？下面我将会 通过两个主要方面的比较来推演出我们选择Jexus的原因：</p>\r\n<p>（1）、Windows 与 Linux 服务器软件的对比</p>\r\n<p>在上一回合的文章中，我阅读了所有读者给我的留言，其中有不少留言比较有趣的，当中有那么一则留言：&ldquo;.NET在Linux中跑效率和稳定性要比在Windows Server 2003 中要好&rdquo;，这时我就纳闷了.NET在WinServ03中还跑不过Linux？在自家做的环境中还比不上他人做的？此外，我也在Jexus的作者中得出那么一则消息：&ldquo;在相同的物理环境中，IIS 6.0 跑不过 Jexus 4.X&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144933-4d1303694d6c4f67a2b3c5a5c6cea530.jpg\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05144946-0b8d0d91313e49cda60dd926d6e56035.jpg\" alt=\"\" />&nbsp;&nbsp;&nbsp;&nbsp;</p>\r\n<p>上面的两幅图片是作者提供的关于IIS6.0 与 Jexus 4.3的简单性能测试，明显的看出Jexus 4.3的负载能力要比IIS 6 要强。当然，对于这片面的简单测试是远远不足以判定Jexus就比IIS性能强悍的，这需要通过更多更严格的系统性的测试，而且还要通过长期的实际使用才能对它们之间的性能对比作出判定。</p>\r\n<p>同时，我这里还要重申一点：&ldquo;IIS 绝对是一款性能优异的服务器软件&rdquo;，至于为什么会出现IIS跑不过Jexus的这种情况（这里的讨论仅限于图中的这两个版本的对比，对于新版的IIS与Jexus，这里不作讨论），我想其中的原因更大是由于运作的平台中的不同。</p>\r\n<p>IIS运行在Windows中，而Jexus则运行在Linux中，他们运行在不同的平台中，通过对比平台的差异，或许能够更容易的得出它们的差异。IIS6.0的性能低下（相对于Jexus4.3）很大程度上是由于Windows系统的拖累，为什么这么说？各位读者如果有兴趣的话可以右键点击计算机（我的电脑），然后打开它的服务列表，看看那庞大的列表中共有多少个服务，又有多少个服务是正在运行的（我刚刚自己手数了一下自己的电脑，共有178个服务，运行中的有92个，这里是普通系统，Server版本的当然没有这么多）。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05151116-8bbce625868548808089ab3ed7218bdc.png\" alt=\"\" /></p>\r\n<p>在这众多的服务当中，各位读者能够认得多少个呢？又是否能够清楚的说出每一个服务是干嘛用的呢？我相信各位读者应该没有认得出多少个，在这众多正在运行中的服务，很多都是为Windows系统提供一些体验性的功能，我们即使关闭了也对系统的影响不大，这些服务虽然可有可无，但是在我们安装系统的时候却会自动的给我们装上，并且默认的开机运行，运行就意味着系统需要从CPU消耗计算能力，需要从内存中划分出空间，这都是会浪费我们服务器的资源的。相反的，我们再看看Linux，在安装系统的时候就可以定制软件包，定制服务，我们可以选择最小化安装，也可以只安装我们需要的服务，对于我们不需要的服务，我们可以完全的无视之。还记得一位做服务器管理的老师曾经说过：&ldquo;对于运行的服务器，我们希望越轻越好，提供的服务越单一越好，开启的服务越少越不容易出错&rdquo;。我们回过头来看Windows，不免会觉得：&ldquo;Windows，你太重了&rdquo;。</p>\r\n<p>此外还有一点更重要，对Windows性能影响更大的，那就是Windows的图形界面。图形的处理会消耗大量的系统资源，而Windows在维持它的系统界面过程中就需要浪费服务器中大量的宝贵资源。我一直有这么一个观点：&ldquo;Linux是不应该存在图形界面的&rdquo;，同样，Server版的操作系统也不应该存在图形界面，正规的服务器是要被关在机房的，图形界面做得再好，画面再好看也不会有人去欣赏，尽管WinServ03的界面一点都不美观，但是丑归丑，维持这个界面还是要消耗大量的系统资源，安装CentOS6.4时内存如果没有1G，那图形的安装界面还起不了来，可见图形界面需要消耗多少的资源。同时，如果你是通过远程登陆到机房的服务器进行管理，网络问题同样会成为图形界面推送的一个瓶颈问题。</p>\r\n<p>就这样，过多的服务，加上万恶的图形界面，服务器在真正投入生产之前已经浪费了一笔珍贵的系统资源，相同物理配置的服务器，看似配置相同的环境，实际能够提供给服务器软件支配的系统资源却不同，IIS 6.0跑不过 Jexus 4.3也不足为奇了。</p>\r\n<p>&nbsp;（2）、同是Linux中.NET服务器软件的比较</p>\r\n<p>同时Linux中，运行环境才是真正的相同，这个比Windows/Linux更有可比性。Linux中搭建.NEt环境除了mono+Jexus之外还有一种方式，那就是mono+XSP。XSP是一款.NET的解析容器，它能够对.NET程序进行解析并维持高效的运行，但是它却有一个缺点，就是对于静态资源的处理能力相当有限，而一个网站中，大部分都是图片、CSS、JS等静态文件，真正动态生成的东西并不多，在这种情况下XSP就会暴露出它的软肋，面对这种情况，XSP一般都会整合一个高效的服务器软件进行弥补它的不足。类似于Tomcat+Apache的这种情况。这就衍生出了：网上提供的搭建Linux.NET的另外一种方式Linux+Apache（Nginx）+mono这种方式，它们在Apache（Nginx）和mono之间都会有一个插件，原理实际上就跟XSP一样。</p>\r\n<p>这里推荐一篇文章：《<a href=\"http://blog.csdn.net/jexus/article/details/5650714\" target=\"_blank\">为什么说Jexus更适合打造基于Linux/Unix系统的企业级 ASP.NET平台</a>》，该文章是Jexus的作者写的，里面有比较详细的对比了Linux采用Jexus的好处。阅读完这篇文章之后，相信读者也会明白为什么上回合搭建环境的时候直接选择了Jexus。</p>\r\n<p>最求更稳定，性能更优秀，效率更高，这就是我们选择Jexus的原因。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的操作</p>\r\n<p>经过两个章节关于Jexus的介绍，相信读者对于Jexus已经有了一个概念上的认识，从这个章节开始，接下来我们会对Jexus的使用进行实操，并通过操作Jexus时产生的现象进行讨论，从而进一步的了解并学会使用Jexus。</p>\r\n<p>Linux软件包有一个做得非常好的地方，那就是对于这款软件的使用手册、帮助文档往往都会存在软件本身之中，像&ldquo;有问题问男人&rdquo;（man命令）、&ldquo;--help&rdquo;等命令都能够提供快速的使用方法查阅，同样，关于Jexus的使用方法我们也可以通过Jexus软件包中的&ldquo;readme&rdquo;查阅得到。</p>\r\n<p>我们先看一下Jexus目录中有些什么东西：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05170609-411d6ae7b7824605ac00cd09311a9fa7.png\" alt=\"\" /></p>\r\n<p>里面也没有什么东西，包括四个文件夹（蓝色那种），六个脚本文件（绿色那种）和一些的其他文件（白色那种）。在这个章节里，我们介绍的是Jexus的操作，实际上就是对于Jexus脚本的操作和介绍。</p>\r\n<p>Jexus提供了六个操作脚本（针对5.3之前的版本,5.3版本已把所有jws脚步融合到jws中，使用方法为./jws 参数），他们的名称和功能分别是：</p>\r\n<p>　　jws.start: 启动Jexus；(如果需要开机自启动的，可以把脚本的全路径[包括脚步本身]添加到/etc/rc.local中；5.3中已改为：jws start)<br />　　jws.restart: 重启Jexus，如果命令后边加网站名作为参数，那么就表示启动或重启指定的网站；（5.3中已改为：jws restart）<br />　　jws.stop: 停止Jexus，如果命令后边加网站名作为参数，那么就表示停止指定的网站；（5.3中已改为：jws stop）<br />　　jws.regsvr: 注册jexus所需要的全局程序集（本命令只在安装或更新jexus后才用，而且必须用；5.3中已改为：jws regsvr）。<br />　　state.start: 启动Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）<br />　　state.stop: 停止Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</p>\r\n<p>　　此外，5.3中还增加以下功能：</p>\r\n<p>　　　　jws status：检查Jexus的运行状态</p>\r\n<p>　　　　jws -V：查看Jexus的版本　　　　　　　　　　　　　　　　</p>\r\n<p>操作方法跟运行普通脚本一样./XXX，没有多少技术含量。这里值得注意的是，这些脚步文件的拥有者应该保证是root用户，并且有运行的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>4、Jexus的配置</p>\r\n<p>Jexus的配置分为两个方面，一个是Jexus整体的配置（jws.conf），另外则是网站独立的配置（默认所有的网站配置文件都在siteconf文件夹中）。网站的独立配置可以调用很多Jexus的高级功能，我们把它当到下一回合再进行学习讨论，本章中我们主要进行Jexus的整站配置。我们用vi打开jws.conf看看里面有些什么设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05180814-e7e3731f09394f169969cdb65111ab25.png\" alt=\"\" /></p>\r\n<p>在这里，我解析一下每个选项的作用和注意事项：</p>\r\n<p>（1）、SiteLogDir：这个设置项必须得存在并且开启，该设置项设置Jexus的运行日志记录、各网站运行的日志记录都会存放到该文件夹中。此外，当记录的日志文件大小达到一定程度的时候，Jexus会自动的把日志写到一个新的日志文件中，不会一直通过追加写的方式把所有的日志记录都写到同一文件中。</p>\r\n<p>（2）、SiteConfigDir：这也是一个必须存在并且开启的设置项，这个设置项设置Jexus中各网站配置的存放地点，Jexus中默认的网站配置之所以存放在siteconf就是因为这里默认的值就为siteconf。此外值得注意的是，存放在该配置文件夹中的文件只能是网站的配置文件，其他任何的文件都不能存到到该目录（包括网站配置文件本身的备份文件），因为Linux系统所有的事物都是以文件的方式作为存储，因此无论你采用什么样的后缀，在Linux系统中都只当作普通文件来对待。</p>\r\n<p>（3）、Runtime：该设置项用于配置Runtime的版本，除非有特殊需求需要改动Runtime的版本，一般情况下无需修改。</p>\r\n<p>再来看一下一些高级点的设置项，这些设置项都是默认关闭的，</p>\r\n<p>（4）、LLVM：是否开启LLVM编译器功能。开启LLVM可以把中间语言的编译交给LLVM编译器，这可以加快编译的速度，编译出来的代码性能或许会更优秀一些。不过值得注意的地方：并不是所有的Linux都带有LLVM编译器，并且mono自带的编译器编译效率和编译生成的代码性能上也不差什么，因此如果没有特殊的需要，这一项可以让他保持默认关闭。</p>\r\n<p>（5）、httpd.processes：Jexus中默认的工作进程为1个，单个进程最大的并发数固定为1万个，通过开启多个工作进程可以提高Jexus处理并发的能力，开启多个进程的方式非常简单，只要修改httpd.processes的值并重启Jexus即可。不过这里有几点需要注意的地方：[1]Jexus最大支持的工作进程为4个，因此这里最大只能填写4；[2]如果开启了多个Jexus的工作进程，请注意网站的Session的保存方式，请通过修改网站config文件来修改Session的保存方式，避免采用进程的方式保存Session，否则将会造成Session的不同步，给网站的运作造成不必要的麻烦，Session的保存可以借助第三方的方式来保存（比如数据库，或者Jexus提供的强大的ASP.NET服务状态保存）；[3]Jexus工作进程的设置跟服务器的CPU内核数和内存数有关，如果你的Cpu只有一个核，而你配置开启了两个进程，也只能达到一个容错的效果，能够承载的并发数是不会上去的。详细可以参考文章<a href=\"http://www.linuxdot.net/bbsfile-3125\" target=\"_blank\">《让Jexus支持高并发请求的优化技巧》</a>。</p>\r\n<p>（6）、httpd.user：不知道各位读者用过Apache没有，在Apache中的httpd.conf有这么一项设置user=XXX：可以把Apache以某个用户的方式启动，相应的该用户的所拥有的操作权限都会赋给Apache进程。同样，httpd.user的作用也是跟Apache中的user是一样的，只要把一个已有的用户的用户名填写到httpd.user中，Jexus就会拥有该用户的操作权限。有什么用？嗯，举个例子吧，如果网站的运行会产生一些新文件的（比如做页面静态化），各位读者会采用什么办法解决呢？chmod 777？这可以解决，但是把目录的权限设置为777会存在安全性的问题，如果可以有一种解决方案：进程和某些用户可以对该目录进行读写操作，而其他用户不能，那就可以解决安全性问题了。嗯，对的，这个时候httpd.user就派上了用场，我们只要创建一个仅能供某个用户读写的目录，并把此用户的用户名填写到httpd.user中，就可以实现我们想要的功能了。</p>\r\n<p>（7）、php-fcgi.set：此功能是用于让Jexus支持PHP，由于这里与.NET关系不大，这里就不做过多的介绍了，需要了解的读者可以参照这篇文章<a href=\"http://www.linuxdot.net/bbsfile-3132\" target=\"_blank\">：《让Jexus V5.1支持PHP的操作步骤》</a>。</p>\r\n<p>（8）、CertificateFile 与 CertificateKeyFile：这个是让Jexus支持SSL的配置项，是用方法可以参照文章：<a href=\"http://zhumeng8337797.blog.163.com/blog/static/10076891420104654343279/\" target=\"_blank\">《Linux+Apache安装生成配置SSL证书》</a>和<a href=\"http://www.linuxdot.net/bbsfile-2970\" target=\"_blank\">《如何让jexus 支持ssl》</a></p>\r\n<p>在这八大Jexus的网站配置中，有一个终极的注意事项：每次配置后记得重启Jexus，否则刚才的配置是不会生效的！！！</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus进程守护工具jws.guard</p>\r\n<p>一个运行中的进程，难免会因为各种各样的原因无缘无故的宕掉（比如网站瞬间的负载过高、内存不足等），而Jexus宕掉的后果往往只有一个：对外提供服务的网站无法访问了。因此，我们需要最大限度的保障我们的网站能够提供7*24小时的不间断访问，而一个网站或者一个进程宕掉的过程是瞬间的，也许前一秒还访问得好好的，下一秒就突然间报个404的错误，而从网站或进程挂掉到我们人工的发现并重启服务的过程是漫长的，除非该网站有应对单点故障的解决方案，否则在这漫长的时间之中，网站都处于一个无法访问的黑色时期。如果这个宕掉的网站是一个企业网站，这会造成企业信誉度的下降；如果是一个商城网站，这会造成经济和人气的损失；因此，我们需要让系统能够自动的检测出网站的运行状态，当出现进程服务死机的时候能够自动重启。</p>\r\n<p>jws.guard的是一个python的脚本，工作原理也比较简单：根据设置好的预设值，每隔十秒钟访问一次访问一次指定的端口与文件，当三十秒内出现无法网站时就执行jws.restart进行重启网站。这里的三十秒指的是累计连续三次无法访问，防止因为检测时因为Jexus正忙而误判断重启，对网站进行误伤。</p>\r\n<p>jws.guard的使用方法也比较简单，只要把 &ldquo;tools/jws_guard&rdquo; 目录中的 &ldquo;guard.py&rdquo; 和 &ldquo;jws.guard&rdquo; 两个脚本文件拷贝到Jexus的工作目录（跟jws.start同一目录），然后配置一下jws.guard 中的预设值即可。</p>\r\n<p>我们首先把这两个文件拷贝出去</p>\r\n<p>cd /usr/local/jexus/tools/jws_guard/</p>\r\n<p>cp jws.guard guard.py /usr/local/jexus/</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>我们已经把这两个脚本拷贝到工作目录中。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/05202404-de9e4e1008c54293b161bc89aa34124f.png\" alt=\"\" /></p>\r\n<p>用vi打开并编辑jws.guard</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05202526-5f0fd75058e847b59ec0936962dd30ec.png\" alt=\"\" /></p>\r\n<p>把host、port、path改为我们需要的配置即可，它们分别代表主机地址，端口，检查的路径。一般情况下，如果Jexus采用80端口，这里可以不作修改直接使用，而如果Jexus采用的不是80端口，也只需要修改port，改为正确的端口并保存退出就可以了。host和path一般是不需要修改的，同时也不建议非必要的修改，因为修改jws.guard必须确保修改后修改的配置项是正确的，否则jws.guard就会因为无法访问配置后的网站而反复的重启Jexus，造成不必要的麻烦。</p>\r\n<p>修改好了之后只需要执行./jws.guard即可启动这款Jexus的进程守护工具。</p>\r\n<p>&nbsp;我们尝试性的把Jexus关掉。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203621-740e2ccb31b44910b38dd9d486334b40.png\" alt=\"\" /></p>\r\n<p>&hellip;&hellip;30秒之后&hellip;&hellip;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/05203850-cbb80f4d87e34a39a0fba02e47aade0a.png\" alt=\"\" /></p>\r\n<p>Jexus又起来了。</p>\r\n<p>通过jws.guard守护守护工具，我们可以很方便的让系统自动的发现Jexus进程宕机并快速的重启进程。同时我们只需要查阅Jexus的运行日志即可发现问题所在。</p>\r\n<p>这里有三点需要提醒的：</p>\r\n<p>　　（1）、如果需要关闭Jexus服务30秒以上的，请在关闭Jexus之前先执行./jws.guard stopg关闭jws.guard守护工具，以免守护工具自动的把Jexus又启动了起来。</p>\r\n<p>　　（2）、jws.guard是使用python语言编写的脚本，需要运行该工具时请确保系统中已经安装了python，检查方式可以执行 python -V ，如果没有出现python的版本信息则说明系统中没有安装python，这是，各位读者可以通过yum或者其他方式安装上python之后再运行jws.guard。</p>\r\n<p>　　（3）、再啰嗦一次，配置jws.guard时请确保配置的值是正确的。</p>\r\n<p>新版的Jexus的稳定性已经非常强，加上jws.guard可以起到加固作用。</p>\r\n<p>好的，至此Jexus的守护工具jws.guard就已经介绍完毕了。</p>\r\n<p>这里补充一点，高版本的Jexus已经把此工具从版本包中剔除，相信是因为高版本的Jexus中抗压能力有了更大的提高，因此作者也放心的将jws.guard移除。如果各位读者想保留功能的，可以下载一个之前版本的Jexus（可以在第一篇的学习手记中找到下载地址），然后在里面把此脚本提取出来使用。【补充于：2014/03/29】</p>\r\n<hr />\r\n<p>至此为止，本回合对于Jexus的基础讨论已经全部讲解完毕了。希望各位读者在阅读完本回合的文章之后能够对Jexus有一个基础性的了解，同时，如果各位读者有发现本回合中任何知识点的错漏、对本文章有任何的意见或者建议、对Linux.NEt的发展有任何的见解，都欢迎留言指教。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">下一回合</a>，我们将会对Jexus的高级功能：访问IP过滤、服务器的高速缓存、URL重写等功能进行深入的讲解并逐一的演示，同时，也希望没有搭建好Linux.NET的读者能够把环境搭建好，因为下回合所有的演示都是基于这个环境来进行实操。好吧，我们下回再见吧。</p>\r\n</body>\r\n</html>',1408492242317,1409073137330,0,0,'',1,0,0,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</p>\r\n<p>好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</p>',1408492242317),(16,'Linux.NET学习手记（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>\r\n<p>本回合，我们主要讨论学习：</p>\r\n<p>1、什么是mono</p>\r\n<p>2、为什么要用mono</p>\r\n<p>3、如何在Linux中部署一个.NET的运行环境</p>\r\n<p>4、部署时我们需要注意什么，以及对一些关键步骤的解析</p>\r\n<hr />\r\n<p>1、什么是mono</p>\r\n<p>关于什么是mono，我想无论我怎么说，应该都不会比官方的解释，或者是<a href=\"http://baike.baidu.com/view/26639.htm\" target=\"_blank\">百科</a>更加详细；我这里就简单说吧，Java之所以能够跨平台运作，是依赖与Java的虚拟机JVM，而.NET之所以只能够在Windows中跑，同样是因为.NET运行需要依赖与Framework的Runtime（公共运行时），那如果能够在Linux同提供适合于.NET运作的环境（包括CLR等），那.NET也可以在Linux中跑起来了，这就是mono了。</p>\r\n<p>&nbsp;</p>\r\n<p>2、为什么要使用mono</p>\r\n<p>为什么使用mono，原因有很多，不过归结起来，我个人认为以下这是最重要的：</p>\r\n<p>（1）、作为服务器来说，如果能够实现一模一样的功能的，还是主推Linux。为什么呢？我列举了几个实例：</p>\r\n<p>　　首先，如果服务器需要打补丁，作为Windows服务器，你打完补丁之后必须重启，这一定程度上会对你的业务造成一定程度上的影响</p>\r\n<p>　　其次，我们经常会听到Windows会中毒，特别是作为Web服务器和邮件服务器，我们不知道用户会给我们上传一些什么东西上来，相反，我们却很少会听到Linux中毒这么一个说法；这是由于Linux存在着太多的发行版本，不同版本之间编译后的软件无法相互调用，因此，如果能够感染A版本的Linux病毒无法感染B版本的Linux，这在很大程度上削减了病毒的危害性。</p>\r\n<p>　　再者，作为服务器，我们会尽量希望自己的系统更加的轻量化，更加的高效，和更加的稳定；Linux对于我们的要求，都提供了，我们可以定制的安装软件和服务，对于一些不必要的服务我们可以直接不安装（注意，是直接不安装，而不是安装之后再关闭），相反，如果采用Windows的话，一上来就啪嗒啪嗒的安装一大堆软件和服务，无论你用不用得上，先给你安装；也许这个可以让您的服务器充当更多的角色，但是我们更加希望服务器能够做到单一高效而不是面面俱到。</p>\r\n<p>　　最后，Linux运行对于硬件的要求比较低，这也是由于Linux抛弃桌面环境（作为服务器，我们不应该安装XWindow）和没有太多不必要的服务所决定的，而Windows则显得矜贵多了，硬件配置低一点还不一定能够正常运作。</p>\r\n<p>（2）、从成本考虑：</p>\r\n<p>　　一般部署在Windows中的.NET程序都是采用 &ldquo;Windows Server版本 + IIS + &nbsp;MS SQLServer&rdquo; 这确实是.NET的黄金组合，但是，值得遗憾的是，它们都是要收费的，系统要收费，数据库要收费；作为大企业来说，上千上万台服务器，如果都采用这种模式的话，那将是一笔巨额的开销；对于小公司，资金对于它们来说本就是一个难题，能省下来的基本上都希望省下来，如果放着一个能够达到相同功能而且免费的模式不用而采取这种付费模式，那太说不过去了。</p>\r\n<p>　　　而如果我们采用mono，把.NEt部署在Linux中，我们可以采用以下的组合：&ldquo;Linux + mono + jexus（Apache/nginx +&nbsp;XSP2）+ MySql(PostgerSQL或其他免费数据库)&rdquo;，所有的这些无论是否开源（jexus不开源）都是免费的。</p>\r\n<p>　　作为老板，你会选择哪种呢？&nbsp;&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>3、mono环境的部署</p>\r\n<p>介绍再多也不过是纸上谈兵，实战才是硬道理。工欲善其事必先利其器，要实操，还必须先要有这个环境，下面进入本回合的重点环节，Mono环境的配置。</p>\r\n<p>网上也有大量关于mono环境搭建的帖子，基本上都是搭配以下这两种类型的mono环境：以免费不开源jexus作为服务器软件的mono环境 和 以Apache（或nginx）作为服务器软件的mono环境，具体选择哪款环境读者可以自由选择。选择前者的，可以参考张善友先生的<a href=\"http://www.cnblogs.com/shanyou/archive/2012/01/07/2315982.html\" target=\"_blank\">《32和64位的CentOS 6.0下 安装 Mono 2.10.8 和Jexus 5.0》</a>；而选择后者的读者则可以参考<a href=\"http://www.cnblogs.com/aquilahkj/archive/2011/11/03/2234380.html\" target=\"_blank\">《CentOS 6.0 安装 MONO 2.10.8》</a>。</p>\r\n<p>这里我们就选择前者[选择的原因我打算放到下一回合再来说明]。</p>\r\n<p>版本选择，均选择当前所能下载的最新版本（需要下载的可以链接下载）：</p>\r\n<p>操作系统：<a href=\"http://mirrors.grandcloud.cn/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-bin-DVD1.iso\" target=\"_blank\">CentOS-6.4-x86_64</a></p>\r\n<p>libgdiplus：<a href=\"http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2\" target=\"_blank\">libgdiplus-2.10.9</a></p>\r\n<p>mono：<a href=\"http://download.mono-project.com/sources/mono/mono-3.0.7.tar.bz2\" target=\"_blank\">mono-3.0.7</a></p>\r\n<p>jexus：<a href=\"http://www.linuxdot.net/down/jexus-5.2.3.tar.gz\" target=\"_blank\">jexus-5.2.3</a>（这里最新版其实是jexus-5.3.0 beta3，不过基于稳定性，我选择了最新的稳定发行版）</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01155420-f8be87af3239421987d08120d54e4a7e.png\" alt=\"\" /></p>\r\n<p>首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</p>\r\n<p>装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01163416-47fa6ccd205b41c783232babc686d0c0.png\" alt=\"\" /></p>\r\n<p>（1）、更新系统 yum update &nbsp; （这里我就不更新了，因为都是最新版的东西了）</p>\r\n<p>（2）、通过yum安装编译mono所需要的库</p>\r\n<p>&nbsp;yum -y install gcc gcc-c++ bison pkgconfig glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel&nbsp; cairo-devel<br />（3）、编译安装Libgdiplus</p>\r\n<p>tar jxf libgdiplus-2.10.9.tar.bz2</p>\r\n<p>cd libgdiplus-2.10.9</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make &amp;&amp; make install</p>\r\n<p>echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</p>\r\n<p>ldconfig</p>\r\n<p>（4）、安装mono</p>\r\n<p>由于mono比较大，因此解压和编译安装都需要比较长的时间</p>\r\n<p>tar jxf mono-3.0.7.tar.bz2</p>\r\n<p>cd mono-3.0.7</p>\r\n<p>./configure --prefix=/usr/local/mono/</p>\r\n<p>make</p>\r\n<p>make install</p>\r\n<p>ldconfig</p>\r\n<p>echo &nbsp;PATH=/usr/local/mono/bin:$PATH&gt;&gt;~/.bash_profile</p>\r\n<p>source ~/.bash_profile</p>\r\n<p>执行 &nbsp;&ldquo; mono -V &rdquo;如果可以看到mono的版本信息，则表明编译安装成功</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01181638-1dfdf90f13734224a37b1674576165eb.png\" alt=\"\" /></p>\r\n<p>（5）、安装jexus</p>\r\n<p>安装jexus比较简单，jexus安装分为全新安装和升级安装两种，由于我们这里是全新安装，所以只讲全新安装部分，升级安装可以阅读jexus中自带的readme文档，里面有详细介绍。</p>\r\n<p>tar xzf jexus-5.2.3.tar.gz</p>\r\n<p>mv jexus-5.2.3 /usr/local/jexus</p>\r\n<p>cd /usr/local/jexus/</p>\r\n<p>./jws.regsvr</p>\r\n<p>ln -s /usr/local/mono/ /opt/mono</p>\r\n<p>至此，jexus就安装完毕了</p>\r\n<p>&nbsp;</p>\r\n<p>输入操作 &ldquo;./jws.start&rdquo;启动服务器，输入网址XXXX/info，得到以下画面，表明全部安装成功。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01182900-cfe15941dd9c48a1a32b675bddf1b5e6.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>4、部署需要注意的事项与解释</p>\r\n<p>上回合我们只是单纯的部署讲怎么部署mono，并没有对部署mono中每一步的作用做出解释，很多读者或许部署完了还不明白到底怎么回事，因此这回合我们就上回合的操作作出解释，并了解重点需要注意哪些事项。</p>\r\n<p>（1）、部署&nbsp;libgdiplus 时，执行最后一步是什么意思？</p>\r\n<p>　　上回合中，我们部署 libgdiplus 时执行了一步 &ldquo;echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf&rdquo;，这一步的作用其实到了部署mono时，执行&nbsp;ldconfig 才正式的发挥作用。由于我们部署libgdiplus 和mono没有部署到系统默认的/usr 中，因此系统是不会默认的到我们部署mono的文件夹中搜寻和读取里面的动态库文件，这时，我们需要在/etc/ld.so.conf.d/文件夹中，手动的添加mono动态库文件夹的地址，再执行 ldconfig 来让系统能够找到我们的动态库文件。</p>\r\n<p>（2）、部署mono后，执行 ldconfig 很重要</p>\r\n<p>编译部署mono之后，我们会得到大量需要加载的动态库文件，而这些动态库文件，我们再下一步的时候就需要用到，因此需要让系统重新加载。（如果没有重新加载，有可能在部署jexus的时候会出现各种各样的问题）</p>\r\n<p>（3）、部署mono之后，需要把bin目录的路径加入到环境变量PATH中</p>\r\n<p>原理跟安装完jdk之后，需要在环境变量注册是一样的。</p>\r\n<p>（4）、部署jexus需要执行注册</p>\r\n<p>部署jexus的过程相当简单，只需要解压，然后把文件夹拷贝到我们想要它存放的目录就可以了，不过在此之后，我们需要注册全局程序集（./jws.regsvr），这个很重要</p>\r\n<p>（5）、为什么注册完jexus之后需要添加一个软链接</p>\r\n<p>事实上，本来这个软链接是不会写上来的，因为之前部署mono时，注册完jexus了，服务就可以正常的跑起来了。但是这次不同，注册完之后，&ldquo;./jws.start&rdquo;之后，服务并没有起来，执行\"./jws.stop\"系统报了个notfoundXXX（找不到XXX）。于是用vi随便打开了其中的一个脚本，注意到了如下的代码：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/01195628-72782097379e44069f62b30c68aebc56.png\" alt=\"\" /></p>\r\n<p>很明显，jws脚本哪里写有了寻找mono的搜寻路径，而恰好，我们部署的mono都不在这几个路径中，因此，jexus找不到想要的bin目录下的文件，所以就服务起不来或者报了个notfound。这时，我们只要在/opt/mono/ 中（当然Path中的任意一个都行，或者你也可以自己手动的一个一个脚本文件添加上mono的目录路径）添加一个软链接，把它链接到我们部署mono的目录下，jexus就能够顺利的找到想要的文件。</p>\r\n<hr />\r\n<p>好了，要讲的暂时就这么多，我们的Linux.NET环境就基本搭建起来了。各位读者此刻时候有一种跃跃欲试的感觉，如果有，欢迎您马上行动，纸上得来终觉浅绝知此事必躬行。</p>\r\n<p>此外：由于本人对Linux.NET接触时间并不太久，手上也没有比较有效的资料，因此很多时候都是采取摸着石头过河的方式来学习研究，如果在讨论学习的过程中有任何错漏的，欢迎各位读者能够指正出来，同时，如果各位读者有任何的意见或者建议，也欢迎大家提出。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">下一回合</a>，我们将讨论学习：jexus作为Linux下基于mono的.NET服务器，其优势在哪？jexus的配置与特色功能，还有其中的一些注意事项与小技巧。</p>\r\n</body>\r\n</html>',1408908907822,1409073089392,0,0,'',1,1,0,'<p>Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</p>\r\n<p>不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：<a href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a>，<a href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a>，<a href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a>。</p>\r\n<p>同时，这里也推荐<a href=\"http://www.cnblogs.com/shanyou/archive/2012/07/28/2612919.html\" target=\"_blank\">张善友</a>先生的博客，那里有很多关于Linux.NET的文章。</p>',1408908907822),(17,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>\r\n<p>好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</p>\r\n<p>　　1、NOFILE功能　　</p>\r\n<p>　　2、Jexus的URLRewrite</p>\r\n<p>　　3、Jexus如果做IP过滤</p>\r\n<p>　　4、对目录访问禁止</p>\r\n<p>　　5、Jexus如何使用反向代理功能</p>\r\n<p>　　6、如何使用SendFile技术</p>\r\n<p>　　7、Jexus的高速缓存</p>\r\n<p>　　8、Jexus如何对静态资源进行压缩传输</p>\r\n<hr />\r\n<p>0、新建一个网站配置</p>\r\n<p>这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</p>\r\n<p>上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</p>\r\n<p><span class=\"Apple-converted-space\">Jexus中默认</span>SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/07195426-860ad529f327422e8105e5e0d31bf181.png\" alt=\"\" /></p>\r\n<p>该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</p>\r\n<p>先来讲解一下这三项是干嘛用的：</p>\r\n<p>port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</p>\r\n<p>　　这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</p>\r\n<p>&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</p>\r\n<p>　　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</p>\r\n<p>hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</p>\r\n<p>下面，我就开始演示操作：</p>\r\n<p>我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184417-05f1ea4477f74ca69b123ffe42054c26.png\" alt=\"\" /></p>\r\n<p>接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08183855-7d36d60425694318a037fc9535634ee0.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08184651-7ec0488710684303bb716316110f359b.png\" alt=\"\" /></p>\r\n<p>证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</p>\r\n<p>&nbsp;</p>\r\n<p>1、Jexus的NOFile功能。</p>\r\n<p>当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</p>\r\n<p>我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_983f4aca-2809-4ee2-81c6-b710f9065e1b\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">404.html</span></div>\r\n<p>然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215337-b2d264da1eb248809791f8c8ec8c5595.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09215544-b061f60964514812b3a2056a474e0254.png\" alt=\"\" /></p>\r\n<p>使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</p>\r\n<p>这里值得提醒的就是此功能的使用情况，</p>\r\n<p>　　（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</p>\r\n<p>　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的URL地址都被Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）</p>\r\n<p>&nbsp;</p>\r\n<p>2、Jexus的URL重写</p>\r\n<p>URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在<a href=\"http://baike.baidu.com/view/1002788.htm\" target=\"_blank\">百度百科</a>中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</p>\r\n<p>URLRewrite有以下的好处：</p>\r\n<p>　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</p>\r\n<p>　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</p>\r\n<p>　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</p>\r\n<p>在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</p>\r\n<p>下面进行URL重写的实验：</p>\r\n<p>要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</p>\r\n<p>首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码。　　</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_55623fe4-7375-4626-9a48-be22cef27aff\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">php.html</span></div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a313ec63-04fc-4b62-9452-1ffb07a48695\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">aspx.html</span></div>\r\n<p>然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08225515-2ef717370f31432c89c93aaf1dbdf6b7.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222339-bfb266021b1845f28ddcecbb065bafa3.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08222431-2b52120bc6154fb09eb07d5a2f611cf9.png\" alt=\"\" /></p>\r\n<p>成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</p>\r\n<p>　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</p>\r\n<p>　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</p>\r\n<p>　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/08230921-03e2181f714b4c46b227f8a921d9977c.png\" alt=\"\" /></p>\r\n<p>　　（4）、配置之后必须重启Jexus，否则是不会生效的。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Jexus的IP封杀</p>\r\n<p>有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</p>\r\n<p>我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231213-2143c4d089784d08936639259e4c7d38.png\" alt=\"\" /></p>\r\n<p>保存退出并重启Jexus，再来访问网站：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/09231355-23426f11421a401e9d608ea825f3d856.png\" alt=\"\" /></p>\r\n<p>我们的IP就被封杀掉了。</p>\r\n<p>&nbsp;</p>\r\n<p>4、禁止访问某目录中的内容</p>\r\n<p>此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</p>\r\n<p>在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f0173184-43f9-4d01-b995-b7714b2a88ae\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">denydir.html</span></div>\r\n<p>我们在修改配置文件之前先尝试访问： <img src=\"http://images.cnitblog.com/blog/499899/201304/10085920-d55b67301c4a4b61a8f4fbb07b856e93.png\" alt=\"\" /></p>\r\n<p>之后我们修改我们的网站配置文件：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090135-56087f20b3b94b0387082426339e60ec.png\" alt=\"\" /></p>\r\n<p>保存退出，重启Jexus后再刷新页面：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10090240-75353923867546af80ccad0f9d42fc01.png\" alt=\"\" /></p>\r\n<p>我们达到了我们想要的效果。</p>\r\n<p>&nbsp;</p>\r\n<p>5、Jexus反向代理</p>\r\n<p>Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在<a href=\"http://baike.baidu.com/view/1165595.htm\" target=\"_blank\">百度百科</a>、<a href=\"http://zh.wikipedia.org/wiki/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86\" target=\"_blank\">维基百科</a>或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</p>\r\n<p>在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</p>\r\n<p>使用代理具有以下优势：</p>\r\n<p>　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</p>\r\n<p>　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</p>\r\n<p>　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</p>\r\n<p>说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</p>\r\n<p>&nbsp;<img src=\"http://images.cnitblog.com/blog/499899/201304/10093405-4b5f999e4f104808910fa4ecf63b5cd7.png\" alt=\"\" /></p>\r\n<p>我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</p>\r\n<p>使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</p>\r\n<p>此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</p>\r\n<p>&nbsp;在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10221804-6eaf0d60f40f447c98c88e37926fa8e7.png\" alt=\"\" /></p>\r\n<p>分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223311-bd41bbb7d09a4aa5a910c7dfcb39e44f.png\" alt=\"\" />&nbsp;&nbsp;</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10223423-705f9aca8b0e4293b9258ed81e08163b.png\" alt=\"\" /></p>\r\n<p>再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224159-d02ed535eec049ec991d3665347b5caa.png\" alt=\"\" /></p>\r\n<p>保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10224323-362ef60552ac4a36a096e1c580540046.png\" alt=\"\" /></p>\r\n<p>Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</p>\r\n<p>&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</p>\r\n<p>　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</p>\r\n<p>　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/10230231-b9d300e89ba947269d726f31d6052020.png\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;6、SendFile技术</p>\r\n<p>我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12175257-b719679488e440eb990de3f6ac363ee8.png\" alt=\"\" /></p>\r\n<p>我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12183043-8ef79074843f41af9de99f024031d418.png\" alt=\"\" /></p>\r\n<p>SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</p>\r\n<p>现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</p>\r\n<p>下面我们完成此实验：</p>\r\n<p>在网站根目录中通过Linux创建一个100M大小的文件</p>\r\n<p>cd /var/www/xiaodiejinghong/</p>\r\n<p>&nbsp;dd if=/dev/zero of=./file.zip bs=1M count=100</p>\r\n<p>然后在Windows中创建一个网站，并写好我们的应用程序代码</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12200958-4f273e2a838d4457aff2b2dc52696e8b.png\" alt=\"\" /></p>\r\n<p>界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</p>\r\n<div class=\"cnblogs_code\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n<pre>    protected void Button1_Click(object sender, EventArgs e)\r\n    {\r\n        Response.ContentType = \"application/octet-stream\";\r\n        Response.AddHeader(\"Content-Disposition\", \"attachment;filename=file.zip\");\r\n        Response.AddHeader(\"X-SendFile\", \"/var/www/xiaodiejinghong/file.zip\");\r\n        Response.End();\r\n    }</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><a title=\"复制代码\"><img src=\"http://common.cnblogs.com/images/copycode.gif\" alt=\"复制代码\" /></a></span></div>\r\n</div>\r\n<p>点击Button后，文件就可以下载了</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/12201256-9d490313999644f390ffa885327bb5a1.png\" alt=\"\" /></p>\r\n<p>这里有两个注意事项需要注意的：</p>\r\n<p>　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</p>\r\n<p>　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</p>\r\n<p>&nbsp;</p>\r\n<p>7、前置缓存</p>\r\n<p>对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</p>\r\n<p>&nbsp;</p>\r\n<p>8、Gzip传输压缩</p>\r\n<p>各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</p>\r\n<p>Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13095650-64e073310a0f41e9a8d16fd5493563b5.png\" alt=\"\" /></p>\r\n<p>开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</p>\r\n<p>开启前：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102039-e850745d21cb45e5925ce1c95805d3be.png\" alt=\"\" /></p>\r\n<p>开启后：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13102114-f34f5ebf338d4b78ad58f6129d7c7b49.png\" alt=\"\" /></p>\r\n<p>虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/13110436-588337d85859442087fedcd8e53336c6.png\" alt=\"\" /></p>\r\n<p>比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</p>\r\n<p>&nbsp;</p>\r\n<hr />\r\n<p>好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/03/3047317.html\" target=\"_blank\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</p>\r\n</body>\r\n</html>',1408492126065,1409072773318,0,0,'3,2',1,1,1,'<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/05/3000404.html\" target=\"_blank\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</p>\r\n<p>在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/01/2994216.html\" target=\"_blank\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</p>',1408492126065),(18,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>safsadfasdf</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p>前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>\r\n<p>在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</p>\r\n<p>正式进入到本回合的正题，案例代码可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\" target=\"_blank\">点击这里</a>下载：</p>\r\n<p>在本回合中，我们将讨论学习：</p>\r\n<p>　　（1）、在Mono中部署一个简单的在线加法器</p>\r\n<p>　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</p>\r\n<p>　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</p>\r\n<hr />\r\n<p>1、牛刀小试</p>\r\n<p>在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</p>\r\n<p>针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/27165836-9b061074ab464d369c341a62e2cffb6b.png\" alt=\"\" /></p>\r\n<p>然后在Windows中的Visual Studio写一个简单的网站。</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre> <span style=\"color: #800080;\">1</span> <span style=\"color: #000000;\">&lt;%</span><span style=\"color: #000000;\">@ Page Language</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">C#</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> AutoEventWireup</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> CodeFile</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default.aspx.cs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Inherits</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">_Default</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">%&gt;</span>\r\n <span style=\"color: #800080;\">2</span> \r\n <span style=\"color: #800080;\">3</span> <span style=\"color: #000000;\">&lt;!</span><span style=\"color: #000000;\">DOCTYPE html</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">4</span> \r\n <span style=\"color: #800080;\">5</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html xmlns</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">http://www.w3.org/1999/xhtml</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">6</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">7</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">/&gt;</span>\r\n <span style=\"color: #800080;\">8</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n <span style=\"color: #800080;\">9</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">10</span> <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">11</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">form id</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">form1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">12</span>     <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">div style</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">background-color:pink;height:40px;width:600px;padding:10px;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">13</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend1</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>  <span style=\"color: #000000;\">+</span>\r\n<span style=\"color: #800080;\">14</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Addend2</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">15</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:Button ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> Text</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> OnClick</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Add</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">/&gt;</span>\r\n<span style=\"color: #800080;\">16</span>         <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">asp:TextBox ID</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Result</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> runat</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">server</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ReadOnly</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">true</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;&lt;/</span><span style=\"color: #000000;\">asp:TextBox</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">17</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">div</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">18</span>     <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">form</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">19</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #800080;\">20</span> <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_21a63aee-f2f8-4033-baa9-d93e52a91498\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\"> 1 &lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n 2 \r\n 3 &lt;!DOCTYPE html&gt;\r\n 4 \r\n 5 &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n 6 &lt;head runat=\"server\"&gt;\r\n 7 &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n 8     &lt;title&gt;&lt;/title&gt;\r\n 9 &lt;/head&gt;\r\n10 &lt;body&gt;\r\n11     &lt;form id=\"form1\" runat=\"server\"&gt;\r\n12     &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n13         &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n14         &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n15         &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n16         &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n17     &lt;/div&gt;\r\n18     &lt;/form&gt;\r\n19 &lt;/body&gt;\r\n20 &lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_36bf9167-4da1-4d61-8abd-6fe85af6d99e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/27170247-4088cfd2bed94e059e9d806a465d7df3.png\" alt=\"\" /></p>\r\n<p>成功的访问并计算~~~！！！</p>\r\n<p>这里有几个需要提醒的地方：</p>\r\n<p>　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</p>\r\n<p>　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</p>\r\n<p>　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</p>\r\n<p>&nbsp;</p>\r\n<p>2、PostgreSQL与Mono的结合</p>\r\n<p>一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</p>\r\n<p>而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</p>\r\n<p>在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\" target=\"_blank\">《PostgreSQL和MySQL的对比》</a>和<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\" target=\"_blank\">《MySQL VS PostgreSQL》</a>。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</p>\r\n<p>好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\" target=\"_blank\">《CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3》</a>和<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\" target=\"_blank\">《CentOS 6.3 Minimal&nbsp;源码安装 PostgreSQL 9.2.3》</a>，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在<a href=\"http://weibo.com/317166684\" target=\"_blank\">微博</a>上私信或@我）。</p>\r\n<p>首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29213859-9fd41a47d7434984a2c66bf412e0a344.png\" alt=\"\" /></p>\r\n<p>然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\" target=\"_blank\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</p>\r\n<p>在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</p>\r\n<p>使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29200258-ec8c95ef1d3049cea0e15cb25d6fb923.png\" alt=\"\" /></p>\r\n<p>这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</p>\r\n<p>然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p>接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/29224120-cc9e84ee622346a8b9ff5937601572b5.png\" alt=\"\" /></p>\r\n<p>&nbsp;这里有几点注意需要提醒各位读者：</p>\r\n<p>　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</p>\r\n<p>　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</p>\r\n<p>　　（3）、网站上传之后各位读者别忘了把Jexus重启。</p>\r\n<p>&nbsp;</p>\r\n<p>3、Mono中使用PetaPoco</p>\r\n<p>微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</p>\r\n<p>尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</p>\r\n<p>面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</p>\r\n<p>Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework&nbsp;-Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</p>\r\n<p>&nbsp;既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">.NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</p>\r\n<p>&nbsp;我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</p>\r\n<p>然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</p>\r\n<p><img src=\"http://images.cnitblog.com/blog/499899/201304/30155114-37c03ce424b74d4a9b6aa602694b85a1.png\" alt=\"\" /></p>\r\n<p>然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bc3302c6-c0c7-43d6-b449-2e44e6e0d42e\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Webb.Config</span></div>\r\n<p>在Model中添加上我们的&rdquo;Person&ldquo;实体类：</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cd0a3eae-0982-4fc5-9198-8174b15e3686\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\" /><span class=\"cnblogs_code_collapse\">Person.cs</span></div>\r\n<p>跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：<br /><img src=\"http://images.cnitblog.com/blog/499899/201304/30164722-030800f8ce974870a68263c279c116ad.png\" alt=\"\" /></p>\r\n<p>在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</p>\r\n<hr />\r\n<p>就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</p>\r\n<p><a href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/05/23/3092181.html\" target=\"_blank\">下一节</a>，我们尝试在Mono中部署一款优秀的开源框架，也就是在已经在Java中大行其道的Spring，我们部署的是Spring.NET，嗯，我们下回见。</p>\r\n</body>\r\n</html>',1408492228596,1409085240146,0,0,'',1,0,0,'<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\"><a style=\"margin: 0px; padding: 0px; color: #5a5a5a;\" href=\"http://www.cnblogs.com/xiaodiejinghong/archive/2013/04/14/3019660.html\" target=\"_blank\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</p>\r\n<p style=\"margin: 10px auto; padding: 0px; font-size: 14px; color: #403226; font-family: verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; line-height: 24px;\">前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</p>',1408492228596),(19,'初识Entity Framework CodeFirst（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Entity Framework推出已经有一段时间了，CodeFirst是跟着EF4一起推出的一项技术。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">以前我也有用EF来快速建立数据持久层，不过采用的是DBFirst，最近打算学习一下CodeFirst的使用，看了不少园子中各位达人的文章，也看了几集MSDN上的英文视频教程（视频的确很不错的说，推荐大家也去看一下），稍微有一点心得，现在跟各位朋友分享一下。希望各位园子中的朋友不吝赐教，一起学习进步。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我还是第一次写技术类博客（处女作？），如果写得不合大家心意的话还望见谅。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span><br /><span style=\"font-family: 宋体; font-size: 12pt;\">言归正传：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们这节讨论的问题如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、简单的介绍一下什么是CodeFirst</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、如何简单快速的部署EF</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、一个EF CodeFirst的简单应用实例</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">代码可以点击</span><a style=\"font: 12px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://files0.cnitblog.com/xiaodiejinghong/CodeFirst-2013-3-23.rar\">这里</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">下载</span></span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、什么是CodeFirst</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">什么是CodeFirst，顾名思义，代码优先，这是相对于以往开发时，先通过业务分析，再建库建表，最后才对项目进行编码。CodeFirst就是先写代码和数据模型，再让EF通过数据模型生成DDL代码，建立数据库。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、如何配置</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">首先，我们建立一个项目（我这里建立一个控制台程序）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">右键点击解决方案，然后选择&ldquo;管理NuGet程序包&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902200330181.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">这里你会看到很多程序程序包，选择EntityFramework，点击安装。</span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902200359371.png\" alt=\"\" /></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">系统会自动的帮你部署好EF，呵呵，很方便的说。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">我们打开配置文件APP.Config看看，代码如下:</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_0d9881cb-822d-41d1-9e82-57172fcffb97\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">App.Config</span> <img id=\"code_img_opened_0d9881cb-822d-41d1-9e82-57172fcffb97\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_0d9881cb-822d-41d1-9e82-57172fcffb97\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #008000;\">&lt;!--</span><span style=\"color: #008000;\"> For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 </span><span style=\"color: #008000;\">--&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">section </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"entityFramework\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"</span><span style=\"color: #ff0000;\"> requirePermission</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">startup</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">supportedRuntime </span><span style=\"color: #ff0000;\">version</span><span style=\"color: #0000ff;\">=\"v4.0\"</span><span style=\"color: #ff0000;\"> sku</span><span style=\"color: #0000ff;\">=\".NETFramework,Version=v4.5\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">startup</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">entityFramework</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">defaultConnectionFactory </span><span style=\"color: #ff0000;\">type</span><span style=\"color: #0000ff;\">=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">parameters</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">parameter </span><span style=\"color: #ff0000;\">value</span><span style=\"color: #0000ff;\">=\"v11.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">parameters</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">defaultConnectionFactory</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">entityFramework</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_0d9881cb-822d-41d1-9e82-57172fcffb97\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;configuration&gt;\r\n  &lt;configSections&gt;\r\n    &lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;\r\n    &lt;section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=5.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /&gt;\r\n  &lt;/configSections&gt;\r\n  &lt;startup&gt;\r\n    &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /&gt;\r\n  &lt;/startup&gt;\r\n  &lt;entityFramework&gt;\r\n    &lt;defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"&gt;\r\n      &lt;parameters&gt;\r\n        &lt;parameter value=\"v11.0\" /&gt;\r\n      &lt;/parameters&gt;\r\n    &lt;/defaultConnectionFactory&gt;\r\n  &lt;/entityFramework&gt;\r\n&lt;/configuration&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">多了一些配置信息（从项目建立开始，我一直都没有动过配置文件），这些信息是EF部署的时候，系统自动帮你添加的，这里我采用的是VS2012自带的LocalDB，数据库的实例是mydb，所以，我只需要把&ldquo;&lt;parameter value=\"v11.0\" /&gt;&rdquo;中的V11.0改为mydb即可（这里无论是V11.0还是mydb都是数据库实例，不是具体的数据库名称，因为数据库等下是通过EF来自动帮我们生成的）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">至此，我们EF CodeFirst就部署完毕啦。体会到了IDE的强大了吧~~</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、开始使用EF CodeFirst</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里，首先我建立两个Model（稍微抄袭一下MSDN上面的教程，实在是想不出建立个什么样的model好）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Model的代码如下：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Blog\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> BlogID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> BlogName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\">    <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Post\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> PostID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Title { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Content { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> BlogID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">virtual</span><span style=\"color: #000000;\"> Blog Blog { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></span></pre>\r\n</div>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">再建立一个上下文，这里我们继承自DbContext（注意哟：这里需要引入程序集&ldquo;System.Data.Entity&rdquo;）</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\">    <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> BlogContext:DbContext\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Blog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Blogs { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">到这里，我们的EF CodeFirst基本上已经写完了，剩下的就是在program里面写一下调用的代码。</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n    {\r\n        </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> blogDb </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> BlogContext())\r\n            {\r\n                Console.Write(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Enter a name for a new blog:</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> blogName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Console.ReadLine();\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> blog </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Blog { BlogName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> blogName };\r\n                blogDb.Blogs.Add(blog);\r\n                blogDb.SaveChanges();\r\n                \r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> result </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> b </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> blogDb.Blogs\r\n                             </span><span style=\"color: #0000ff;\">select</span><span style=\"color: #000000;\"> b;\r\n                </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> item </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result)\r\n                {\r\n                    Console.WriteLine(item.BlogName);\r\n                }\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">运行程序：</span></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902200821913.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">看来没有什么问题，呵呵。我们再看看数据库：</span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902200844981.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">可以看出，多了个叫做&ldquo;CodeFirst_2013_3_23.BlogContext&rdquo;（名字起的有点长）的数据库乖乖的躺在那里，而且表也建好了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">到这里为止，CodeFirst已经简单的讲解完毕。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><a href=\"/Home/Single/16280085\" target=\"_blank\">下一节</a>，我们讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">如果我们的数据实体需要发生变化，比如添加一个新的数据库实体，或者在已有的实体中添加/修改字段，我们需要怎么做？难道需要把数据库删掉，然后重新生成？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">答案当然是：呵呵~~~</span></p>\r\n</body>\r\n</html>',1409688084009,1410119037130,51,6,'5,6',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">Entity Framework推出已经有一段时间了，CodeFirst是跟着EF4一起推出的一项技术。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">以前我也有用EF来快速建立数据持久层，不过采用的是DBFirst，最近打算学习一下CodeFirst的使用，看了不少园子中各位达人的文章，也看了几集MSDN上的英文视频教程（视频的确很不错的说，推荐大家也去看一下），稍微有一点心得，现在跟各位朋友分享一下。希望各位园子中的朋友不吝赐教，一起学习进步。</span></p>',1409688084009),(20,'初识Entity Framework CodeFirst（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><a href=\"/Home/Single/6587252\" target=\"_blank\">上一回合</a>，我们讨论了如何简单的使用Entity Framework CodeFirst功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">结尾的时候，我们提出了一个有趣的问题，如果我们的数据实体需要发生变化呢？需要添加多一个Model类呢？修改已有实体中字段呢？我们该怎么办？该不会是把数据库删掉，然后让程序重新生成吧？很明显，答案当然不是啦。EF作为微软推荐的框架之一，没有这么差劲的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">本节，我们讨论一下内容：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、Migration控制台</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、修改已有实体，添加/删除 数据库字段</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、添加新实体模型与数据库表映射</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、修改实体属性与数据库字段名映射</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">代码点击</span><a style=\"font: 14px/18px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 28px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://files0.cnitblog.com/xiaodiejinghong/CodeFirst-2013-3-23%EF%BC%882%EF%BC%89.rar\">这里</a><span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">下载</span></span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、打开程序包管理器控制台，并启动Migrations （迁移）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">方法如下：点击工具-&gt;库程序包管理器-&gt;程序包管理器控制台</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902214258938.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">在控制台中输入&ldquo;Enable-Migrations&rdquo; （小技巧：这里支持Tab自动补全），启动Migrations。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这时候，项目解决方案处会多出一个文件夹&ldquo;Migrations&rdquo;以及其下级的文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902214353811.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&ldquo;Configuration.cs&rdquo;文件包含本项目CodeFirst的基本配置，一般情况下我们大可不必修改里面的内容。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_e3ec04bb-c984-4491-8e73-c4786620c84e\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">201303241026370_InitialCreate</span> <img id=\"code_img_opened_e3ec04bb-c984-4491-8e73-c4786620c84e\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_e3ec04bb-c984-4491-8e73-c4786620c84e\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> InitialCreate : DbMigration\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Up()\r\n        {\r\n            CreateTable(\r\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n                c </span><span style=\"color: #000000;\">=&gt;</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">\r\n                    {\r\n                        BlogID </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.Int(nullable: </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">, identity: </span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">),\r\n                        BlogName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(),\r\n                    })\r\n                .PrimaryKey(t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.BlogID);\r\n            \r\n            CreateTable(\r\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Posts</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n                c </span><span style=\"color: #000000;\">=&gt;</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">\r\n                    {\r\n                        PostID </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.Int(nullable: </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">, identity: </span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">),\r\n                        Title </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(),\r\n                        Content </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(),\r\n                        BlogID </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.Int(nullable: </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">),\r\n                    })\r\n                .PrimaryKey(t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.PostID)\r\n                .ForeignKey(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.BlogID, cascadeDelete: </span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">)\r\n                .Index(t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.BlogID);\r\n            \r\n        }\r\n        \r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Down()\r\n        {\r\n            DropIndex(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Posts</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">[] { </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BlogID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            DropForeignKey(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Posts</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">BlogID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            DropTable(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Posts</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            DropTable(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_e3ec04bb-c984-4491-8e73-c4786620c84e\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">public partial class InitialCreate : DbMigration\r\n    {\r\n        public override void Up()\r\n        {\r\n            CreateTable(\r\n                \"dbo.Blogs\",\r\n                c =&gt; new\r\n                    {\r\n                        BlogID = c.Int(nullable: false, identity: true),\r\n                        BlogName = c.String(),\r\n                    })\r\n                .PrimaryKey(t =&gt; t.BlogID);\r\n            \r\n            CreateTable(\r\n                \"dbo.Posts\",\r\n                c =&gt; new\r\n                    {\r\n                        PostID = c.Int(nullable: false, identity: true),\r\n                        Title = c.String(),\r\n                        Content = c.String(),\r\n                        BlogID = c.Int(nullable: false),\r\n                    })\r\n                .PrimaryKey(t =&gt; t.PostID)\r\n                .ForeignKey(\"dbo.Blogs\", t =&gt; t.BlogID, cascadeDelete: true)\r\n                .Index(t =&gt; t.BlogID);\r\n            \r\n        }\r\n        \r\n        public override void Down()\r\n        {\r\n            DropIndex(\"dbo.Posts\", new[] { \"BlogID\" });\r\n            DropForeignKey(\"dbo.Posts\", \"BlogID\", \"dbo.Blogs\");\r\n            DropTable(\"dbo.Posts\");\r\n            DropTable(\"dbo.Blogs\");\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&ldquo;201303241026370_InitialCreate.cs&rdquo;（命名有系统自动生成）包含的则是初始化语句。大家可以看到里面包含了两个方法，一个是Up，用于初始化时建立数据库（表）；另外一个则是Down，删除数据库（表）的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们必须借助Migrations 来对实体类中的修改更新到数据库的结构当中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、如何修改已有实体（实例：在已有model中添加一个字段）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">举个例子（还是来自于MSDN），我们对Blog Model进行修改，添加一个&ldquo;Url&rdquo;的字段</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Blog\r\n{\r\n     </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> BlogID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n     </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> BlogName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n     </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Url { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">打开Migration控制台，输入&ldquo;Add-Migration AddUrl&rdquo;，这时我们发现解决方案中多了一个文件，名为：201303241155123_AddUrl</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902214650654.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">该文件产生的代码如下：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_e25cb5b5-43fe-4065-8ee0-2921bc7f0154\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">AddUrl</span> <img id=\"code_img_opened_e25cb5b5-43fe-4065-8ee0-2921bc7f0154\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_e25cb5b5-43fe-4065-8ee0-2921bc7f0154\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> AddUrl : DbMigration\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Up()\r\n        {\r\n            AddColumn(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Url</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, c </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> c.String());\r\n        }\r\n        \r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Down()\r\n        {\r\n            DropColumn(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Blogs</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Url</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_e25cb5b5-43fe-4065-8ee0-2921bc7f0154\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    public partial class AddUrl : DbMigration\r\n    {\r\n        public override void Up()\r\n        {\r\n            AddColumn(\"dbo.Blogs\", \"Url\", c =&gt; c.String());\r\n        }\r\n        \r\n        public override void Down()\r\n        {\r\n            DropColumn(\"dbo.Blogs\", \"Url\");\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">再在Migration控制台输入：&ldquo;Update-Database&rdquo;，更新数据库结构。</span></p>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902214743432.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">新增的字段就乖乖的新建出来了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里解析一下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、Migration控制台中，&ldquo;Add-Migration XXX&rdquo;，其中的XXX为各位读者自己命名，可以起任意的名字，这里还是建议各位读者朋友名一个有实意的名字以方便后续的工作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、生成的新代码中，它继承自DbMigration，里面包含了两个重写方法，UP和Down，Up中调用了AddColumn方法插入新字段，传入三个参数，分别是&ldquo;表名&rdquo;、&ldquo;字段名&rdquo;以及一个用于确定数据类型的lambda表达式；Drow方法则调用DropColumn，传入&ldquo;表名&rdquo;和&ldquo;字段名&rdquo;来删除该字段。有兴趣的同学可以对DbMigration进行反编译，可以看到里面包含的所有方法。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902214819196.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、新增一个实体（实例：添加一个Type Model和一个User Model）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3.1、添加一个Type实体</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Type\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> TypeID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> TypeName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">修改上下文BlogContext，添加一个Types属性</span>:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> BlogContext:DbContext\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Blog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Blogs { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Type</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Types { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">调出Migration控制台，&ldquo;Add-Migration AddType&rdquo;&mdash;&mdash;&gt;&ldquo;Update-Database&rdquo; ，很好，Type表已经轻松的生成。</span></span></p>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902215007944.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3.2、添加一个User Model</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">各位读者有没有发现，之前我们一直新建的实体，实体字段第一位都是XXID（总是int类型），这里我们做一点改动，不要XXID，只要UserName和DisplayName两个string类型的字段。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">添加Model:</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> User\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> UserName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> DisplayName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">修改上下文</span></span><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> BlogContext:DbContext\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Blog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Blogs { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Type</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Types { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n     </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">User</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Users { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们还像以往一样，调出Migration控制台，然后执行&ldquo;Add-Migration AddUser&rdquo;&mdash;&mdash;&gt;&ldquo;Update-Database&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">聪明的读者一定会猜得出后果会怎么样，没错，这回报错了，报错内容为：没有找到主键</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902215203969.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">这时，我们需要在User中手动添加一个主键的标签</span><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> User\r\n{\r\n    [System.ComponentModel.DataAnnotations.Key]\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> UserName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> DisplayName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">重新调出Migration控制台，&ldquo;Add-Migration AddUser&rdquo;&mdash;&mdash;&gt;&ldquo;Update-Database&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">通过，User表已经生成在数据库中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902215318414.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这时，我们或许会产生或多或少的暗示&mdash;&mdash;不指定主键的时候，EF默认会自动的帮我们指定。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里，我把Type实体和User实体通过调用Migration生成的两个Add文件的代码贴出来。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_b3556b94-762d-480a-9f48-461272027936\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">AddType</span> <img id=\"code_img_opened_b3556b94-762d-480a-9f48-461272027936\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_b3556b94-762d-480a-9f48-461272027936\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> AddType : DbMigration\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Up()\r\n        {\r\n            CreateTable(\r\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Types</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n                c </span><span style=\"color: #000000;\">=&gt;</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">\r\n                    {\r\n                        TypeID </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.Int(nullable: </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">, identity: </span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">),\r\n                        TypeName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(),\r\n                    })\r\n                .PrimaryKey(t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.TypeID);\r\n            \r\n        }\r\n        \r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Down()\r\n        {\r\n            DropTable(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Types</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_b3556b94-762d-480a-9f48-461272027936\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">public partial class AddType : DbMigration\r\n    {\r\n        public override void Up()\r\n        {\r\n            CreateTable(\r\n                \"dbo.Types\",\r\n                c =&gt; new\r\n                    {\r\n                        TypeID = c.Int(nullable: false, identity: true),\r\n                        TypeName = c.String(),\r\n                    })\r\n                .PrimaryKey(t =&gt; t.TypeID);\r\n            \r\n        }\r\n        \r\n        public override void Down()\r\n        {\r\n            DropTable(\"dbo.Types\");\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_3996813e-502c-43dc-b1da-1d4e15ce2c66\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">AddUser</span> <img id=\"code_img_opened_3996813e-502c-43dc-b1da-1d4e15ce2c66\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_3996813e-502c-43dc-b1da-1d4e15ce2c66\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> AddUser : DbMigration\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Up()\r\n        {\r\n            CreateTable(\r\n                </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Users</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n                c </span><span style=\"color: #000000;\">=&gt;</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\">\r\n                    {\r\n                        UserName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(nullable: </span><span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">, maxLength: </span><span style=\"color: #800080;\">128</span><span style=\"color: #000000;\">),\r\n                        DisplayName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> c.String(),\r\n                    })\r\n                .PrimaryKey(t </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> t.UserName);\r\n            \r\n        }\r\n        \r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Down()\r\n        {\r\n            DropTable(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">dbo.Users</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_3996813e-502c-43dc-b1da-1d4e15ce2c66\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">public partial class AddUser : DbMigration\r\n    {\r\n        public override void Up()\r\n        {\r\n            CreateTable(\r\n                \"dbo.Users\",\r\n                c =&gt; new\r\n                    {\r\n                        UserName = c.String(nullable: false, maxLength: 128),\r\n                        DisplayName = c.String(),\r\n                    })\r\n                .PrimaryKey(t =&gt; t.UserName);\r\n            \r\n        }\r\n        \r\n        public override void Down()\r\n        {\r\n            DropTable(\"dbo.Users\");\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">对比一下，答案也许各位读者已经找到了。没错，答案就在重写的UP中，各位是否发现，没有指明主键的Type实体中，EF会自动的把第一个字段指定为identity（自增）的int型主键，当然，前提必须为这个被指定的字段在model中的属性为int类型。而在User实体中，全部都是string类型的属性，因为EF无法通过默认的方式找到可以自动添加的主键字段，所以Migrants控制台想Add-Migrants时就会发生内容为：找不到主键的报错啦。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里我需要补充一下，精明的读者也许发现，通过CodeFirst生成的数据表中，字段的类型也只能确定个大概，并不能进行比较精确的确定，比如通过string类型属性反向生成的字段，其字段容量大小竟然为&ldquo;Max&rdquo;；其实，在&ldquo;Update-Database&rdquo;之前，我们可以通过对&ldquo;Add-Migration&rdquo;中生成的Add文件（暂时想不出有什么方法形容这些文件）中的UP方法进行细小的微调，然后再执行&ldquo;Update-Database&rdquo;，我们就可以生成真正想要字段大小啦。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、修改已存在的实体，数据库中对应字段的字段名</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">有时候，我们已经使用EF CodeFirst对数据库已经进行了反向的生成，但是，我们又想修改一下数据库中，与实体属性对应的某个字段的字段名，这个时候我们应该怎么办呢？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里，我们只需要在上下文中override一个方法</span></p>\r\n<p>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bd846953-8485-465d-ab54-f6767296e86b\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">BlogContext</span> <img id=\"code_img_opened_bd846953-8485-465d-ab54-f6767296e86b\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_bd846953-8485-465d-ab54-f6767296e86b\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> BlogContext:DbContext\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Blog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Blogs { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Type</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Types { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">User</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Users { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n        </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">User</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">()\r\n                .Property(u </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\"> u.DisplayName)\r\n                .HasColumnName(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Display_Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_bd846953-8485-465d-ab54-f6767296e86b\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">class BlogContext:DbContext\r\n    {\r\n        public DbSet&lt;Blog&gt; Blogs { get; set; }\r\n        public DbSet&lt;Post&gt; Posts { get; set; }\r\n        public DbSet&lt;Type&gt; Types { get; set; }\r\n        public DbSet&lt;User&gt; Users { get; set; }\r\n\r\n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Entity&lt;User&gt;()\r\n                .Property(u =&gt; u.DisplayName)\r\n                .HasColumnName(\"Display_Name\");\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #000000; text-transform: none; line-height: 18px; text-indent: 28px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">在Migration中，&ldquo;Add-Migration&rdquo;&mdash;&mdash;&gt;&ldquo;Update-Migration&rdquo;</span></span></p>\r\n<p><span style=\"font: 14px/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">好的，O了。</span></p>\r\n<p><span style=\"font: 14px/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902215757186.png\" alt=\"\" /></span></p>\r\n<hr />\r\n<p><span style=\"font: 14px/18px 宋体; color: #000000; text-transform: none; text-indent: 28px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">这节我们已经讨论完毕了，各位读者如果有什么更好的建议或者意见，欢迎留言。</span></p>\r\n<p>&nbsp;</p>\r\n</body>\r\n</html>',1409694299393,1409698638883,20,6,'5,6',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">上一回合，我们讨论了如何简单的使用Entity Framework CodeFirst功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">结尾的时候，我们提出了一个有趣的问题，如果我们的数据实体需要发生变化呢？需要添加多一个Model类呢？修改已有实体中字段呢？我们该怎么办？该不会是把数据库删掉，然后让程序重新生成吧？很明显，答案当然不是啦。EF作为微软推荐的框架之一，没有这么差劲的。</span></p>',1409694299393),(21,'初识Entity Framework CodeFirst（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">前两回合，我们讨论学习了如何采用Entity Framework在没有数据库的情况下自己写一些实体类，然后通过CodeFirst反向生成对应的数据库。通过CodeFirst，我们摆脱了edmx文件，没有了繁琐的Xml关系映射，使代码变得无比的清晰，修改起来也变得更加容易。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">在前两篇文章中，我们的数据库都是通过反向生成的，也就是说，属于一个New Database（新数据库），那么，对于一个Exist Database（已存在的数据库），我们又应该怎么办呢？本节文章，我们将对 Code First to an Existing Database 做出讨论学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">本回合我们将讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、介绍使用&ldquo;Entity Framework Power Tools&ldquo; 工具</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、EF CodeFirst to Existing Database 的快速入门</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、了解&rdquo;Entity Framework Power Tools&ldquo; 工具为我们做了哪些事</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">案例代码可以点击</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://files.cnblogs.com/xiaodiejinghong/CodeFirstExistingDatabase.rar\">这里</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">下载</span></span><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、Entity Framework Power Tools 工具</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">在看完本节的导读时，也许你已经有了自己的一点想法：&ldquo;按照我的数据库结构，自己手写出一些对应的实体Model，然后再写一个继承自DbContext的上下文&hellip;&hellip;&rdquo;。没错，恭喜你，你的想法理论上确实是可行的，至少在表不太多的情况下是可行的。但是，如果这个数据库的表有很多呢，数目已经达到了上百个或者更多呢？明显的，我们如果想自己手写实体和上下文，那无疑是一件巨大的工程。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">既要懂得原理，也要懂得效率；我们要做某一件事，必须先要懂得它的原理，为什么要这么做，知其然知其所以然，所谓&ldquo;原理先行&rdquo;嘛。懂了了原理之后，我们需要提高效率，这在当今这个效率就是金钱的时代中尤为重要。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">不扯开话题，下面我为大家介绍一款工具，它的名字就是：&ldquo;Entity Framework Power Tools&rdquo;，它的可以实现，对数据库中已存在的表自动的生成相应的实体和上下文。这款工具的下载地址各位读者可以点击这里获得最新版的下载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">各位读者下载下来之后，双击打开安装，然后再重启Visual Studio实例，就可以使用啦。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、快速入门（快速案例）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们新建一个解决方案　</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902222132542.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">再看看我们的数据库，这里我采用上回合反向生成的数据库（由于VS自带的数据库管理器用起来速度太慢，我额外装了一个&ldquo;SQL Server Management Studio&rdquo;，数据库实例还是采用原先的轻量级数据库LocalDB，区别的仅仅是管理工具不同，数据库实例还是一样，各位读者不必感觉疑惑）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902222155297.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">右键点击解决方案，我们发现了一些新东西</span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902222215342.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">这就是我们刚才安装的EF工具，顺着点击进去，我们会弹出一个SQL Server的连接窗口，填写好相应的连接信息，点击确定</span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140902222235646.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">稍等一会儿，系统会自动的连接数据库，然后遍历所有的表，并根据表结构生成一些代码。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们可以看到，解决方案中多了一个&ldquo;Model&rdquo;文件夹，里面包含有上下文、一些Model、&ldquo;Mapping&rdquo;文件夹以及其下的Map文件（映射文件）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们先不解释里面的东西，先在Program中写调用代码，解释留到第三节再解析。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们在Program中写如下调用代码：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n    {\r\n        </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> db </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> CodeFirst_2013_3_23BlogContextContext())\r\n            {\r\n                Console.Write(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Enter a name for a new blog:</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> name </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Console.ReadLine();\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> blog </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Blog { BlogName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> name };\r\n                db.Blogs.Add(blog);\r\n                db.SaveChanges();\r\n\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> result </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">from</span><span style=\"color: #000000;\"> b </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> db.Blogs\r\n                             </span><span style=\"color: #0000ff;\">select</span><span style=\"color: #000000;\"> b;\r\n                </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> item </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> result)\r\n                {\r\n                    Console.WriteLine(item.BlogName);\r\n                }\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">F5，调试：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902222335329.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">可以正常执行（上面那个小蝶惊鸿是上回合CodeFirst操作中遗留下来的数据）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、EF工具帮我们生成了什么</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">上一节我们是一个快速入门，这一节我们看看EF Tool帮我们生成了些什么代码。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902222415115.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">先看一下App.config</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_60321cb7-dfb1-4494-af5f-8ffacb5892bf\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">App.config</span> <img id=\"code_img_opened_60321cb7-dfb1-4494-af5f-8ffacb5892bf\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_60321cb7-dfb1-4494-af5f-8ffacb5892bf\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #008000;\">&lt;!--</span><span style=\"color: #008000;\"> For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 </span><span style=\"color: #008000;\">--&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">section </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"entityFramework\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"</span><span style=\"color: #ff0000;\"> requirePermission</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"CodeFirst_2013_3_23BlogContextContext\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Data Source=(localdb)\\mydb;Initial Catalog=CodeFirst_2013_3_23.BlogContext;Integrated Security=True;MultipleActiveResultSets=True\"</span><span style=\"color: #ff0000;\">\r\n      providerName</span><span style=\"color: #0000ff;\">=\"System.Data.SqlClient\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">startup</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">supportedRuntime </span><span style=\"color: #ff0000;\">version</span><span style=\"color: #0000ff;\">=\"v4.0\"</span><span style=\"color: #ff0000;\"> sku</span><span style=\"color: #0000ff;\">=\".NETFramework,Version=v4.5\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">startup</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">entityFramework</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">defaultConnectionFactory </span><span style=\"color: #ff0000;\">type</span><span style=\"color: #0000ff;\">=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">parameters</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">parameter </span><span style=\"color: #ff0000;\">value</span><span style=\"color: #0000ff;\">=\"v11.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">parameters</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">defaultConnectionFactory</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">entityFramework</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_60321cb7-dfb1-4494-af5f-8ffacb5892bf\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;configuration&gt;\r\n  &lt;configSections&gt;\r\n    &lt;!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --&gt;\r\n    &lt;section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" requirePermission=\"false\" /&gt;\r\n  &lt;/configSections&gt;\r\n  &lt;connectionStrings&gt;\r\n    &lt;add name=\"CodeFirst_2013_3_23BlogContextContext\" connectionString=\"Data Source=(localdb)\\mydb;Initial Catalog=CodeFirst_2013_3_23.BlogContext;Integrated Security=True;MultipleActiveResultSets=True\"\r\n      providerName=\"System.Data.SqlClient\" /&gt;\r\n  &lt;/connectionStrings&gt;\r\n  &lt;startup&gt;\r\n    &lt;supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.5\" /&gt;\r\n  &lt;/startup&gt;\r\n  &lt;entityFramework&gt;\r\n    &lt;defaultConnectionFactory type=\"System.Data.Entity.Infrastructure.LocalDbConnectionFactory, EntityFramework\"&gt;\r\n      &lt;parameters&gt;\r\n        &lt;parameter value=\"v11.0\" /&gt;\r\n      &lt;/parameters&gt;\r\n    &lt;/defaultConnectionFactory&gt;\r\n  &lt;/entityFramework&gt;\r\n&lt;/configuration&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">系统帮我们自动的填写配置信息，值得注意的是&ldquo;connectionStrings&rdquo;节点，这里配置了EF的连接字串，在初始化上下文的对象时，上下文的构造函数会默认的传入这里的连接字串。</span><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"CodeFirst_2013_3_23BlogContextContext\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Data Source=(localdb)\\mydb;Initial Catalog=CodeFirst_2013_3_23.BlogContext;Integrated Security=True;MultipleActiveResultSets=True\"</span><span style=\"color: #ff0000;\">\r\n      providerName</span><span style=\"color: #0000ff;\">=\"System.Data.SqlClient\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">进入&ldquo;Model&rdquo;文件夹</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">这里生成了一些实体类文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Post实体：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_3cc22a75-7205-4a2d-8c24-f59dde346f84\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Post</span> <img id=\"code_img_opened_3cc22a75-7205-4a2d-8c24-f59dde346f84\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_3cc22a75-7205-4a2d-8c24-f59dde346f84\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Post\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> PostID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Title { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Content { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> BlogID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">virtual</span><span style=\"color: #000000;\"> Blog Blog { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_3cc22a75-7205-4a2d-8c24-f59dde346f84\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    public partial class Post\r\n    {\r\n        public int PostID { get; set; }\r\n        public string Title { get; set; }\r\n        public string Content { get; set; }\r\n        public int BlogID { get; set; }\r\n        public virtual Blog Blog { get; set; }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">Blog实体：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_706bfd47-f91c-4941-b4ff-c9b6568a9214\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Blog</span> <img id=\"code_img_opened_706bfd47-f91c-4941-b4ff-c9b6568a9214\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_706bfd47-f91c-4941-b4ff-c9b6568a9214\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Blog\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> Blog()\r\n        {\r\n            </span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.Posts </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> BlogID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> BlogName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Url { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">virtual</span><span style=\"color: #000000;\"> ICollection</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_706bfd47-f91c-4941-b4ff-c9b6568a9214\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    public partial class Blog\r\n    {\r\n        public Blog()\r\n        {\r\n            this.Posts = new List&lt;Post&gt;();\r\n        }\r\n\r\n        public int BlogID { get; set; }\r\n        public string BlogName { get; set; }\r\n        public string Url { get; set; }\r\n        public virtual ICollection&lt;Post&gt; Posts { get; set; }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Type实体：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_43a18975-304e-4e29-8930-f4dbcc944f41\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Type</span> <img id=\"code_img_opened_43a18975-304e-4e29-8930-f4dbcc944f41\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_43a18975-304e-4e29-8930-f4dbcc944f41\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Type\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> TypeID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> TypeName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_43a18975-304e-4e29-8930-f4dbcc944f41\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    public partial class Type\r\n    {\r\n        public int TypeID { get; set; }\r\n        public string TypeName { get; set; }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;User实体：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_939d04c1-51c6-4976-ada2-c48c22045a58\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">User</span> <img id=\"code_img_opened_939d04c1-51c6-4976-ada2-c48c22045a58\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_939d04c1-51c6-4976-ada2-c48c22045a58\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> User\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> UserName { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Display_Name { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_939d04c1-51c6-4976-ada2-c48c22045a58\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    public partial class User\r\n    {\r\n        public string UserName { get; set; }\r\n        public string Display_Name { get; set; }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">还有上下文类CodeFirst_2013_3_23BlogContextContext：</span></span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_0930f8d2-8a31-43a5-9326-d629a1c4a92a\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">CodeFirst_2013_3_23BlogContextContext</span> <img id=\"code_img_opened_0930f8d2-8a31-43a5-9326-d629a1c4a92a\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_0930f8d2-8a31-43a5-9326-d629a1c4a92a\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CodeFirst_2013_3_23BlogContextContext : DbContext\r\n    {\r\n        </span><span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> CodeFirst_2013_3_23BlogContextContext()\r\n        {\r\n            Database.SetInitializer</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">CodeFirst_2013_3_23BlogContextContext</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> CodeFirst_2013_3_23BlogContextContext()\r\n            : </span><span style=\"color: #0000ff;\">base</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name=CodeFirst_2013_3_23BlogContextContext</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)\r\n        {\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Blog</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Blogs { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Post</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Posts { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Type</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Types { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> DbSet</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">User</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Users { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n        </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">override</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Configurations.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> BlogMap());\r\n            modelBuilder.Configurations.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> PostMap());\r\n            modelBuilder.Configurations.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> TypeMap());\r\n            modelBuilder.Configurations.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> UserMap());\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_0930f8d2-8a31-43a5-9326-d629a1c4a92a\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">public partial class CodeFirst_2013_3_23BlogContextContext : DbContext\r\n    {\r\n        static CodeFirst_2013_3_23BlogContextContext()\r\n        {\r\n            Database.SetInitializer&lt;CodeFirst_2013_3_23BlogContextContext&gt;(null);\r\n        }\r\n\r\n        public CodeFirst_2013_3_23BlogContextContext()\r\n            : base(\"Name=CodeFirst_2013_3_23BlogContextContext\")\r\n        {\r\n        }\r\n\r\n        public DbSet&lt;Blog&gt; Blogs { get; set; }\r\n        public DbSet&lt;Post&gt; Posts { get; set; }\r\n        public DbSet&lt;Type&gt; Types { get; set; }\r\n        public DbSet&lt;User&gt; Users { get; set; }\r\n\r\n        protected override void OnModelCreating(DbModelBuilder modelBuilder)\r\n        {\r\n            modelBuilder.Configurations.Add(new BlogMap());\r\n            modelBuilder.Configurations.Add(new PostMap());\r\n            modelBuilder.Configurations.Add(new TypeMap());\r\n            modelBuilder.Configurations.Add(new UserMap());\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;该上下文构造方法调用了父类DbContext的构造方法，传入配置文件中的数据库连接字串来连接需要的数据库。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体;\">（反编译DbContext得知其构造方法实际上是重载的方法，我们可以传入多种的参数形式，这里我们不做过多的介绍）</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体;\"><img src=\"/Static/Images/140902223423869.png\" alt=\"\" /></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体;\">最后，我们进入&ldquo;Mapping&rdquo;文件夹</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体;\">里面包含的都是实体与数据库，属性与字段映射的关系文件，作用跟使用edmx文件时，那繁琐的XML映射作用是一样的，不过，采用CodeFirst方式生成的关系映射，代码都是C#语言的，并且看起来相当清晰，以后重构起来也比edmx的XML方便得多。</span></p>\r\n<hr />\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font: 14px/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">至此，本回合的CodeFirst to Existing Database已经讨论讲解完毕，个人能力有限，可能文中会有错漏的地方，欢迎各位朋友指正以及提出建议。</span></p>\r\n</body>\r\n</html>',1409696714009,1409698190019,16,6,'5,6',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">前两回合，我们讨论学习了如何采用Entity Framework在没有数据库的情况下自己写一些实体类，然后通过CodeFirst反向生成对应的数据库。通过CodeFirst，我们摆脱了edmx文件，没有了繁琐的Xml关系映射，使代码变得无比的清晰，修改起来也变得更加容易。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">在前两篇文章中，我们的数据库都是通过反向生成的，也就是说，属于一个New Database（新数据库），那么，对于一个Exist Database（已存在的数据库），我们又应该怎么办呢？本节文章，我们将对 Code First to an Existing Database 做出讨论学习。</span></p>',1409696714009),(22,'Linux.NET学习手记（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">不说太多了，我们直接进入我们讨论学习的话题吧,这里推荐几个Linux.net的学习地点：</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://www.imono.cc/\" target=\"_blank\">mono中国</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">，</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet大本营</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">，</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://blog.csdn.net/jexus\" target=\"_blank\">jexus Web Server 技术博客</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">。</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">同时，这里也推荐张善友先生的博客，那里有很多关于Linux.NET的文章。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">本回合，我们主要讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、什么是mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、为什么要用mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、如何在Linux中部署一个.NET的运行环境</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、部署时我们需要注意什么，以及对一些关键步骤的解析</span></p>\r\n<hr />\r\n<p><br /><span style=\"font-family: 宋体; font-size: 12pt;\">1、什么是mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">关于什么是mono，我想无论我怎么说，应该都不会比官方的解释，或者是百科更加详细；我这里就简单说吧，Java之所以能够跨平台运作，是依赖与Java的虚拟机JVM，而.NET之所以只能够在Windows中跑，同样是因为.NET运行需要依赖与Framework的Runtime（公共运行时），那如果能够在Linux同提供适合于.NET运作的环境（包括CLR等），那.NET也可以在Linux中跑起来了，这就是mono了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">2、为什么要使用mono</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">为什么使用mono，原因有很多，不过归结起来，我个人认为以下这是最重要的：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">（1）、作为服务器来说，如果能够实现一模一样的功能的，还是主推Linux。为什么呢？我列举了几个实例：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　首先，如果服务器需要打补丁，作为Windows服务器，你打完补丁之后必须重启，这一定程度上会对你的业务造成一定程度上的影响。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　其次，我们经常会听到Windows会中毒，特别是作为Web服务器和邮件服务器，我们不知道用户会给我们上传一些什么东西上来，相反，我们却很少会听到Linux中毒这么一个说法；这是由于Linux存在着太多的发行版本，不同版本之间编译后的软件无法相互调用，因此，如果能够感染A版本的Linux病毒无法感染B版本的Linux，这在很大程度上削减了病毒的危害性。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　再者，作为服务器，我们会尽量希望自己的系统更加的轻量化，更加的高效，和更加的稳定；Linux对于我们的要求，都提供了，我们可以定制的安装软件和服务，对于一些不必要的服务我们可以直接不安装（注意，是直接不安装，而不是安装之后再关闭），相反，如果采用Windows的话，一上来就啪嗒啪嗒的安装一大堆软件和服务，无论你用不用得上，先给你安装；也许这个可以让您的服务器充当更多的角色，但是我们更加希望服务器能够做到单一高效而不是面面俱到。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　最后，Linux运行对于硬件的要求比较低，这也是由于Linux抛弃桌面环境（作为服务器，我们不应该安装XWindow）和没有太多不必要的服务所决定的，而Windows则显得矜贵多了，硬件配置低一点还不一定能够正常运作。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">（2）、从成本考虑：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　一般部署在Windows中的.NET程序都是采用 &ldquo;Windows Server版本 + IIS + &nbsp;MS SQLServer&rdquo; 这确实是.NET的黄金组合，但是，值得遗憾的是，它们都是要收费的，系统要收费，数据库要收费；作为大企业来说，上千上万台服务器，如果都采用这种模式的话，那将是一笔巨额的开销；对于小公司，资金对于它们来说本就是一个难题，能省下来的基本上都希望省下来，如果放着一个能够达到相同功能而且免费的模式不用而采取这种付费模式，那太说不过去了。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　而如果我们采用mono，把.NEt部署在Linux中，我们可以采用以下的组合：&ldquo;Linux + mono + jexus（Apache/nginx +&nbsp;<span style=\"margin: 0px; padding: 0px;\">XSP2</span>）+ MySql(<span style=\"margin: 0px; padding: 0px;\">PostgerSQL或其他免费数据库</span>)&rdquo;，所有的这些无论是否开源（jexus不开源）都是免费的。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　作为老板，你会选择哪种呢？&nbsp;&nbsp;</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">3、mono环境的部署</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">介绍再多也不过是纸上谈兵，实战才是硬道理。工欲善其事必先利其器，要实操，还必须先要有这个环境，下面进入本回合的重点环节，Mono环境的配置。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">网上也有大量关于mono环境搭建的帖子，基本上都是搭配以下这两种类型的mono环境：以免费不开源jexus作为服务器软件的mono环境 和 以Apache（或nginx）作为服务器软件的mono环境，具体选择哪款环境读者可以自由选择。选择前者的，可以参考张善友先生的<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://www.cnblogs.com/shanyou/archive/2012/01/07/2315982.html\" target=\"_blank\">《32和64位的CentOS 6.0下 安装 Mono 2.10.8 和Jexus 5.0》</a>；而选择后者的读者则可以参考<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://www.cnblogs.com/aquilahkj/archive/2011/11/03/2234380.html\" target=\"_blank\">《CentOS 6.0 安装 MONO 2.10.8》</a>。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">这里我们就选择前者[选择的原因我打算放到下一回合再来说明]。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">版本选择，均选择当前所能下载的最新版本（需要下载的可以链接下载）：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">操作系统：<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://mirrors.grandcloud.cn/centos/6.4/isos/x86_64/CentOS-6.4-x86_64-bin-DVD1.iso\" target=\"_blank\">CentOS-6.4-x86_64</a></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">libgdiplus：<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://download.mono-project.com/sources/libgdiplus/libgdiplus-2.10.tar.bz2\" target=\"_blank\">libgdiplus-2.10.9</a></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">mono：<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://download.mono-project.com/sources/mono/mono-3.0.7.tar.bz2\" target=\"_blank\">mono-3.0.7</a></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">jexus：<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://www.linuxdot.net/down/jexus-5.2.3.tar.gz\" target=\"_blank\">jexus-5.2.3</a>（这里最新版其实是jexus-5.3.0 beta3，不过基于稳定性，我选择了最新的稳定发行版）</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902232208816.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902232234485.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">首先，先用Hyper-V虚拟机安装好系统，各位读者也可以选择用VM机或者其他虚拟机来安装操作系统，问题都不大。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">装好Linux系统之后，我们正式的来搭建mono环境，我们把需要的源码包都上传到Linux中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（1）、更新系统 yum update&nbsp;&nbsp; （这里我就不更新了，因为都是最新版的东西了）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（2）、通过yum安装编译mono所需要的库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;yum -y install gcc gcc-c++ bison pkgconfig glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel&nbsp; cairo-devel</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（3）、编译安装Libgdiplus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">tar jxf libgdiplus-2.10.9.tar.bz2</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">cd libgdiplus-2.10.9</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">./configure --prefix=/usr/local/mono/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">make &amp;&amp; make install</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">ldconfig</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（4）、安装mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">由于mono比较大，因此解压和编译安装都需要比较长的时间</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">tar jxf mono-3.0.7.tar.bz2</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">cd mono-3.0.7</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">./configure --prefix=/usr/local/mono/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">make &nbsp;（如果make过程中出现&ldquo;mcs not found&rdquo;的错误，执行&nbsp;make get-monolite-latest 后继续make）</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">make install</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">ldconfig</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">echo&nbsp; PATH=/usr/local/mono/bin:$PATH&gt;&gt;~/.bash_profile</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">source ~/.bash_profile</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">执行&nbsp; &ldquo; mono -V &rdquo;如果可以看到mono的版本信息，则表明编译安装成功</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902232404661.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（5）、安装jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">安装jexus比较简单，jexus安装分为全新安装和升级安装两种，由于我们这里是全新安装，所以只讲全新安装部分，升级安装可以阅读jexus中自带的readme文档，里面有详细介绍。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">tar xzf jexus-5.2.3.tar.gz</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">mv jexus-5.2.3 /usr/local/jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">cd /usr/local/jexus/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">./jws.regsvr</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">ln -s /usr/local/mono/ /opt/mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">至此，jexus就安装完毕了</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">输入操作 &ldquo;./jws.start&rdquo;启动服务器，输入网址XXXX/info，得到以下画面，表明全部安装成功。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902232445982.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、部署需要注意的事项与解释</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">上回合我们只是单纯的部署讲怎么部署mono，并没有对部署mono中每一步的作用做出解释，很多读者或许部署完了还不明白到底怎么回事，因此这回合我们就上回合的操作作出解释，并了解重点需要注意哪些事项。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（1）、部署 libgdiplus 时，执行最后一步是什么意思？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　上回合中，我们部署 libgdiplus 时执行了一步 &ldquo;echo \"/usr/local/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf&rdquo;，这一步的作用其实到了部署mono时，执行 ldconfig 才正式的发挥作用。由于我们部署libgdiplus 和mono没有部署到系统默认的/usr 中，因此系统是不会默认的到我们部署mono的文件夹中搜寻和读取里面的动态库文件，这时，我们需要在/etc/ld.so.conf.d/文件夹中，手动的添加mono动态库文件夹的地址，再执行 ldconfig 来让系统能够找到我们的动态库文件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（2）、部署mono后，执行 ldconfig 很重要</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">编译部署mono之后，我们会得到大量需要加载的动态库文件，而这些动态库文件，我们再下一步的时候就需要用到，因此需要让系统重新加载。（如果没有重新加载，有可能在部署jexus的时候会出现各种各样的问题）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（3）、部署mono之后，需要把bin目录的路径加入到环境变量PATH中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">原理跟安装完jdk之后，需要在环境变量注册是一样的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（4）、部署jexus需要执行注册</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">部署jexus的过程相当简单，只需要解压，然后把文件夹拷贝到我们想要它存放的目录就可以了，不过在此之后，我们需要注册全局程序集（./jws.regsvr），这个很重要</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（5）、为什么注册完jexus之后需要添加一个软链接</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">事实上，本来这个软链接是不会写上来的，因为之前部署mono时，注册完jexus了，服务就可以正常的跑起来了。但是这次不同，注册完之后，&ldquo;./jws.start&rdquo;之后，服务并没有起来，执行\"./jws.stop\"系统报了个notfoundXXX（找不到XXX）。于是用vi随便打开了其中的一个脚本，注意到了如下的代码：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902232530566.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">很明显，jws脚本哪里写有了寻找mono的搜寻路径，而恰好，我们部署的mono都不在这几个路径中，因此，jexus找不到想要的bin目录下的文件，所以就服务起不来或者报了个notfound。这时，我们只要在/opt/mono/ 中（当然Path中的任意一个都行，或者你也可以自己手动的一个一个脚本文件添加上mono的目录路径）添加一个软链接，把它链接到我们部署mono的目录下，jexus就能够顺利的找到想要的文件。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">好了，要讲的暂时就这么多，我们的Linux.NET环境就基本搭建起来了。各位读者此刻时候有一种跃跃欲试的感觉，如果有，欢迎您马上行动，纸上得来终觉浅绝知此事必躬行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">此外：由于本人对Linux.NET接触时间并不太久，手上也没有比较有效的资料，因此很多时候都是采取摸着石头过河的方式来学习研究，如果在讨论学习的过程中有任何错漏的，欢迎各位读者能够指正出来，同时，如果各位读者有任何的意见或者建议，也欢迎大家提出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><a href=\"/Home/Single/6617682\">下一回合</a>，我们将讨论学习：jexus作为Linux下基于mono的.NET服务器，其优势在哪？jexus的配置与特色功能，还有其中的一些注意事项与小技巧。</span></p>\r\n</body>\r\n</html>',1409699162130,1432655837907,2192,6,'7,8,9,10',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">Linux下面跑.NET程序，听起来有点疯狂，不过又是那么的有前途。Linux作为服务器，它的优势是不容置疑的，可以说类Unix系统（Linux、Unix&hellip;&hellip;）天生就是适合做为服务器的操作系统，它的稳定性、它的高效、它的低成本，这都是Windows所不能媲美的。</span></p>',1409699162130),(23,'Linux.NET学习手记（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/23823827\" target=\"_blank\">上一回合</a>，我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯，聪明的读者一定猜到了本回合要讨论学习的内容，对了，本回合我们讨论学习的内容就是：服务器软件Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 由于Jexus需要讨论学习的知识比较多，为此我会把Jexus分开两个回合来讲解，分别是这个回合对于Jexus的一些概念性和基础配置的讲解，以及下一回合Jexus网站配置高级功能的演示与讲解。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合我们一起讨论学习的内容：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、对Jexus的概念性理解：什么是Jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、对上回合搭建环境时所遗留的问题进行辨析：为什么要选择Jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、Jexus的基本操作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、Jexus的整体配置</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（5）、介绍并使用Jexus的进程守护工具jws.guard&nbsp;</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、什么是Jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; &ldquo;孔子门徒三千，成名七十二&rdquo;，世界上存在着各种各样不同类型的服务器软件，当然也包括你当时写来玩玩没有发布的那款，而在这众多的软件中，比较著名的有：IIS、Apache、Nginx、LIgHttpd等。而Jexus作为这众多服务器软件的其中一员，现在的排名应该就是这三千名中的第七十三名，也就是还没&ldquo;成名&rdquo;的那一位。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 的确，Jexus并没有出身在贵族之中，它没有像IIS一样拥有一个有钱有势有技术的托拉斯父亲帮它修饰与推广，也没有像Apache服务器软件一样成为&ldquo;Apache基金会&rdquo;的顶级项目被世界所认知，同样也没有像LigHttpd一样拥有高贵的普鲁士血种成为大家的新宠。百度百科中对于Jexus的介绍也只有仅仅的那么几行，（至写本文章为止）维基百科中直接就找不到Jexus的存在，很多读者对于Jexus还是比较陌生的，对于Jexus的认知或许也仅仅是&ldquo;这东西可以在Linux中跑.NET&rdquo;，甚至直接就不知道有这么一款软件存在。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 孔子的弟子中，虽然只有七十二名的弟子被成为贤人，但是，谁又能说第一百七十二名就不是贤人呢？第七百二十名弟子就不优秀呢？在这剩下的两千多人中，其中也有很多弟子是很优秀的，只不过由于种种的原因而没有被其他人称作&ldquo;贤人而已&rdquo;。最近这两天，我跟群主（Jexus的作者）聊了不少东西，咨询了不少关于Jexus的情况，同时也感谢作者对我的一些ASP.NET的知识进行科普和扫盲，通过对Jexus的讨论，我体会到Jexus确实是一款优秀但却没太高名气的服务器软件，也就是那一位&ldquo;优秀而没有成名的弟子&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;&nbsp;&nbsp; 用一句话介绍Jexus：Jexus是一款国产的基于.NET环境的有条件开源的免费的Web服务器软件，目前支持的平台有：Linux、FreeBSD和龙芯（旧版的海支持Windows），由作者（宇内流云）一人独力开发并长期维护，官方的论坛为：</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://www.linuxdot.net/\" target=\"_blank\">Linux DotNet 大本营</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">。</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们在看看Jexus有那些功能特点（摘抄自Jexus说明书）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、高性能的ASP.NET处理能力。这是Jexus的核心功能。不管是稳定性、易用性还是并发承载能力、并行处理速度，Jexus对ASP.NET的支持都是非常优秀的；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、支持Fast-CGI。通Fast-CGI，Jexus能支持包括PHP在内的所有拥有Fast-CGI服务功能的WEB应用；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、具备基于正则表达式的强大的URL重写功能；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、具有强劲的反向代理功能。支持多目标负载均衡，支持本地网站与远程网站无缝整合；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（5）、拥有强大的流媒体支持能力，支持FLV/F4V视频文件拖动播放，支持微软平滑流媒体技术；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（6）、支持&ldquo;服务器推送&rdquo;技术，配备了相应的服务器端、客户端开发接口，是开发现代WEB应用的利器；（注意，此功能在5.3版中已经除去，待到HTML5成熟并且大多数浏览器支持之后才重新推出）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（7）、具备可控的&ldquo;ASP.NET前置缓存&rdquo;，能最大限度地提高ASP.NET网站的承载能力和响应速度；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（8）、支持Https，具有SSL加密数据安全传输能力；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（9）、具有基础而实用的入侵检测功能，能自动终止已被识别的非法请求；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（10）、安装部署非常简便，操作使用极为简单。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus凝聚了作者的智慧和心血，针对当前Linux.NET服务器软件的不足实行有针对性的开发，因此是为.NET量身定做的一款服务器软件，再加上它所拥有的丰富的功能，确实是一款不错的软件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、为什么选择Jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上回合，我们部署mono时，我们选择了Jexus作为服务器软件，同时也遗留了一个值得我们讨论的问题：为什么我们选择Jexus作为服务器软件而不是其他？下面我将会 通过两个主要方面的比较来推演出我们选择Jexus的原因：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（1）、Windows 与 Linux 服务器软件的对比</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在上一回合的文章中，我阅读了所有读者给我的留言，其中有不少留言比较有趣的，当中有那么一则留言：&ldquo;.NET在Linux中跑效率和稳定性要比在Windows Server 2003 中要好&rdquo;，这时我就纳闷了.NET在WinServ03中还跑不过Linux？在自家做的环境中还比不上他人做的？此外，我也在Jexus的作者中得出那么一则消息：&ldquo;在相同的物理环境中，IIS 6.0 跑不过 Jexus 4.X&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902235658691.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902235704600.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上面的两幅图片是作者提供的关于IIS6.0 与 Jexus 4.3的简单性能测试，明显的看出Jexus 4.3的负载能力要比IIS 6 要强。当然，对于这片面的简单测试是远远不足以判定Jexus就比IIS性能强悍的，这需要通过更多更严格的系统性的测试，而且还要通过长期的实际使用才能对它们之间的性能对比作出判定。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同时，我这里还要重申一点：&ldquo;IIS 绝对是一款性能优异的服务器软件&rdquo;，至于为什么会出现IIS跑不过Jexus的这种情况（这里的讨论仅限于图中的这两个版本的对比，对于新版的IIS与Jexus，这里不作讨论），我想其中的原因更大是由于运作的平台中的不同。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; IIS运行在Windows中，而Jexus则运行在Linux中，他们运行在不同的平台中，通过对比平台的差异，或许能够更容易的得出它们的差异。IIS6.0的性能低下（相对于Jexus4.3）很大程度上是由于Windows系统的拖累，为什么这么说？各位读者如果有兴趣的话可以右键点击计算机（我的电脑），然后打开它的服务列表，看看那庞大的列表中共有多少个服务，又有多少个服务是正在运行的（我刚刚自己手数了一下自己的电脑，共有178个服务，运行中的有92个，这里是普通系统，Server版本的当然没有这么多）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902235733214.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这众多的服务当中，各位读者能够认得多少个呢？又是否能够清楚的说出每一个服务是干嘛用的呢？我相信各位读者应该没有认得出多少个，在这众多正在运行中的服务，很多都是为Windows系统提供一些体验性的功能，我们即使关闭了也对系统的影响不大，这些服务虽然可有可无，但是在我们安装系统的时候却会自动的给我们装上，并且默认的开机运行，运行就意味着系统需要从CPU消耗计算能力，需要从内存中划分出空间，这都是会浪费我们服务器的资源的。相反的，我们再看看Linux，在安装系统的时候就可以定制软件包，定制服务，我们可以选择最小化安装，也可以只安装我们需要的服务，对于我们不需要的服务，我们可以完全的无视之。还记得一位做服务器管理的老师曾经说过：&ldquo;对于运行的服务器，我们希望越轻越好，提供的服务越单一越好，开启的服务越少越不容易出错&rdquo;。我们回过头来看Windows，不免会觉得：&ldquo;Windows，你太重了&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 此外还有一点更重要，对Windows性能影响更大的，那就是Windows的图形界面。图形的处理会消耗大量的系统资源，而Windows在维持它的系统界面过程中就需要浪费服务器中大量的宝贵资源。我一直有这么一个观点：&ldquo;Linux是不应该存在图形界面的&rdquo;，同样，Server版的操作系统也不应该存在图形界面，正规的服务器是要被关在机房的，图形界面做得再好，画面再好看也不会有人去欣赏，尽管WinServ03的界面一点都不美观，但是丑归丑，维持这个界面还是要消耗大量的系统资源，安装CentOS6.4时内存如果没有1G，那图形的安装界面还起不了来，可见图形界面需要消耗多少的资源。同时，如果你是通过远程登陆到机房的服务器进行管理，网络问题同样会成为图形界面推送的一个瓶颈问题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 就这样，过多的服务，加上万恶的图形界面，服务器在真正投入生产之前已经浪费了一笔珍贵的系统资源，相同物理配置的服务器，看似配置相同的环境，实际能够提供给服务器软件支配的系统资源却不同，IIS 6.0跑不过 Jexus 4.3也不足为奇了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">（2）、同是Linux中.NET服务器软件的比较</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同时Linux中，运行环境才是真正的相同，这个比Windows/Linux更有可比性。Linux中搭建.NEt环境除了mono+Jexus之外还有一种方式，那就是mono+XSP。XSP是一款.NET的解析容器，它能够对.NET程序进行解析并维持高效的运行，但是它却有一个缺点，就是对于静态资源的处理能力相当有限，而一个网站中，大部分都是图片、CSS、JS等静态文件，真正动态生成的东西并不多，在这种情况下XSP就会暴露出它的软肋，面对这种情况，XSP一般都会整合一个高效的服务器软件进行弥补它的不足。类似于Tomcat+Apache的这种情况。这就衍生出了：网上提供的搭建Linux.NET的另外一种方式Linux+Apache（Nginx）+mono这种方式，它们在Apache（Nginx）和mono之间都会有一个插件，原理实际上就跟XSP一样。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里推荐一篇文章：《为什么说Jexus更适合打造基于Linux/Unix系统的企业级 ASP.NET平台》，该文章是Jexus的作者写的，里面有比较详细的对比了Linux采用Jexus的好处。阅读完这篇文章之后，相信读者也会明白为什么上回合搭建环境的时候直接选择了Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">最求更稳定，性能更优秀，效率更高，这就是我们选择Jexus的原因。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、Jexus的操作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 经过两个章节关于Jexus的介绍，相信读者对于Jexus已经有了一个概念上的认识，从这个章节开始，接下来我们会对Jexus的使用进行实操，并通过操作Jexus时产生的现象进行讨论，从而进一步的了解并学会使用Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Linux软件包有一个做得非常好的地方，那就是对于这款软件的使用手册、帮助文档往往都会存在软件本身之中，像&ldquo;有问题问男人&rdquo;（man命令）、&ldquo;--help&rdquo;等命令都能够提供快速的使用方法查阅，同样，关于Jexus的使用方法我们也可以通过Jexus软件包中的&ldquo;readme&rdquo;查阅得到。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先看一下Jexus目录中有些什么东西：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140902235835765.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 里面也没有什么东西，包括四个文件夹（蓝色那种），六个脚本文件（绿色那种）和一些的其他文件（白色那种）。在这个章节里，我们介绍的是Jexus的操作，实际上就是对于Jexus脚本的操作和介绍。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus提供了六个操作脚本（针对5.3之前的版本,5.3版本已把所有jws脚步融合到jws中，使用方法为./jws 参数），他们的名称和功能分别是：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　jws.start: 启动Jexus；(如果需要开机自启动的，可以把脚本的全路径[包括脚步本身]添加到/etc/rc.local中；5.3中已改为：jws start)</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　jws.restart: 重启Jexus，如果命令后边加网站名作为参数，那么就表示启动或重启指定的网站；（5.3中已改为：jws restart）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　jws.stop: 停止Jexus，如果命令后边加网站名作为参数，那么就表示停止指定的网站；（5.3中已改为：jws stop）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　jws.regsvr: 注册jexus所需要的全局程序集（本命令只在安装或更新jexus后才用，而且必须用；5.3中已改为：jws regsvr）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　state.start: 启动Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　state.stop: 停止Jexus提供的ASP.NET状态服务；（该脚本在Jesux 5.3 中已经除去，Jexus默认开启）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　此外，5.3中还增加以下功能：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　　　jws status：检查Jexus的运行状态</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　　　jws -V：查看Jexus的版本　　　</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 操作方法跟运行普通脚本一样./XXX，没有多少技术含量。这里值得注意的是，这些脚步文件的拥有者应该保证是root用户，并且有运行的权限。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、Jexus的配置</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus的配置分为两个方面，一个是Jexus整体的配置（jws.conf），另外则是网站独立的配置（默认所有的网站配置文件都在siteconf文件夹中）。网站的独立配置可以调用很多Jexus的高级功能，我们把它当到下一回合再进行学习讨论，本章中我们主要进行Jexus的整站配置。我们用vi打开jws.conf看看里面有些什么设置项：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903000105208.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我解析一下每个选项的作用和注意事项：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （1）、SiteLogDir：这个设置项必须得存在并且开启，该设置项设置Jexus的运行日志记录、各网站运行的日志记录都会存放到该文件夹中。此外，当记录的日志文件大小达到一定程度的时候，Jexus会自动的把日志写到一个新的日志文件中，不会一直通过追加写的方式把所有的日志记录都写到同一文件中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （2）、SiteConfigDir：这也是一个必须存在并且开启的设置项，这个设置项设置Jexus中各网站配置的存放地点，Jexus中默认的网站配置之所以存放在siteconf就是因为这里默认的值就为siteconf。此外值得注意的是，存放在该配置文件夹中的文件只能是网站的配置文件，其他任何的文件都不能存到到该目录（包括网站配置文件本身的备份文件），因为Linux系统所有的事物都是以文件的方式作为存储，因此无论你采用什么样的后缀，在Linux系统中都只当作普通文件来对待。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （3）、Runtime：该设置项用于配置Runtime的版本，除非有特殊需求需要改动Runtime的版本，一般情况下无需修改。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">再来看一下一些高级点的设置项，这些设置项都是默认关闭的，</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （4）、LLVM：是否开启LLVM编译器功能。开启LLVM可以把中间语言的编译交给LLVM编译器，这可以加快编译的速度，编译出来的代码性能或许会更优秀一些。不过值得注意的地方：并不是所有的Linux都带有LLVM编译器，并且mono自带的编译器编译效率和编译生成的代码性能上也不差什么，因此如果没有特殊的需要，这一项可以让他保持默认关闭。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;&nbsp;&nbsp; （5）、httpd.processes：Jexus中默认的工作进程为1个，单个进程最大的并发数固定为1万个，通过开启多个工作进程可以提高Jexus处理并发的能力，开启多个进程的方式非常简单，只要修改httpd.processes的值并重启Jexus即可。不过这里有几点需要注意的地方：[1]Jexus最大支持的工作进程为4个，因此这里最大只能填写4；[2]如果开启了多个Jexus的工作进程，请注意网站的Session的保存方式，请通过修改网站config文件来修改Session的保存方式，避免采用进程的方式保存Session，否则将会造成Session的不同步，给网站的运作造成不必要的麻烦，Session的保存可以借助第三方的方式来保存（比如数据库，或者Jexus提供的强大的ASP.NET服务状态保存）；[3]Jexus工作进程的设置跟服务器的CPU内核数和内存数有关，如果你的Cpu只有一个核，而你配置开启了两个进程，也只能达到一个容错的效果，能够承载的并发数是不会上去的。详细可以参考文章</span><a style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 0px; padding: 0px; color: #5a5a5a; text-transform: none; text-indent: 0px; letter-spacing: normal; text-decoration: underline; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\" href=\"http://www.linuxdot.net/bbsfile-3125\" target=\"_blank\">《让Jexus支持高并发请求的优化技巧》</a><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">。</span></span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （6）、httpd.user：不知道各位读者用过Apache没有，在Apache中的httpd.conf有这么一项设置user=XXX：可以把Apache以某个用户的方式启动，相应的该用户的所拥有的操作权限都会赋给Apache进程。同样，httpd.user的作用也是跟Apache中的user是一样的，只要把一个已有的用户的用户名填写到httpd.user中，Jexus就会拥有该用户的操作权限。有什么用？嗯，举个例子吧，如果网站的运行会产生一些新文件的（比如做页面静态化），各位读者会采用什么办法解决呢？chmod 777？这可以解决，但是把目录的权限设置为777会存在安全性的问题，如果可以有一种解决方案：进程和某些用户可以对该目录进行读写操作，而其他用户不能，那就可以解决安全性问题了。嗯，对的，这个时候httpd.user就派上了用场，我们只要创建一个仅能供某个用户读写的目录，并把此用户的用户名填写到httpd.user中，就可以实现我们想要的功能了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （7）、php-fcgi.set：此功能是用于让Jexus支持PHP，由于这里与.NET关系不大，这里就不做过多的介绍了，需要了解的读者可以参照这篇文章<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://www.linuxdot.net/bbsfile-3132\" target=\"_blank\">：《让Jexus V5.1支持PHP的操作步骤》</a>。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （8）、CertificateFile 与 CertificateKeyFile：这个是让Jexus支持SSL的配置项，是用方法可以参照文章：<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://zhumeng8337797.blog.163.com/blog/static/10076891420104654343279/\" target=\"_blank\">《Linux+Apache安装生成配置SSL证书》</a>和<a style=\"margin: 0px; padding: 0px; color: #5a5a5a; text-decoration: underline;\" href=\"http://www.linuxdot.net/bbsfile-2970\" target=\"_blank\">《如何让jexus 支持ssl》</a></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这八大Jexus的网站配置中，有一个终极的注意事项：每次配置后记得重启Jexus，否则刚才的配置是不会生效的！！！</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">5、Jexus进程守护工具jws.guard</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 一个运行中的进程，难免会因为各种各样的原因无缘无故的宕掉（比如网站瞬间的负载过高、内存不足等），而Jexus宕掉的后果往往只有一个：对外提供服务的网站无法访问了。因此，我们需要最大限度的保障我们的网站能够提供7*24小时的不间断访问，而一个网站或者一个进程宕掉的过程是瞬间的，也许前一秒还访问得好好的，下一秒就突然间报个404的错误，而从网站或进程挂掉到我们人工的发现并重启服务的过程是漫长的，除非该网站有应对单点故障的解决方案，否则在这漫长的时间之中，网站都处于一个无法访问的黑色时期。如果这个宕掉的网站是一个企业网站，这会造成企业信誉度的下降；如果是一个商城网站，这会造成经济和人气的损失；因此，我们需要让系统能够自动的检测出网站的运行状态，当出现进程服务死机的时候能够自动重启。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; jws.guard的是一个python的脚本，工作原理也比较简单：根据设置好的预设值，每隔十秒钟访问一次访问一次指定的端口与文件，当三十秒内出现无法网站时就执行jws.restart进行重启网站。这里的三十秒指的是累计连续三次无法访问，防止因为检测时因为Jexus正忙而误判断重启，对网站进行误伤。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; jws.guard的使用方法也比较简单，只要把 &ldquo;tools/jws_guard&rdquo; 目录中的 &ldquo;guard.py&rdquo; 和 &ldquo;jws.guard&rdquo; 两个脚本文件拷贝到Jexus的工作目录（跟jws.start同一目录），然后配置一下jws.guard 中的预设值即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们首先把这两个文件拷贝出去</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cd /usr/local/jexus/tools/jws_guard/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cp jws.guard guard.py /usr/local/jexus/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cd /usr/local/jexus/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们已经把这两个脚本拷贝到工作目录中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903000346546.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;&nbsp;&nbsp; 用vi打开并编辑jws.guard</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903000351399.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把host、port、path改为我们需要的配置即可，它们分别代表主机地址，端口，检查的路径。一般情况下，如果Jexus采用80端口，这里可以不作修改直接使用，而如果Jexus采用的不是80端口，也只需要修改port，改为正确的端口并保存退出就可以了。host和path一般是不需要修改的，同时也不建议非必要的修改，因为修改jws.guard必须确保修改后修改的配置项是正确的，否则jws.guard就会因为无法访问配置后的网站而反复的重启Jexus，造成不必要的麻烦。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 修改好了之后只需要执行./jws.guard即可启动这款Jexus的进程守护工具。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp;我们尝试性的把Jexus关掉。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903000638650.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&hellip;&hellip;30秒之后&hellip;&hellip;</span></p>\r\n<p><span style=\"font: 12pt/24px 宋体; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140903000647388.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Jexus又起来了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过jws.guard守护守护工具，我们可以很方便的让系统自动的发现Jexus进程宕机并快速的重启进程。同时我们只需要查阅Jexus的运行日志即可发现问题所在。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里有三点需要提醒的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、如果需要关闭Jexus服务30秒以上的，请在关闭Jexus之前先执行./jws.guard stopg关闭jws.guard守护工具，以免守护工具自动的把Jexus又启动了起来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、jws.guard是使用python语言编写的脚本，需要运行该工具时请确保系统中已经安装了python，检查方式可以执行 python -V ，如果没有出现python的版本信息则说明系统中没有安装python，这是，各位读者可以通过yum或者其他方式安装上python之后再运行jws.guard。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、再啰嗦一次，配置jws.guard时请确保配置的值是正确的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">新版的Jexus的稳定性已经非常强，加上jws.guard可以起到加固作用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，至此Jexus的守护工具jws.guard就已经介绍完毕了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里补充一点，高版本的Jexus已经把此工具从版本包中剔除，相信是因为高版本的Jexus中抗压能力有了更大的提高，因此作者也放心的将jws.guard移除。如果各位读者想保留功能的，可以下载一个之前版本的Jexus（可以在第一篇的学习手记中找到下载地址），然后在里面把此脚本提取出来使用。【补充于：2014/03/29】</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此为止，本回合对于Jexus的基础讨论已经全部讲解完毕了。希望各位读者在阅读完本回合的文章之后能够对Jexus有一个基础性的了解，同时，如果各位读者有发现本回合中任何知识点的错漏、对本文章有任何的意见或者建议、对Linux.NEt的发展有任何的见解，都欢迎留言指教。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/10035973\">下一回合</a>，我们将会对Jexus的高级功能：访问IP过滤、服务器的高速缓存、URL重写等功能进行深入的讲解并逐一的演示，同时，也希望没有搭建好Linux.NET的读者能够把环境搭建好，因为下回合所有的演示都是基于这个环境来进行实操。好吧，我们下回再见吧.</span></p>\r\n</body>\r\n</html>',1409701945238,1409779580985,560,6,'7,8,9,10,11',0,1,0,'<p><span style=\"font-family: 宋体; font-size: medium;\">我们讨论学习了如何在Linux环境中搭建能够供.NET运行的环境，不知道各位读者是否已经完成了环境的搭建？不过，无论各位读者是采用我们上回合介绍的方法还是采用网上提供的其他方法搭建Linux.NET环境，选择哪个发行版的Linux，采用了那个版本的mono，都有一点非常重要的，就是：必须保证.NET能够在这上面正常的运行，换句话说就是要确保搭建的环境能够正常工作。所谓&ldquo;三军未动粮草先行&rdquo;，今后所有关于Linux.NET学习实验都是基于该环境进行的，如果连这个环境没办法正常的运作，那我们今后Linux.NET的学习与实验将会变得困难重重，甚至是无法进行下去。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">好了，言归正传，当我们做好一个网站想要发布的时候，一般来说，我们都会把网站挂到服务器中，然后设置好服务器的公网IP、子网掩码、数据库的连接字串等相关参数，处于外网的用户就可以通过在浏览器地址栏中输入域名（如果有）或者直接输入IP地址的方式访问到我们的网站。而在这一连串发生的事件中，服务器软件充当了一个重要的角色，如果服务器软件无法正常的工作，处于外网的用户基本上是无法再通过浏览器的方式来访问你的网站的</span></p>',1409701945238),(24,'Linux.NET学习手记（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/17014035\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"/Home/Single/20083856\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好了不墨迹了，进入本回合的主题吧，本回合中，我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、NOFILE功能　　</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、Jexus的URLRewrite</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、Jexus如果做IP过滤</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　4、对目录访问禁止</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　5、Jexus如何使用反向代理功能</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　6、如何使用SendFile技术</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　7、Jexus的高速缓存</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　8、Jexus如何对静态资源进行压缩传输</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">0、新建一个网站配置</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这一章节是本回合的零章节，为什么叫零呢，是这样的，由于从我们实验的第一节开始，直到最后一节，它们都有一个共通点&mdash;&mdash;都是基于本节的基础上进行，换句话说，都需要本节的支持。并且，无论各位读者是否使用Jexus的高级功能，本节的配置都是必要的，因此本节的内容并不是Jexus的高级配置，而是网站运作的必要配置，本节也是一个Jexus高级的预备节。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上回合中，我们在讲解Jexus整体配置时，各位读者是否还记得jws.conf里面的配置项？如果不记得，不要紧的，各位读者可以翻开我们上一回的Linux.NET学习手记，里面有详细的Jexus整体配置资料。在上回介绍Jexus配置文件jws.conf时，当中有一个必要的配置项：&ldquo;SiteConfigDir&rdquo;，该配置项定义了Jexus的网站配置文件存放的目录地址。各位读者注意了，这里所说的网站配置文件不是指Web项目中的Web.Config，这里的配置文件指的是以某个网站项目为独立的单元，对此单元进行有针对性的Jexus高级功能配置。不知道各位读者是否使用过Apache，在Apache中可以有一个&ldquo;VirtualHost&rdquo;节点可以用来配置虚拟主机的，同样Jexus也可以配置虚拟主机，不过它不是像Apache中通过&ldquo;VirtualHost&rdquo;节点，而是通过存放在&ldquo;SiteConfigDir&rdquo;目录中的文件达到此功能，每一个文件就相当于Apache中的一个&ldquo;VirtualHost&rdquo;节点。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus中默认SiteConfigDir的配置为\"siteconf\"，为此我们进入到&ldquo;siteconf&rdquo;目录中，里面已经存在了一个缺省的配置文件&ldquo;default&rdquo;，我们用vi打开此文件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903204452180.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 该缺省文件已经包含了作者为我们提供的多项配置，其中包括三行处于运行状态（未注释的）和多行处于关闭状态（#号注释的）的配置项，聪明的读者应该又想到了：&ldquo;没有注释的一定是基础配置项，而加了#号注释的就是Jexus的高级功能&rdquo;。好棒！！答对了！！本回合Jexus高级功能的讲解说白了就是对处于关闭状态的功能进行介绍、实验演示和使用此功能时需要注意的事项进行讲解。而本节的内容则是对那三项必需项进行讲解。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 先来讲解一下这三项是干嘛用的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; port：很明显的意思&mdash;&mdash;端口，也就是Jexus监听的端口。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里注意了，Jexus不支持在同一网站配置文件同同时设置两个或者两个以上的监听端口，因此如果需要设置监听计算机多个端口的话，需要通过设置多个配置文件的方式来设置并监听多个端口。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;root：该网站根目录的位置。该配置项有两个参数需要填写，分别是前面的&ldquo;/&rdquo;，和一个空格间隔后的网站的网站目录的物理地址。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　这里我扩展一下，不知道各位读者是否知道Linux磁盘的挂载（mount），这里的作用跟磁盘挂载非常像，也是把某个文件目录挂载到Jexus中，成为一个网站目录，因此，第一个参数未必一定要填写代表根目录的&ldquo;/&rdquo;，是可以填写其他的，譬如&ldquo;/xiaodiejinghong/&rdquo;,但是这会造成一个问题，假设你网站的域名是&ldquo;majianle.com&rdquo;，而你&ldquo;host&rdquo;中的第一个参数填写了&ldquo;/xiaodiejinghong/&rdquo;，这时，你直接访问&ldquo;majianle.com&rdquo;是没办法访问到你的网站的，需要访问&ldquo;majianle.com/xiaodiejinghong/&rdquo;才能访问到你挂载的网站。这里还望各位读者多加留意。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">hosts：配置网站的域名，如果有的话；如果没有则配一个&ldquo;*&rdquo;。当这里配置了一个域名，譬如&ldquo;majianle.com&rdquo;，当用户访问&ldquo;majianle.com&rdquo;时，Jexus会自动的把访问映射到此配置文件中（前提你有很多网站）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下面，我就开始演示操作：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先新建一个目录，在/var/www/中新建一个&ldquo;xiaodiejinghong&rdquo;文件夹，并设置权限。关于权限的设置，各位可以采用acl或者其他授权方式进行授权，这里由于对安全性没有太大的要求，因此采用chmod 777 的方式授权。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903204617385.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 接着，我们从零开始，在配置文件存放目录中新建一个新的配置文件，名字也是&ldquo;xiaodiejinghong&rdquo;，再填入必要的参数，由于我们没有域名，所以host设置为&ldquo;*&rdquo;并且监听端口设置成&ldquo;8888&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903204626746.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出，重启Jexus（注意，所有的配置，在配置之后都需要重启Jexus）。在浏览器中输入网址，IP:8888/info,得到：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903204644224.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903204659790.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 证明我们的配置已经生效，已经完成Jexus网站的基础配置，可以正式的进入到高级讲解的第一节。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、Jexus的NOFile功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 当我们把做好的网站挂上服务器并发布，用户就可以正常的访问我们的网站，如果我们的用户中规中矩的使用我们的网站，网站是不会出现什么异常的情况的。但是，这种事情一般都不存在，用户们很大可能会输入一个错误的URL地址，此URL或许是因为用户的输入错误，或许是网站的变更造成地址失效，又或者其他各种各样的原因。面对这种情况，我们一般都会通过定制一个错误页（404或其他个性化的提示页面），当然这都是在写网站项目时通过.NET来完成。这里我推出Jexus的第一项高级功能&ldquo;NOFile&rdquo;，它的功能跟我们自定义404页面是一样的，也是通过检测用户请求的资源是否存在，不存在则自动的跳转到一个我们预设好的页面去。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我先开始我们的的实验，先定制一个&ldquo;NOFile&rdquo;的页面（404页面）：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_8f755a6d-5c6f-4cc8-a004-66d9b7cfdb39\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">404.html</span> <img id=\"code_img_opened_8f755a6d-5c6f-4cc8-a004-66d9b7cfdb39\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_8f755a6d-5c6f-4cc8-a004-66d9b7cfdb39\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">html</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">head</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">meta </span><span style=\"color: #ff0000;\">http-equiv</span><span style=\"color: #0000ff;\">=\"content-type\"</span><span style=\"color: #ff0000;\"> content</span><span style=\"color: #0000ff;\">=\"text/html; charset=utf-8\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    \r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">title</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">404</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">title</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        \r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">head</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">body</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">h1</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">这里是一个自定义的404页面</span><span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">是一个自定义的404页面h1</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">body</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">html</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_8f755a6d-5c6f-4cc8-a004-66d9b7cfdb39\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"&gt;\r\n    \r\n        &lt;title&gt;404&lt;/title&gt;\r\n        \r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h1&gt;这里是一个自定义的404页面&lt;/是一个自定义的404页面h1&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 然后我们在网站配置文件&ldquo;xiaodiejinghong&rdquo;中添加并设置&ldquo;NOFILE&rdquo;设置项：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903205255941.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出并重启Jexus，我们在浏览器中输入一个错误的URL地址，出现：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903205315952.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 使用方法如图所示的简单，只要写好NOFile页面的文件相对于网站根目录的位置就可以了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里值得提醒的就是此功能的使用情况，</span></p>\r\n<p><span style=\"font-family: 宋体;\"><span style=\"font-size: 12pt;\">　　</span><span style=\"font-size: 12pt;\">（1）、如果各位读者挂载的网站项目如果是MVC项目的话，请务必要关闭此功能。原因很简单，MVC中，URL的所请求的资源都不是真实的网站资源，而恰好&ldquo;NOFile&rdquo;功能就是根据URL中的请求对网站目录的资源文件进行遍历匹配，这就会造成这么一个结果，无论在浏览器地址栏中输入任何的URL地址，Jexus都会</span><span style=\"font-size: 12pt;\">因为找不到这个资源文件而重定向至一个预设的&ldquo;NOFile&rdquo;页面（404页面），使得我们的MVC网站失效。</span></span></p>\r\n<p><span style=\"font-family: 宋体;\"><span style=\"font-size: 12pt;\">　　（2）、&ldquo;NOFile&rdquo;功能与&ldquo;URLRewrite&rdquo;不能混合使用，这至少在当前的Jexus 5.23版本中是这样，可以说这是Jexus的一个Bug，如果各位读者有看Jexus自带的&ldquo;readme&rdquo;说明书的话，上面一定会写到一个小技巧是关于&ldquo;NOFile&rdquo;与&ldquo;URLRewrite&rdquo;混合使用的。但是很不巧的是，这个小技巧恰恰好存在一个Bug，当同时开启&ldquo;NOFile&rdquo;和&ldquo;URLRewrite&rdquo;功能时，Jexus会优先的选择&ldquo;NOFile&rdquo;功能，这就使得URLRewrite一直处于失效的状态，所有需要重写的</span><span style=\"font-size: 12pt;\">URL地址都被</span><span style=\"font-size: 12pt;\">Jexus认为是一个不存在的地址。（此Bug已经向Jexus的作者提交，相信在5.3之后的版本会修复）。</span></span></p>\r\n<p><span style=\"font-family: 宋体;\"><span style=\"font-size: 12pt;\">&nbsp;</span><span style=\"font-size: 12pt;\">&nbsp;</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、Jexus的URL重写</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; URL重写也叫URLRewrite，关于URLRewrite的详细介绍各位读者可以在百度百科中得到。简单说，URLRewrite就是对用户在浏览器中输入的URL地址（虚假的或者是经过改造的）在Web服务器中重新生成一个真实的URL资源路径。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; URLRewrite有以下的好处：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、提高Web网站的安全性。由于对外公布的URL都是经过一系列的改造的，需要在服务器中经过转换才能得到真实的资源访问地址，用户一般情况下不知道服务器中的网站真实的文件名和目录结构，并且经过改造的URL在传递参数的时候也是经过一定的改造，一般情况下会隐藏参数的名字，这都有助于提高网站的安全性，增大网站攻击的难度。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、使URL更加的美观。很多时候，我们的网站都会通过GET方法，通过冗长的QueryString的方式来传递信息，细心的读者应该会发现，GET方法传参的URL一般都会出现譬如：&ldquo;/XXX/XX.aspx?id=XX&amp;acc=XX&amp;pid=XX&amp;class=XX&rdquo;，在&ldquo;？&rdquo;后面出现大量的XX=XX&amp;XX=XX的信息，这样子用户体验度是不怎么高的，用户很多情况下希望的URL是一个简短而明了的URL，相反的我们却在提供这种又长又臭的URL，这不仅不美观，还会造成用户体验度的下降。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、便于搜索引擎的收录。&ldquo;Seo&rdquo;在最近这一段时间都非常热，各大站主们都在想方设法的让自己的站点能够更容易的被搜索引擎搜录，挺高他们网站的排名和权重。而spider（蜘蛛）在网站中爬行就是通过各种URL的链接进行的，因此URL成为了&ldquo;seo&rdquo;的一项非常重要的内容。通过URLRewrite，我们可以构造出各种容易被spider理解的URL，是网站更容易的被搜索引擎所收录，伪静态就是基于这个原理而提出的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在Jexus的URLRewrite使用的配置项是&ldquo;rewrite&rdquo;，它的重写是基于正则表达式的匹配重写，使用方法是&ldquo;rewrite=正则匹配并替换的URL&nbsp; 新生成的URL&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体;\"><span style=\"font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下面进行URL重写的实验：</span><span style=\"font-size: 12pt;\">&nbsp;</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 要求：我在我们的网站目录中放入两个静态的HTML文件，第一个HTML文件的文件名为：php.html，另外一个则为：aspx.html，现在要求当我在浏览器中输入的URL是以.php为后缀时系统自动的把URL重写并导向至php.html，同理，以.aspx为后缀时导向至aspx.html。</span></p>\r\n<p><span style=\"font-size: 12pt;\"><span style=\"font-family: 宋体;\">&nbsp;&nbsp;&nbsp; 首先，我们先新建这两个静态的HTML文件，并在里面填充好HTML代码</span>。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_4d5876c2-6b0a-41ae-8ab8-23a282ea4303\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">php.html</span> <img id=\"code_img_opened_4d5876c2-6b0a-41ae-8ab8-23a282ea4303\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_4d5876c2-6b0a-41ae-8ab8-23a282ea4303\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">content-type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n    \r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Php</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n        \r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">h1</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">你输入的是以</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">.php&rdquo;为后缀的URL&lt;/h1&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_4d5876c2-6b0a-41ae-8ab8-23a282ea4303\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"&gt;\r\n    \r\n        &lt;title&gt;Php&lt;/title&gt;\r\n        \r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h1&gt;你输入的是以\".php”为后缀的URL&lt;/h1&gt;\r\n    &lt;/body&gt;\r\n&lt;/html</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_c9d8a329-9df6-4790-b0de-bd572b93fd82\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">aspx.html </span> <img id=\"code_img_opened_c9d8a329-9df6-4790-b0de-bd572b93fd82\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_c9d8a329-9df6-4790-b0de-bd572b93fd82\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">content-type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n    \r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Aspx</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n        \r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">h1</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">你输入的是以&ldquo;.aspx&rdquo;结尾的URL</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">h1</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_c9d8a329-9df6-4790-b0de-bd572b93fd82\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"&gt;\r\n    \r\n        &lt;title&gt;Aspx&lt;/title&gt;\r\n        \r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h1&gt;你输入的是以“.aspx”结尾的URL&lt;/h1&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">然后我们需要在网站配置文件&ldquo;xiaodiejinghong&rdquo;中写我们的重写规则。　</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210147234.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">保存退出并重启Jexus。下面我们打开浏览器，分别输入一个以.php结尾和.aspx结尾的URL地址：</span></p>\r\n<p><img src=\"/Static/Images/140903210153542.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 成功的为我们的URL进行了重写，这里有几点需要补充和注意的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、Jexus的URL匹配是从上至下的，因此如果某URL在网站配置文件中恰好存在两个或两个以上可以正确匹配的情况，Jexus会选取最先匹配的那一项，也就是第一项。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、Jexus的URL只会替换存在且命中的那一部分，而不是整个URL的链接。这句话比较拗口，这里解析一下：比如我想把&ldquo;XX.com/xiaodiejinghong/&rdquo;中所有后缀为.aspx的URL都重写为&ldquo;xx.com/aspx.html&rdquo;，而我写的匹配规则却仅仅是：&ldquo;rewrite=.*\\.aspx$ /aspx.html&rdquo;（匹配所有.aspx结尾的URL），这时，Jexus帮你正则替换的仅仅是&ldquo;XX.aspx&rdquo;的这一段而不是整段URL，&ldquo;/xiaodiejinghong/&rdquo;并没有被替换和过滤掉，这就会造成新生成的URL为：&ldquo;XX.com/xiaodiejinghong/aspx.html&rdquo;，明显的，新生成的URL出现了错误，并没有指向到正确的资源文件。因此，各位读者如果要做URLRewrite，这里建议把整个URL进行匹配和替换，而不是采用局部替换的方式。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、关于参数问题的，如果各位读者类似伪静态的URL，即需要从URL中截取出相关信息，并还原成带参数形式的QueryStringURL的时候，可以通过使用正则的方式来获取，要得到获取的信息可以通过$n的方式来获得，这里的n指获取的元素的位置。例如：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210250163.png\" alt=\"\" /></span></p>\r\n<p><br /><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、配置之后必须重启Jexus，否则是不会生效的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、Jexus的IP封杀</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 有时候我们需要一些特殊的功能，对一些特殊的IP进行访问的过滤，不允许它访问我们的网站。作者非常贴心的在Jexus中也加入了ipdeny的这么一个功能，使用方法也是很简单的，只要在&ldquo;denyfrom&rdquo;配置项中配置上具体的IP或者是网段，就可以实现对IP或某个网段进行IP的封杀。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们把本机的IP和10.10.1.*的网段添加到网站的IP禁止列表中：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210630394.png\" alt=\"\" /></span></p>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出并重启Jexus，再来访问网站</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210636390.png\" alt=\"\" /></span><br /><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们的IP就被封杀掉了。</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、禁止访问某目录中的内容</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">此功能正像标题所说的那样，禁止对网站项目中某文件夹进行访问，配置的关键字为&ldquo;DenyDirs&rdquo;，这里没有什么需要多说的，我们直接实验好了：</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">在网站的根目录下建立一个新的文件夹&ldquo;le&rdquo;，并在&ldquo;le&rdquo;目录中添加一个新的HTML文件：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_02da08ef-7631-4e88-ac8e-f4684e447083\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">denydir.html</span> <img id=\"code_img_opened_02da08ef-7631-4e88-ac8e-f4684e447083\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_02da08ef-7631-4e88-ac8e-f4684e447083\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">meta http</span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\">equiv</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">content-type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> content</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">&gt;</span>\r\n    \r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">Denydir</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">title</span><span style=\"color: #000000;\">&gt;</span>\r\n        \r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">head</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n        <span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">h1</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">这是用于测试denyDir用的，如果你还看到此页面，证明此目录没有被屏蔽</span><span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">h1</span><span style=\"color: #000000;\">&gt;</span>\r\n    <span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">body</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #000000;\">&lt;/</span><span style=\"color: #000000;\">html</span><span style=\"color: #000000;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_02da08ef-7631-4e88-ac8e-f4684e447083\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;html&gt;\r\n    &lt;head&gt;\r\n        &lt;meta http-equiv=\"content-type\" content=\"text/html; charset=utf-8\"&gt;\r\n    \r\n        &lt;title&gt;Denydir&lt;/title&gt;\r\n        \r\n    &lt;/head&gt;\r\n    &lt;body&gt;\r\n        &lt;h1&gt;这是用于测试denyDir用的，如果你还看到此页面，证明此目录没有被屏蔽&lt;/h1&gt;\r\n    &lt;/body&gt;\r\n&lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们在修改配置文件之前先尝试访问：</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210726541.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">之后我们修改我们的网站配置文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210732347.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">保存退出，重启Jexus后再刷新页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903210903338.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">我们达到了我们想要的效果。</span>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">5、Jexus反向代理</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus中的一个重磅功能，就是它的反向代理功能。关于什么是反向代理，各位可以在百度百科、维基百科或者其他地方找到相应的详细资料。我就这么简单的给各位读者简单的讲解一下什么是反向代理吧：</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在讲解反向代理之前我们先讲解一下什么是代理。当我们在浏览器中设置好代理服务器的地址和端口号，就可以使用代理功能了，所谓的代理，就是当我们需要访问某个网站时，并不是由我们的来直接访问，而是把请求发给代理服务器，由代理服务器替我们完成网站访问的操作，并把该网站应答的数据反馈回来给我们的主机。举个例子，比如我们需要访问博客园中小蝶惊鸿的博客，当我们把正确的URL地址输入到浏览器的地址栏并敲回车，我们的访问请求会经过代理服务器，这时代理服务器会把我们的请求截留在服务器内，并在它自身启用一个处于非监听状态的空闲端口帮我们访问我们需要的网站，当代理服务器完成整个网站的访问的时候，它会把整个网站返回的页面内容原封不动的发回给我们的浏览器，于是我们就完成了访问小蝶惊鸿的博客这个动作。由于网络传输具有透明传输的特点，浏览器根本就不知道它是怎么得到这个请求应答的，并且它也不会管这个过程，对于浏览器来说，只要能够给用户完成需要的功能就没问题了。因此，代理就有点像接力赛一样，浏览器把请求的任务交给代理服务器，代理服务器完成了任务后把结果反馈回来给浏览器。</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 使用代理具有以下优势：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、突破IP的限制；由于访问经过代理服务器发送出去，因此在请求的数据包中，源IP地址是代理服务器的IP地址而不是我们主机的IP地址，只要代理服务器的IP具有访问权限，即使我们的主机Ip被封杀了也一样可以访问。各位读者FQ上YouTube和facebook就是通过此原理。</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、提高访问速度，由于代理服务器一般情况下就是一个代理缓冲服务器，在代理服务器内有一个巨大的缓冲区，它会对用户访问的网站的静态资源有一个短暂缓存，当下一个用户访问相同页面的时候，代理服务器可以直接从自身的缓冲区中取得资源并发送给用户而不必从外网重新下载一份，这不仅可以提高网站的访问速度，还可以节省不必要的带宽。</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、提高用户的安全性；由于通过代理服务器上网可以隐藏自身的真实IP，这一定程度上可以降低自身主机被直接攻击的几率。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 说完什么是代理，我们接着说什么是反向代理，反向代理的拓扑图恰好与代理相反。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211040651.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 我用Excel画了一个简单的反向代理的草图，当外网的用户输入网址并回车的时候，网站的访问请求就会通过公网转发到同样处于公网反向代理服务器中，反向代理服务器接收到来自公网的访问请求后它会把请求数据包的目的IP转换成私网的某台Web服务器的IP，然后该数据包通过交换机流入到相应的web服务器中，当网站的访问请求执行完毕之后，私网的web服务器会把应答通过交换机发回给反向代理服务器，反向代理服务器再把网站应答的数据包中的源IP从私网IP改回自己的公网IP并通过公网反馈给用户，完成用户网站的访问。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 使用反向代理最大的一个优点就是可以实现负载均衡。当网站的访问量很高或者需要进行很复杂的计算时，单台的Web服务器往往是无法承载这巨大的压力的，我们需要多台Web服务器来并行的运作，这时我们就可以通过反向代理的负载均衡来获得服务器性能的堆叠。当大量的访问请求到达，反向代理服务器通过轮询，把请求分派到各台Web服务器处理，代理服务器本身并不做任何的请求应答，仅仅是做数据的转发，相对于应答处理，数据转发对服务器的性能消耗要小很多，我们的网站也可以获得更大的承载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 此外，反向代理还可以是我们的网站更安全，我们可以在反向代理服务器中设置更多的安全设置，在恶意的访问到达Web服务器之前先进行拦截和封杀，提高Web服务器的安全和网站的稳定性。同时，通过反向代理我们还可以完成一些Web服务器软件无法直接支持的功能，比如Apache+Tomcat，静态资源有Apache直接处理，动态资源反代给tomcat。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在介绍完什么是反向代理，各位读者也对反向代理有一个基本的了解之后，我们接着来介绍Jexus的反向代理功能如何使用。为了做这个实验，我需要再添加两台的Linux虚拟机，由于由于这里用的Hyper-V并不是Server版的，因此并没有虚拟机复制的这么一个功能，因此我只能采取了一种非常暴力的方式，直接把CentOS的目录重复的拷贝两份，各位如果是安装Vm机的读者可以直接使用VM提供的复制功能，可以无需重复的安装Linux，并且磁盘的使用量也不会像我这种暴力方法一样成n的倍数增长，非常方便。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211118928.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 分别为复制的两台Linux（Servant）配上&ldquo;192.168.54.13&rdquo;和&ldquo;192.168.54.14&rdquo;（原Linux的ip为192.168.54.12）；并分别在两台Servant虚拟机的/var/www/defalut中新建目录&ldquo;reproxy&rdquo;并放入一个HTML文件。对于两台Servant，我就不建立新的网站配置文件了，直接的使用缺省的&ldquo;Default&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211124595.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211128640.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再在充当代理服务器角色的那台Jexus中进行&ldquo;reproxy&rdquo;的配置：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211157233.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存并重启Jexus，在浏览器中输入访问地址（192.168.54.12：8888/reproxy/reproxy.html）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211213934.png\" alt=\"\" />&nbsp;&nbsp;&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">Jexus已经把我们的请求轮询到&ldquo;reproxy&rdquo;配置项中登记的一台Linux中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;这里我简单的讲解一下Jexus的&ldquo;reproxy&rdquo;配置的使用方法和注意事项：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、使用方法非常简单，主要有两大参数需要填写，第一项是需要进行反向代理的目录，填入相应的目录之后，当有需要进入该目录的访问Jexus的反向代理功能就会被触发，对此访问进行转发；而第二项则是被代理的服务器的IP登记列表，不同的IP之间需要以逗号分隔，如果被代理的服务器不是开放80端口的，需要在IP后加上端口号，若被代理的服务器的目录不是根目录的，同样也只需要在IP（：端口）后再添加上目录即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、充当代理服务器的那台Jexus，它是不允许出现被代理的内容的，否则Jexus就无法把请求轮询到其他服务器中，直接就在本服务器中解决，使得反向代理失效。出现如下的这种情况：我在代理服务器中存在&ldquo;/reproxy/reproxy.html&rdquo;，当我访问&ldquo;xxxx/reproxy/reproxy.html&rdquo;时，Jexus没有进行数据转发，直接就把本机的&ldquo;reproxy.html&rdquo;返回给我。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">6、SendFile技术</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们做一个下载功能时，一般会采用以下这两种做法：对于没有下载约束、安全性要求不高的文件，我们会直接把文件放到网站的Public（共有的）目录中，然后将下载地址直接指向这个文件的物理地址即可；而对于一下存在下载条件限制的文件（比如需要付金币或者需要达到某种权限），我们会通过服务端程序操作IO流的方式，配合一些验证、付费等功能达到文件下载的目的。对于前一种下载方式，只要提供足够的IO和带宽，问题一般不会太大，但是对于后一种下载方式的网站，特别是需要承担频繁的大文件下载的网站，这就不是提供足够的IO和带宽就能够简单解决问题的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211558852.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我画了一个简易的草图，传统的下载方式提供文件下载时一般都会经历图中的这几项流程，文件先被系统从磁盘中读取到内核的缓冲区，然后再通过应用程序（这里指网站应用程序）把内核中的文件比特流拷贝到程序进程本身的缓冲区，最后再把保存在应用程序进程中的文件比特流拷贝到网卡的socket缓冲区，最后再把socket缓冲区中的文件比特流推送出去，发到用户中。可以看得出，通过传统下载方式实现文件的下载，用户每下载一个文件，在服务端该文件实际上是通过多次拷贝才能完成的，此外，如今有很多的用户不再使用浏览器提供的下载功能，而是采用一些专业的下载软件进行文件下载，这些专业的下载软件为了提高文件的下载效率，它们会开多个下载线程，通过多进程的下载方式来下载，这就意味着，每多开一个线程，服务端就要进行多一份的拷贝，特别是采用把整个一次读取进内存再推送这种暴力方式提供下载的，当下载线程开多了或者用户下载频率太高了，服务器上的内存资源很快就会爆满，造成网站无法正常的运作或者直接宕机，造成不必要的麻烦。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211645465.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; SendFile就是针对传统下载方式的不足所提出的一种下载技术，正如图中所示，SendFile技术可以把文件的比特流直接从内核的缓冲区中直接推送至网卡中，无需再经过网站应用程序拷贝这一过程，节省了不少的系统资源。此外，大部分的专门提供文件下载的网站都会把Web服务和文件服务分别部署在独立同步的服务器中，采用SendFile技术避开不必要的文件拷贝不仅可以使文件下载时对Web服务器的冲击大幅度降低，网站的稳定性提高；还可以减少服务器间的不必要信息传输，节省带宽。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 现在很多有名服务器软件都有提供SendFile功能，比如：LigHttpd、Nginx等，而Jexus同样提供此功能，名字略有改变&mdash;&mdash;&ldquo;X-SendFile&rdquo;，使用方法也不难，只要在Http头中添加并设置&ldquo;X-SendFile&rdquo;属性即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下面我们完成此实验：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在网站根目录中通过Linux创建一个100M大小的文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cd /var/www/xiaodiejinghong/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; dd if=/dev/zero of=./file.zip bs=1M count=100</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在Windows中创建一个网站，并写好我们的应用程序代码</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211748260.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">界面非常简单，仅仅只有一个Button，点击此按钮的时候就开始下载</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Button1_Click(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n{\r\n    Response.ContentType </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">application/octet-stream</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n    Response.AddHeader(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Disposition</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">attachment;filename=file.zip</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n    Response.AddHeader(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">X-SendFile</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/var/www/xiaodiejinghong/file.zip</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n    Response.End();\r\n}</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 点击Button后，文件就可以下载了</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903211855971.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里有两个注意事项需要注意的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、文件的位置采用的是系统的绝对路径，而不是相对于网站根目录的相对路径。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、此外还要注意文件存放目录的权限问题，文件必须要能够提供Jexus读的权限。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">7、前置缓存</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 对于访问量大并且页面变化周期不大的门户网站，为了提高网站访问的速度和提升网站承载的压力，我们会通过把网页内容进行静态化（文件级）或者缓存到内存（内存级）中，Jexus提供了一个性能不错的Web平台级别的页面缓存功能，使用方法也是非常简单，只要加入代码&ldquo;Response.AddHeader(\"PageCache-Time\",\"XXX\")&rdquo;，在HTTP头加入一个Jexus特有的属性并且设置缓存时间即可，这里的&ldquo;XXX&rdquo;是缓存时间，单位为秒。没有太多的难度，这里就不做演示了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">8、Gzip传输压缩</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者一定知道什么是压缩吧？没错，压缩就是通过各种算法处理一个文件，使这个文件在不影响内容的情况下对所需要占有的磁盘空间变小。压缩的好处同样不用我说各位读者也知道，说白了就是能够把文件变小，可以在相同大小的磁盘空间中存放更多的文件。同样的，我们在网络传输中也需要相同的技术，把文件压缩后，文件会变得更小然后再传输，这一方面可以减少网络传输中所消耗的流量，另外一方面还可以让用户消耗更少的时间就可以把文件下载下来，是一个一举两得的事情。各位读者细心的话可以发现很多涉及到网络传输压缩的事，比如你用JQuery做网站特效时，它就提供了Full版和Min版，调试时可以用Full版，真正上线后改为Min版；又或者各位读者手机中的浏览器，很多浏览器在设置中都有一个功能，就是使用压缩传输&hellip;&hellip;这一切的一切都是为了同一个目的：消耗更少的流量来传送相同的内容。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus提供了一个针对静态文件的压缩功能，使用的算法是目前比较流行的Gzip压缩算法。各位读者如果需要开启Jexus的Gzip压缩传输功能，则需要在相应的网站配置文件中开启该功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903212030199.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 开启了该功能后，原先的静态文件在推送出服务器网卡之前Jexus会对其进行压缩，下面两图分别是Gzip开启前和开启后某HTML静态文件的传输大小对比。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 开启前：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903212102476.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 开启后：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903212123863.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然在我们的实验中，这个HTML的传输大小只是缩小了0.01KB的大小，但是各位读者别产生这么一个念头：&ldquo;差别不大，没什么作用&rdquo;，因为一个网站并不是只有一个HTML文件的，网站中有大量的页面，而每个页面中也会包含大量的图片、Css文件、JS文件等静态的资源，用户每刷新一个页面都会伴随着大量的HTTP请求和网络的传输。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140903212200369.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 比如我打开了一下我个人的新浪微博，从页面开始加载到全部加载完毕浏览器就已经发起了几百个的HTTP请求，如果这些资源都经过压缩传输（当然是已经经过压缩的了），页面的加载速度将会提高，加载所需要的时间会减少，用户的体验也会更好。此外，对于像新浪这类的大网站来说，每日的访问量都是海量的，哪怕每次用户的页面访问流量减少那么0.1KB，每天网站的带宽流量花费也会节省非常大的一笔，毕竟流量就是钱呀。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好吧，本回合我们要讨论学习的就到这里了，不知道各位读者是否觉得看得有点晕？晕了？不要紧的，因为本文章已经连续写了8天，毕竟纯操作的文章是比较抽象和枯燥的，为了采用最通俗的语言，每一个章节都经历了&ldquo;写了删，删了再写&rdquo;，我自己也写得晕乎乎的，各位读者不明白的话可以多看几遍，再对一些知识点上网查查资料，问题应该不大。同时在这里再次感谢Jexus的作者对我不定时&ldquo;骚扰&rdquo;提供的帮助。此外，我希望各位读者在收看本文之余能够自己亲身的对Jexus的高级功能进行一次的实际操作配置，这样可以帮助各位更容易也更清晰的了解到Jexus里面的一些功能的要点和注意事项。最后，如果各位读者对本文有什么见解，或者有一些关于Jexus使用的技巧，也欢迎在留言板中分享一下。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/3401051\">下一回合</a>，我们将会学习如何在Linux中新建我们的.NET项目，好吧，我们下回见。</span></p>\r\n</body>\r\n</html>',1409777518908,1409954506778,399,6,'7,8,10,11',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"../../../Home/Single/17014035\">前一回合</a>，我们对服务器软件Jexus作了简单的介绍，同时我们也对Jexus的整体配置作了详细的讲解，介绍了Jexus的进程守护工具\"jws.guard\"，相信各位读者对于Jexus应该已经有或多或少的概念性认识。上回中说到，由于Jexus的知识点和功能比较多，因此我们打算分两回合的讨论学习，而在上回合中，我们已经完成了对Jexus的基础讲解，因此本回合将会在上回合的基础上，对Jexus的高级功能进行讨论学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本回合中，我们将会对Jexus中一些比较常用同时也比较有用的高级功能挑选出来进行讲解并演示。由于本回合中概念性的知识讲解并不多，主要以实际操作为主，为了降低各项功能之间的干扰，我会尽量的把每一个章节保持相对的独立，各位读者可以选择通篇阅读，也可以选择挑选需要的章节进行局部的阅读。此外，在开始实验之前，我还是再啰嗦一句，本回合的文章所有的操作都是基于我们搭建的环境进行的，如果有读者对环境的搭建不太了解，可以参照<a href=\"../../../Home/Single/20083856\">《Linux.NET学习手记1》</a>这篇文章完成环境的搭建，上面已经详细的写有搭建方法和注意事项。</span></p>',1409777518908),(25,'Linux.NET学习手记（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/16632085\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在今后我们将会把一些已经在Windows中写好的ASP.NET网站进行尝试性的向Linux迁移部署，看它们能否成功的从Windows向Linux迁移，迁移后是否满足我们的需求，当然，由于Windows和Linux终归是两种不同的系统，迁移的过程中会遇到各种各样的阻力，这需要我们的读者见招拆招，在不断的摸索中令我们的Linux.NET大军能够不断挺进。同时各位读者如有任何关于Linux.NET的心得体会，在Linux中部署.NET的技巧，欢迎各位读者进行分享；本文中如有不科学的地方，也欢迎各位读者留言指正。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正式进入到本回合的正题，案例代码可以点击<a href=\"http://files.cnblogs.com/xiaodiejinghong/Linux.NET_4.rar\">这里</a>下载：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本回合中，我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、在Mono中部署一个简单的在线加法器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、结合数据库，在Mono中部署一个简单的增删查改站点</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、在Mono中使用轻量的ORM&mdash;&mdash;PetaPoco</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、牛刀小试</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在进行各种大中小规模的.NET部署之前，我们先来进行一次的超小规模的.NET部署测试，让各位读者先体验一下在Mono中运行.NET网站是怎么一回事。当然，我们现在部署东西会比知名的&ldquo;Hello World&rdquo;高级一点，我们将要部署的是一个简单的CodeBehind加法计算器。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 针对本回合的所有实验，我们新开一个Jexus的虚拟主机:</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905220321568.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在Windows中的Visual Studio写一个简单的网站。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_0e495e09-8e0a-4d4f-acb2-dd7676be3f9f\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx</span> <img id=\"code_img_opened_0e495e09-8e0a-4d4f-acb2-dd7676be3f9f\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_0e495e09-8e0a-4d4f-acb2-dd7676be3f9f\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"background-color: #ffff00; color: #000000;\">&lt;%</span><span style=\"background-color: #f5f5f5; color: #000000;\">@ Page Language</span><span style=\"background-color: #f5f5f5; color: #000000;\">=</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #800000;\">C#</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #000000;\"> AutoEventWireup</span><span style=\"background-color: #f5f5f5; color: #000000;\">=</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #800000;\">true</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #000000;\"> CodeFile</span><span style=\"background-color: #f5f5f5; color: #000000;\">=</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #800000;\">Default.aspx.cs</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #000000;\"> Inherits</span><span style=\"background-color: #f5f5f5; color: #000000;\">=</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span><span style=\"background-color: #f5f5f5; color: #800000;\">_Default</span><span style=\"background-color: #f5f5f5; color: #800000;\">\"</span> <span style=\"background-color: #ffff00; color: #000000;\">%&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;!</span><span style=\"color: #ff00ff;\">DOCTYPE html</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">html </span><span style=\"color: #ff0000;\">xmlns</span><span style=\"color: #0000ff;\">=\"http://www.w3.org/1999/xhtml\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">head </span><span style=\"color: #ff0000;\">runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">meta </span><span style=\"color: #ff0000;\">http-equiv</span><span style=\"color: #0000ff;\">=\"Content-Type\"</span><span style=\"color: #ff0000;\"> content</span><span style=\"color: #0000ff;\">=\"text/html; charset=utf-8\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">title</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">title</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">head</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">body</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">form </span><span style=\"color: #ff0000;\">id</span><span style=\"color: #0000ff;\">=\"form1\"</span><span style=\"color: #ff0000;\"> runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">div </span><span style=\"color: #ff0000;\">style</span><span style=\"color: #0000ff;\">=\"background-color:pink;height:40px;width:600px;padding:10px;\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">asp:TextBox </span><span style=\"color: #ff0000;\">ID</span><span style=\"color: #0000ff;\">=\"Addend1\"</span><span style=\"color: #ff0000;\"> runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">asp:TextBox</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">  +\r\n        </span><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">asp:TextBox </span><span style=\"color: #ff0000;\">ID</span><span style=\"color: #0000ff;\">=\"Addend2\"</span><span style=\"color: #ff0000;\"> runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">asp:TextBox</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">asp:Button </span><span style=\"color: #ff0000;\">ID</span><span style=\"color: #0000ff;\">=\"Sum\"</span><span style=\"color: #ff0000;\"> runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #ff0000;\"> Text</span><span style=\"color: #0000ff;\">=\"=\"</span><span style=\"color: #ff0000;\"> OnClick</span><span style=\"color: #0000ff;\">=\"Add\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">asp:TextBox </span><span style=\"color: #ff0000;\">ID</span><span style=\"color: #0000ff;\">=\"Result\"</span><span style=\"color: #ff0000;\"> runat</span><span style=\"color: #0000ff;\">=\"server\"</span><span style=\"color: #ff0000;\"> ReadOnly</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #0000ff;\">&gt;&lt;/</span><span style=\"color: #800000;\">asp:TextBox</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">div</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">form</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">body</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">html</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_0e495e09-8e0a-4d4f-acb2-dd7676be3f9f\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default.aspx.cs\" Inherits=\"_Default\" %&gt;\r\n\r\n&lt;!DOCTYPE html&gt;\r\n\r\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\r\n&lt;head runat=\"server\"&gt;\r\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/&gt;\r\n    &lt;title&gt;&lt;/title&gt;\r\n&lt;/head&gt;\r\n&lt;body&gt;\r\n    &lt;form id=\"form1\" runat=\"server\"&gt;\r\n    &lt;div style=\"background-color:pink;height:40px;width:600px;padding:10px;\"&gt;\r\n        &lt;asp:TextBox ID=\"Addend1\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;  +\r\n        &lt;asp:TextBox ID=\"Addend2\" runat=\"server\"&gt;&lt;/asp:TextBox&gt;\r\n        &lt;asp:Button ID=\"Sum\" runat=\"server\" Text=\"=\" OnClick=\"Add\" /&gt;\r\n        &lt;asp:TextBox ID=\"Result\" runat=\"server\" ReadOnly=\"true\"&gt;&lt;/asp:TextBox&gt;\r\n    &lt;/div&gt;\r\n    &lt;/form&gt;\r\n&lt;/body&gt;\r\n&lt;/html&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_f6fb3d42-b333-4c75-8e4a-114a297e3ba1\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Default.aspx.cs</span> <img id=\"code_img_opened_f6fb3d42-b333-4c75-8e4a-114a297e3ba1\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_f6fb3d42-b333-4c75-8e4a-114a297e3ba1\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web.UI.WebControls;\r\n\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> _Default : System.Web.UI.Page\r\n{\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Add(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend1.Text);\r\n        </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(Addend2.Text);\r\n        Result.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (a </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> b).ToString();\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_f6fb3d42-b333-4c75-8e4a-114a297e3ba1\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing System.Web.UI;\r\nusing System.Web.UI.WebControls;\r\n\r\npublic partial class _Default : System.Web.UI.Page\r\n{\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n\r\n    }\r\n\r\n    protected void Add(object sender, EventArgs e)\r\n    {\r\n        int a = Convert.ToInt32(Addend1.Text);\r\n        int b = Convert.ToInt32(Addend2.Text);\r\n        Result.Text = (a + b).ToString();\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后把网站发布到Linux中指定的根目录（/var/www/Linux.NET4/）中，并重启Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905220405620.png\" alt=\"\" /></span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 成功的访问并计算~~~！！！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里有几个需要提醒的地方：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、部署完.NET之后，Jexus需要重启才能生效（至少要对部署的网站进行重启）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、习惯使用Apache的，特别是习惯使用或者最近一直都在使用动态语言的读者，要留意编译型和解析型语言的区别。站点内容必须放置在Jexus配置的指定根目录中，换句话就是：bin、app_code等文件夹所在的目录级别必须是网站的根目录。在下就曾经犯二的把.NET的一个网站放到了非Jexus网站根目录的一个文件目录中，结果编译发布之后老报找不到XXX的错误，结果郁闷了老半天才恍然大悟。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、各位读者可以自由选择&ldquo;直接采用源码上传到Jexus中发布&rdquo;或者&ldquo;本地编译发布网站，再上传编译后的网站到Jexus中&rdquo;。如果目标Linux是处于局域网中，各位读者还可以直接采用samba等软件把网站根目录文件夹共享出来，这可以更方便的上传发布网站。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、PostgreSQL与Mono的结合</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 一个网站（除静态站点）的正常运行必然是需要和数据进行打交道的，我举个例子，比如我们现在去淘宝买一本书，当我们登陆时，淘宝需要对我们的登陆信息进行验证，验证我们的用户名密码是否正确；当我们需要搜索需要的商品时，淘宝需要对我们需要的产品进行筛选，并把筛选后的结果推送到我们的浏览器供我们查阅；浏览了好一阵子之后，我们发现自己想要的心水商品时，然后点击下单并填写配送信息，淘宝还需要登记下我们的配送地址、联系电话等相关信息&hellip;&hellip;可以看出，从我们输入淘宝这一网址并回车这一刹那开始，我们就不断的和淘宝进行各种的数据交互，我们的每一个操作，无论是登陆、下单还是搜索、翻阅，全部都涉及到大量的数据交互。各位读者是否有想过，我们在网站中干了那么多的事情，填写了这么多的表单信息，淘宝又是怎样把我们的信息记录下来，又应该记录到哪里？Of Course，各位读者答得非常好，它就是通过淘宝网的数据库进行记录下来的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 而事实上，我们当今在网上遇到的除静态网站之外的大部分站点（包括任何的在线论坛、网上商城、XXX的发布系统&hellip;&hellip;），它们都需要对用户的操作进行或简单或详细的记录，而这些信息记录必然是需要通过某种存储方式保存到服务器中，因此数据库都是是它们的共同的最佳选择，不同的只是它们可能并不是使用同一种的数据库而是其它各种类型的，Ms SQLServer、MySQL、DB2或者是一些非关系型的NOSQL数据库。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在写本篇文章之前，我就一直在考虑，《Linux.NET学习手记》应该采用那一款的数据库，到底是使用我在Linux中一直使用的MySQL还是我所认知的那些拥有丰富Linux.NET开发经验的前辈们普遍使用的PostgreSQL。网上关于MySQL和PostgreSQL对比的文章也有不少，讲得比较精辟的有：《<a href=\"http://bbs.chinaunix.net/thread-1688208-1-1.html\">PostgreSQL和MySQL的对比</a>》和《<a href=\"http://www.wikivs.com/wiki/MySQL_vs_PostgreSQL\">MySQL VS PostgreSQL</a>》。最后经过再三思考之后，我决定选择使用PostgreSQL，选择该数据仅仅是基于一些个人（私人的）原因。各位读者未必也必须要使用PostgreSQL，可以按照自己的喜好和业务的需求来选择自己心水的数据库软件，顺带的呼吁一下：各位读者请不要作任何的数据库之争，因为数据库之争就跟语言之争一样毫无意义，从来就没有哪款数据库好哪款数据库不好的这么一个说法，只有在哪个领域或者哪个项目之中哪款更合适。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，说得有点多了。关于如何在Linux下部署PostgreSQL，这里我推荐两篇园子中的文章，它们分别是介绍使用yum和源码包的方式部署PostgreSQL：《<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/06/2906632.html\">CentOS 6.3 Minimal yum 安装 PostgreSQL 9.2.3</a>》和《<a href=\"http://www.cnblogs.com/jlzhou/archive/2013/02/05/2893173.html\">CentOS 6.3 Minimal 源码安装 PostgreSQL 9.2.3</a>》，各位读者可以自行的选择喜欢的方式部署PostgreSQL。另外，由于本文的重点并不是介绍PostgreSQL如何使用，因此各位读者如果不懂如何使用PostgreSQL的，可以自行的从网上搜索相关的资料（我个人手头上也有少量的关于PostgreSQL的资料，有需要的读者可以发站内信或在微博上私信或@我）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，我们先在建立我们的数据库和表，这里我不介绍数据库和表如何建立，只是给出表的结构，其结构如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905220903287.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在我们的解决方案中新建一个新的网站&ldquo;Example2&rdquo; ，添加上我们需要的PostgreSQL的连接器，各位读者可以<a href=\"http://npgsql.projects.pgfoundry.org/\">点击这里</a>，链接到官网上上下载或通过其他办法来获取该工具包。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里我们通过另外的一种方式，采用Visual Studio所提供的便捷功能&rdquo;NuGet&ldquo;来快速的获取并自动部署到我们的网站项目中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 使用方法非常简单，只需点击：&rdquo;工具--&gt;库程序包管理器--&gt;库程序包控制台&ldquo;调出控制台，然后在控制台中输入\"Install-Package Npgsql\"并回车执行即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905220955358.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这样，我们就可以通过NuGet非常简单并且快速的把PostgreSQL的连接器&rdquo;Npgsql&ldquo;部署到我们的项目当中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后我们在配置文件&rdquo;Web.Config&ldquo;中添加上PostgreSQL的连接字串：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 接着我们在采用最简单的办法写出增、删、查、改的代码（这里不作粘贴展示，各位读者请移步到项目代码中查看）。接着我们再发布并上传网站，通过操作得出我们需要的结果：&nbsp;</span></p>\r\n<p><img src=\"/Static/Images/140905221112182.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里有几点注意需要提醒各位读者：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、使用NuGet部署&ldquo;Npgsql&rdquo;时，要注意控制台中部署项目是否正确选中我们需要部署的项目。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、如果各位读者的Mono与PostgreSQL不是安装到同一台的Linux中，需要注意数据库的授权问题，更详细的各位读者可以阅读PostgreSQL的手册，上面有详细的概述。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、网站上传之后各位读者别忘了把Jexus重启。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、Mono中使用PetaPoco</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 微软的ADO.NET技术给予了我们对数据库的操作极大的方便，无论我们面对的是何种的数据库，只要这款数据库的厂商有提供基于.NET的连接器，我们都可以采用ADO.NET的五大对象（Connection、Command、Reader、Adapter、DataSet）再配上通用的&ldquo;T-SQL&rdquo;语句来连接并操作这款数据库。我们几乎可以在不认识这款数据库的情况下完成对改数据库的操作，当然，我这里所说的操作指的是通用的&ldquo;T-SQL&rdquo;的操作，对于数据库的特色（特有的）高级功能或者另外一些不支持&ldquo;T-SQL&rdquo;的数据库，采用这种方法就未必适用了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 尽管ADO.NET已经是极大的方便了，但我们仍然免不了许多繁琐的工作，我们仍然需要一遍又一遍的对&ldquo;T-SQL&rdquo;语句进行拼接，一遍又一遍的调用我们写好的SQLTool（或SQLHelper），如果数据库中表比较少问题还尚算不大，但是如果数据库中的表很多，达到几十或上百个，这种&ldquo;上螺丝&rdquo;的操作不仅会花费我们大量的编码时间，还让我们的编码乐趣下降。还有更可悲的，那就是直接使用这些原生方法得到的结果返回集是一个弱类型的数据集，我们使用的时候还很可能的需要对返回的数据集进行逐一的数据类型转换，我们或许还要重新翻开数据库或者字段定义表来查阅该数据到底是一个什么类型。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 面对这种情况，使用ORM（对象关系映射）可以很好的在一定程度上解决我们现有的问题，我们可以通过配置XML文档的方式（如果使用&ldquo;Code-First&rdquo;之类的技术甚至连配置XML还可以免除）把数据库中的表与我们项目中的实体类进行映射，我们就可以非常容易的得到一些强类型数据集，此外不少的ORM框架还会内置一些我们常用的CRUD的方法，一些甚至连常用数据库的连接器也内置，给予了我们极大的便利。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Entity Framework（以下简称ef），它是微软提倡使用的一款ORM框架，相信应该有不少读者知道并且懂得怎么使用，特别是做过.NET MVC开发的读者，ef更是MVC的标配，我自己也非常喜欢这款ORM框架，无论是它的姓名还是它的性能。但是本文中不会简介如何在Mono中使用ef来对PostgreSQL进行实体映射，原因非常简单，Mono中的ef框架比微软在Windows中正式发布的版本要高了整整一个版本。微软当前发布的ef正式版本为ef5，而Mono中存在的ef版本却是ef6，并且Mono还不支持低于ef6的ef框架。虽然各位读者也可以在NuGet控制台中通过&ldquo;Install-Package EntityFramework -Prerelease&rdquo;来获得处于未发行的ef6框架，但是正因为它还没有发行，如果各位读者强行的把此版本的ef框架部署到项目当中，PostgreSQL（包括MySQL）的数据库连接器都会因为版本问题而无法被ef识别，最终还是无法使用该ORM框架对数据库进行操作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 既然现有的ef无法对PostgreSQL提供支持，而我们又想使用ORM框架，那就得寻找ef的替代品，在寻寻觅觅的过程中，我从一位网友随口报的一款轻量级ORM框架中找到了答案。没错，这款框架就是小节标题上写的&ldquo;PetaPoco&rdquo;。关于PetaPoco的介绍和使用方法，各位读者可以参考：<a href=\"http://www.toptensoftware.com/petapoco/\" target=\"_blank\">PetaPoco官网</a>、.<a href=\"http://www.oschina.net/p/petapoco/similar_projects\" target=\"_blank\">NET对象关系映射器PetaPoco</a>、<a href=\"http://www.cnblogs.com/youring2/category/385980.html\" target=\"_blank\">OoC\'s Blog</a>，它们都有比较清晰而详细的介绍PetaPoco如何使用，各位读者可以点击链接并学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们为本小节实验新建一个新的网站&ldquo;Example3&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再添加上我们的PetaPoco库，各位的读者可以从PetaPoco的官网上获取，在这里，我们仍然使用 Visual Studio 提供的快捷功能，使用NuGet控制台来在线的获取并把PetaPoco部署到我们的网站项目当中。它的命令为：&rdquo;Install-Package PetaPoco&ldquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905221414824.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在我们的网站配置文件&rdquo;Web.Config&ldquo;中添加好我们的连接字串:</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a4965db9-73b4-416d-8c2d-f1d55a1f5fd7\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Web.Config</span> <img id=\"code_img_opened_a4965db9-73b4-416d-8c2d-f1d55a1f5fd7\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_a4965db9-73b4-416d-8c2d-f1d55a1f5fd7\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"postgres\"</span><span style=\"color: #ff0000;\"> connectionString</span><span style=\"color: #0000ff;\">=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"false\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_a4965db9-73b4-416d-8c2d-f1d55a1f5fd7\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;configuration&gt;\r\n  &lt;connectionStrings&gt;\r\n    &lt;add name=\"postgres\" connectionString=\"Host=127.0.0.1;User ID=postgres;Password=postgres;database=test\"/&gt;\r\n  &lt;/connectionStrings&gt;\r\n  &lt;system.web&gt;\r\n    &lt;compilation debug=\"false\" targetFramework=\"4.0\" /&gt;\r\n  &lt;/system.web&gt;\r\n&lt;/configuration&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在Model中添加上我们的&rdquo;Person&ldquo;实体类：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_bbccbfa7-9292-48d5-b950-7bded3537f3f\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Person.cs</span> <img id=\"code_img_opened_bbccbfa7-9292-48d5-b950-7bded3537f3f\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_bbccbfa7-9292-48d5-b950-7bded3537f3f\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Linq;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Web;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> PetaPoco;\r\n\r\n</span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n<span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> Person 实体类\r\n</span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n<span style=\"color: #000000;\">[PetaPoco.TableName(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">person</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n[PetaPoco.PrimaryKey(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n</span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Person\r\n{\r\n    [PetaPoco.Column(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">id</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n    [PetaPoco.Column(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Name { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n    [PetaPoco.Column(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> Age { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n    [PetaPoco.Column(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">sex</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Sex { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_bbccbfa7-9292-48d5-b950-7bded3537f3f\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Web;\r\nusing PetaPoco;\r\n\r\n/// &lt;summary&gt;\r\n/// Person 实体类\r\n/// &lt;/summary&gt;\r\n[PetaPoco.TableName(\"person\")]\r\n[PetaPoco.PrimaryKey(\"id\")]\r\npublic class Person\r\n{\r\n    [PetaPoco.Column(\"id\")]\r\n    public int ID { get; set; }\r\n\r\n    [PetaPoco.Column(\"name\")]\r\n    public string Name { get; set; }\r\n\r\n    [PetaPoco.Column(\"age\")]\r\n    public int Age { get; set; }\r\n\r\n    [PetaPoco.Column(\"sex\")]\r\n    public string Sex { get; set; }\r\n\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">跟第二节一样，添加一个Aspx页面，添加&rdquo;增&ldquo;、&rdquo;删&ldquo;、&rdquo;查&ldquo;、&rdquo;改&ldquo;四个按钮并完善里面的代码（这里也不贴代码了，各位读者需要阅读的请移步到项目当中），之后发布上传我们的网站到Linux中，重启Jexus，得到我们想要的效果：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905221934507.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我需要提醒一下各位读者：因为PostgreSQL中默认是小写的，即在Linux的PostgreSQL控制台中，如果读者们对字段没有使用双引号修饰，无论读者们使用大写还是小写，PostgreSQL都会自动的把字母转换为小写。而在这里，我们的实体类Person中属性的命名规则是采用帕斯卡命名法（大写开头），如果读者们没有对实体类中的属性加标签（手动的指明该实体属性对应数据库中的字段名）或者在调用PetaPoco的方法时手动的指明数据库中的对应字段名，网站运行时就有可能发生异常。因此，为了避免不必要的麻烦，并且增加代码的可读性，我建议各位读者在写实体类的时候顺带把该实体和里面的属性进行手动的数据映射。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp;</span> <span style=\"font-family: 宋体; font-size: 12pt;\">就这样，我们对Linux搭建和部署.NET网站做了一个抛砖引玉，同时也证明了Linux中跑.NET的可能性与可行性，好的，我们这回合暂时就到这里结束。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下一节，我们尝试在Mono中部署一款优秀的框架，嗯，我们下回见。</span></p>\r\n</body>\r\n</html>',1409954447895,1409955982683,405,6,'7,8,10',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"../../../Home/Single/16632085\">前一回合</a>中我们已经对Jexus作了一个详细深入的学习，如果各位读者有仔细的阅读文章并且有进行实际的操作，相信玩转Jexus这款高性能服务器软件绝对并非难事，至此为止，Jexus的学习到此结束，我们也正式的进入到下一个学习的正题当中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 前面几个回合以来，我们一直都在Linux.NET的边缘中徘徊，始终都没有部署过任何的一个.NET的网站应用程序，为的就是让读者们先弄清楚Linux.NET到底是怎么一回事，同时也让各位读者对Linux.NET或多或少的有一些了解，所谓&ldquo;万丈高楼平地起&rdquo;，如果在没有任何基础的情况下直接在Linux中部署.NET网站应用程序，这将会遇到不少的困扰。这里我建议各位打算学习Linux.NET的读者们，应当先对Asp.NET和Linux的操作有一定的了解，毕竟本系列的文章并不是单纯的讲解Asp.NET，也不是Linux的使用教程，而是建立在它们共同之上的一种领域。此外各位读者也应当懂得怎么使用Jexus（或其他能够提供.NET运作的Linux服务器软件），这样子我们才能够以一种比较轻松的方式来共同的对Linux.NET进行学习。</span></p>',1409954447895),(26,'Linux.NET学习手记（5）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"/Home/Single/6878032\">上一回合</a>中，我们牛刀小试的在Mono中部署了我们的第一个ASP.NET应用，此外我们还结合了PostgreSQL数据库实现了一个简单CRUD操作的小站点。它们的成功部署并正常运行很好的体现出.NET在Linux中运作的可行性。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合中，我们将讨论我们一个非常有名并且用得最多的框架&mdash;&mdash;ASP.NET MVC的跨平台部署，事不宜迟，我们马上进入我们的主题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合，我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 1、部署前的准备工作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 2、从零开始，把MVC3网站应用程序部署到Mono中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 3、从部署MVC3中启发，把MVC4部署到Mono中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp; 4、另外一种与前面部署方式&ldquo;相逆&rdquo;的MVC4部署方式</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、系统约定&mdash;&mdash;部署前的准备工作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最近一段时间，许多朋友都纷纷发帖发博客表示已经成功的在Mono中成功的部署了最新版的MVC框架，相当的喜闻乐见。MVC是什么，我想各位读者一定知道，它作为微软推出的重要建站模式，其地位与WebForm相当，重要性也是不容忽视的。试想一下，如果MVC无法在Mono中部署，那我们的Linux.NET仿佛就是一只折翼了的小鸟&mdash;&mdash;&ldquo;想要飞也飞不高？&ldquo;不对，直接是飞不起来了。因此，MVC能够正常的在Mono中运行似乎已经就是Linux.NET的一项&rdquo;理所当然&ldquo;的事情。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的进入我们的正题，在部署MVC之前，我们需要新建一个Jexus的网站配置：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先在Linux中新建一个存放文件的文件夹，然后cd（进入）到Jexus存放网站配置文件的目录，再新建一个本次实验的网站配置文件&rdquo;linux.net5&ldquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223605860.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 添加上我们配置的内</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223620487.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后保存退出，然后再重启我们的Jeuxs即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，特别值得注意的地方：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 那就是&rdquo;NoFile&ldquo;配置项，各位读者一定要把此功能关闭（添加后注释掉或直接就不添加进去，Jexus默认此功能是关闭的）。在MVC中我们的访问路径是经过路由重写的，当我们发起一个访问请求时，比如：localhost/Home/Index/，请求会经过路由的匹配并改写，最终把请求指派到Controller文件夹中的HomeController.cs文件中的Index方法，然后再由该方法对请求作出处理并发出应答。在整套的MVC&rdquo;请求--应答&ldquo;处理过程中，浏览器在地址栏发起的URl请求在网站中未必都是真实的文件物理地址访问请求。而这恰恰相反的，在Jexus的NoFile检测中，Jexus会对用户发起的访问请求（URL）进行文件物理地址的检测，检测不通过时就直接对用户应答一个预设的应答页面（比如这里的404页面），不再使用.NET的功能对URl作更多的处理，因此，请求将永远无法指派到正确的Action进行处理，整套的MVC网站也会因此而报废。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同样，对于一些在.NET中使用URlRewrite的站点，Jexus的&rdquo;NoFile&ldquo;功能也是需要关闭的，原因与MVC一样，将会被URL重写的请求还没有通过Jexus这一关就被拒绝了，无法继续的进入.NET进行处理，网站的访问也会因此而造成一定程度的影响（这里网站不会被报废，因为在浏览器中输入真实的物理地址，网站又可以正常的访问）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、部署MVC3网站应用程序</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Mono中部署MVC3应用程序，这不是我们本回合的终极目标，但是确实本回合最重要的内容，因为只要学会了在Mono中部署MVC3，部署MVC4也就是那么一回事了。其实，在Mono中成功部署MVC3也不是一件新鲜的事情，早前就已经有不少成功的案例，园子中也有一些关于如何在Mono中部署MVC3的文章，各位读者如有兴趣，可以自行查阅，当然，读者们也可以从本文中直接找到方法，我们在这里采用的是Step By Step的讨论学习方法，一步一步的说明白如何操作，并指出当中需要注意的地方和解析原因。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; 好的，我们先新建一个MVC3应用程序&rdquo;MVC31&ldquo;，并选择&rdquo;空模板&ldquo;和&rdquo;Razor视图引擎&ldquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223747998.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 由于这个是一个空模板，里面没有任何现成的Controller，我们简单的新建一个HomeController，并添加上一个Index Action和相关的视图。然后在windows中运行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223800440.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 那是没有问题的，但如果我们发布到Linux中，效果就不一样了：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223822408.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 没错，正如所想的一样，无法正常运行，按照上面的提示，我们设置&rdquo;CustomError&ldquo;节点，把它设置为&rdquo;OFF&ldquo;，重新发布，看看那里出了问题：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905223857454.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第一个问题出现了，很明显，是由于Entity Framework引起的。没错，如果有认真读过我前一篇文章<a href=\"/Home/Single/6878032\">《Linux.NET学习手记(4)》 </a>的读者大概已经明白其中的原因和知道解决办法了。正如我上回合为什么没有使用EF（我最喜欢的ORM）而改为使用PetaPoco的原因一样，Mono中的EF版本已经是6.0并且还不支持低于此版本的EF框架，恰好微软正式发布的EF版本最高只有5.0，于是这就造成了我们这里的第一个错误。不过这里的问题也只是暂时性的，随着微软将来EF6.0的发布，这个问题，将会得到解决。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们通过NuGet卸载所有的Entity Framework。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224010913.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再清除Web.Config和Global中的一些残留项，然后再次发布。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224017328.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后顺利的进入到我们的第二个问题，这里我解释一下出现此问题的原因，由于mono 3.0.X对语言文化的支持暂时还没有对中文支持（2.X中则可以支持中文），因此系统默认所使用的&rdquo;zh-CN&ldquo;让Mono无法识别。此问题的解决办法就是：在WebConfig的&rdquo;system.web&ldquo;节点中添加上&rdquo;globalization&ldquo;节点，并把当中的&rdquo;uiCulture&ldquo;设置成&rdquo;en-US&ldquo;。在这里我们推荐的配置为&rdquo;&lt;globalization culture=\"zh-CN\" uiCulture=\"en-US\"/&gt;&ldquo;，这样就可以让我们的程序本身以&rdquo;英语&ldquo;语法来运行，但是显示时却能够以&rdquo;中文&ldquo;语法来显示。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们添加上这个节点，并重新发布：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224041782.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 非常不幸的，我们继续进入到了一个新的错误，到这里，各位读者有什么感觉了？抓狂了？想想放弃了？俗话说：&rdquo;行百里者半九十&ldquo;，这时千万别放弃，因为成功就在眼前了。通过从网上翻阅大量的资料，我们找到这这次问题的真凶，没错，作怪的就是&rdquo;Microsoft.Web.Infrastructure.dll&ldquo;，我们把Windows中&rdquo;Microsoft.Web.Infrastructure.dll&ldquo;和Mono中的&rdquo;Microsoft.Web.Infrastructure.dll&ldquo;反编译：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224115865.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可以看出，Windows中的Infrastructure和Mono中的Infrastructure还不是同一回事，那这就好办了，我们把MVC3项目中的Infrastructure剔除，让程序使用Mono自带的动态库，或许就可以解决我们现有的问题。我们删除这个动态库后，再次发布：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090522411980.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 终于看到了我们一直努力想要看到的&rdquo;Index&ldquo;，MVC3成功的在Mono中跑起来了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 趁热打铁，我们再结合上PostgreSQL数据库和PetaPoco快速的建立一个CRUD的小应用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先新建一个商品表&rdquo;Goods&ldquo;，其表结构如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224217108.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在新建相关的Controller、Model、View等，这里就不再介绍当中的代码如何编写和实现，有兴趣的读者可以在代码演示中查看。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把做好的站点发布到Mono中：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224240464.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 页面能够正常显示，没有问题，我们在试试添加一个新的商品：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224258167.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 添加商品时报了一个错，同时在&ldquo;Details&rdquo;中提示有一个程序集找不到。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过排错，我们发现了我们引用的一个DLL文件在Mono中是没有的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224329744.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; 这样，我们只要在&ldquo;C:/Windows/assembly&rdquo;目录中找到&ldquo;System.ComponentModel.DataAnnotations.dll&rdquo;（注意版本），然后再手动的添加到我们发布的网站中的bin目录中即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224345802.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再次添加数据，OK！成功添加！、</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224409105.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 出现了&ldquo;Linux.NET学习手记&rdquo;这个商品。至此，MVC3的简单部署已经完成~！！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里做一些小提示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、由于我采用了的是虚拟机，因此我结合了一个Linux的Samba服务来直接发布，各位读者也可以采用Ftp或者发布到本地再上传的方式进行网站的发布，发布后记得重启一下Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、&ldquo;Infrastructure&rdquo;动态库除了可以采用发布会删除的方式进行处理，也可以采用&ldquo;不复制&rdquo;的属性才处理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、读者们也可以参考《<a href=\"http://www.linuxdot.net/bbsfile-3326\" target=\"_blank\">在mono3.0.10+Jexus5.3上运行MVC4和WebApi的要点</a>》这篇文章，上面的方法与这里有师出同门之道。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、Mono中部署MVC4</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上一小节中，我们历尽艰辛&ldquo;取得真经&rdquo;，成功的把一个MVC3网站应用部署到了Mono中，在这取得重要的成功之后，我们向我们本回合的终极目标继续推进&mdash;&mdash;在Mono中部署一个MVC4应用。其实，无论是MVC3还是MVC4，它们的部署方法都是类似的，我们在上小节中详讲了MVC3的部署就是为了能够在部署MVC4起到一定的参考作用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，心动不如行动，我们马上的新建一个MVC4的网站应用：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090522453346.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再根据我们刚才部署MVC3的经验步骤，进行相关的修改：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、剔除所有Entity Framework的应用（使用NuGet卸载EF，并清除所有关于EF的残留）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、在Web.Conf配置文件中的&ldquo;system.web&rdquo;节点中加入&ldquo;&lt;globalization culture=\"zh-CN\" uiCulture=\"en-US\"/&gt;&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、移除&ldquo;Infrastructure&rdquo;这个动态库文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把这个MVC4应用程序发布到Mono中：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224604698.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可以正常的运行，同样的，我们在创建一个&ldquo;商品&rdquo;的增删查改，并把缺少的&ldquo;System.ComponentModel.DataAnnotations.dll&rdquo;补上:</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905224614702.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同样的实现了我们想要的功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过&ldquo;照葫芦画瓢&rdquo;的方法，我们把一个MVC4的网站应用程序顺利的部署到Mono中了，其实也就差不多而已。</span>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">四、另一种版本的MVC4部署方法</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 从本回合开篇起，无论是部署MVC3还是部署MVC4，我们所采用的办法都是直接使用Visual Studio所提供的MVC模板，然后通过&ldquo;哪里不行删哪里&rdquo;的方法，把Mono中不支持或无法直接兼容的地方进行删除或修改。可以说，我们采用了一种&ldquo;逆向&rdquo;的方法来获得一个Mono支持的MVC应用。说到这里，各位读者可能猜到，&ldquo;既然有这种逆向的方法，应该也会有一种正向的办法来部署&rdquo;。近日我读到了一篇题目名为《<a href=\"http://beginor.github.io/2013/05/16/trying-to-run-mvc4-with-mono3.html\" target=\"_blank\">尝试在 Mono 3.0 下运行 ASP.NET MVC 4</a>》的文章，受到了一些启发，发现还真的有读者们所说的&ldquo;正向&rdquo;方法来获得Mono支持MVC4应用程序。那就是不使用Visual Studio所提供的MVC模板，通过为Web应用程序添加必要的MVC库文件的方式手动的搭建起一个MVC应用程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本小节中，我们将尝试的通告手动的方法，获得一个Mono支持的MVC4网站应用程序。在参照那篇文章的同时，结合我们&ldquo;逆向&rdquo;部署的方法与经验，在Mono中部署我们想要的MVC4应用程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，我们新建一个空的Web应用程序（注意，不是MVC4应用程序）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905225250557.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在手动的创建相应的文件夹和文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090522534430.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里解析一下，有几个文件以及文件夹是必须创建的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、Controller文件夹：用于存放控制器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、Views文件夹：用于存放模版</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、Models文件夹：用于存放实体类文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、Global.asax文件：用于应用程序启动时初始化（注册路由等）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在网站配置文件中添加上MVC4需要用到的一些配置：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">appSettings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"webpages:Version\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"2.0.0.0\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"webpages:Enabled\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"false\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"PreserveLoginUrl\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"ClientValidationEnabled\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"UnobtrusiveJavaScriptEnabled\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">appSettings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  \r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">globalization </span><span style=\"color: #ff0000;\">culture</span><span style=\"color: #0000ff;\">=\"zh-CN\"</span><span style=\"color: #ff0000;\"> uiCulture</span><span style=\"color: #0000ff;\">=\"en-US\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n      \r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">剔除会在Mono中&ldquo;作怪&rdquo;的&ldquo;Infrastructure&rdquo;动态库文件，然后在全局配置文件的&ldquo;Application_Start &rdquo;方法中注册上路由：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Application_Start(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n{\r\n   AreaRegistration.RegisterAllAreas();\r\n   GlobalFilters.Filters.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> HandleErrorAttribute());\r\n   RouteTable.Routes.IgnoreRoute(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">{resource}.axd/{*pathInfo}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n\r\n   RouteTable.Routes.MapRoute(\r\n   name: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Default</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n   url: </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">{controller}/{action}/{id}</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,\r\n   defaults: </span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> { controller </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Home</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, action </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Index</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, id </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> UrlParameter.Optional }\r\n   );\r\n}</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">手动的在Controller和View中创建控制器和模板（这里不详讲，只需注意要继承相应MVC类），然后再发布到Mono中：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905225642101.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Controller找不到页面了，我们打开发布后的目录：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905225703995.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们的Views文件夹不见了。其实，这是由于我们新建的是WebForm的应用程序，发布时，我们的页面会被嵌入到了bin目录的程序集中，所以MVC的模版解析引擎无法在根目录中找到VIews目录以及里面的所有模板。这个文件的解决办法也比较简单，只需把Visual Studio中的Views文件夹整个的拷贝到网站根目录中即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再次访问：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905225708670.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OK~！！正常访问！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里我有一点要声明一下，Mono的HttpRuntime是支持targetFramework的，因此我们这里并没有把&ldquo;targetFramework&rdquo;去除（跟参考文章有所不同），各位要多加留意~！！</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合中，我们尝试性的并成功把MVC3网站应用程序部署到Mono中，并根据MVC3的部署方式推演出了MVC4的部署方式，同时还介绍了相对于我们现有部署方式的Web应用程序升级为MVC4应用程序的方式部署。希望各位读者在通读全文之后能够亲自的动手实现一遍，&ldquo;世上无难事，只怕有心人&rdquo;，只要有恒心，所有的困难最终都不是困难。同时，如果各位读者有一些更好的部署点子或对本文有任何的看法和建议，欢迎留言分享和指正。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，本回合暂时就到这里了，咱们<a href=\"/Home/Single/3493331\">下回</a>见。</span></p>\r\n</body>\r\n</html>',1409957232344,1409961074224,195,6,'7,8,10,12',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"../../../Home/Single/6878032\">上一回合</a>中，我们牛刀小试的在Mono中部署了我们的第一个ASP.NET应用，此外我们还结合了PostgreSQL数据库实现了一个简单CRUD操作的小站点。它们的成功部署并正常运行很好的体现出.NET在Linux中运作的可行性。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合中，我们将讨论我们一个非常有名并且用得最多的框架&mdash;&mdash;ASP.NET MVC的跨平台部署，事不宜迟，我们马上进入我们的主题。</span></p>',1409957232344),(27,'Linux在Hyper-V中实现与Windows的宽带共享上网','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 相信不少读者都会做（或者曾经做过）这么一项活动&mdash;&mdash;把一个Linux系统安装到Windows系统下的虚拟机软件中，然后在Windows这个大环境中对Linux进行学习或者一些实验操作。在进行这么一项活动时，不知道各位读者是否感受到网络连通的重要性（这里指外网的Internet），而事实上，无论是在虚拟机中还是在真实的物理机上&ldquo;玩&rdquo;Linux，（外网）网络都扮演着一个非常重要的角色。试想一下，当我们的Linux无法（外网）网路，这时我们又需要安装一个gcc编译器，各位读者会怎么做？采用源码编译？我想，gcc的编译安装这并不是一般人所能够做到的。采用rpm包安装？那光解决rpm包的依赖性就可能要折腾不少的时间。采用yum，并且把源指向安装光盘？这，确实是可以解决gcc的安装问题。但是，各位读者是否又想过这么一个问题，虽然Linux的安装光盘确实已经为我们提供了不少的软件包，但是一个安装光盘才有多大呀，CentOS 6.4的安装光盘也就只有那个四个来G，这就意味着，光盘并不是万能的，还会有不少的软件我们是无法从光盘中获取的，比如Mono，我们就必须自己从官网中下载一个并自己编译安装。（外网）网络是如此的重要，我们是不能够失去它的，哪怕是在虚拟机中也不例外。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在现实生活中，虚拟机软有非常多的种类，比较有名并且常用的有VM、VirtualBox等。如果各位正在阅读此文的读者是使用VM机作为自己的Linux虚拟机的，那么你们是幸福的，因为VM这款软件做得非常好，它自带的NAT技术一下子就可以帮各位读者解决联网问题，换句话说，只要作为大环境的Windows可以正常的访问网络，那么只需要在VM的网卡设置用选择&ldquo;nat&rdquo;选项或者采用&ldquo;8号网卡（vmnet8）&rdquo;，安装在VM中的Linux就已经获得了访问（外网）网络的权利了，用户完全无需为了网络的事情而烦恼和折腾。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 但是，既然在本文中是选择了Hyper-V作为虚拟机软件，那就代表着我们就没有VM那么幸福了，我们还得自己折腾一番才能争取到获得网络访问这个权利。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，正是进入主题，本文中，我们将讨论研究：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、本文网络背景的介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、如何在Linux中添加一张新网卡</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、如何实现Linux在Hyper-V中实现与Windows的共享宽带上网</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　4、TTL检测（路由封杀）网络环境的应对策略</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">1、当前实验网络背景的介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 之前在网络中心常驻时，上网账号理论上是用不完的，当虚拟机中Linux想访问网络时，我们所采取的办法是正常的拨号上网，一台Linux要上网就拨一个号，十台Linux上网就拨十个号，通过这个方法，虚拟机中所有的Linux都能够访问网络。不过，这种方法是异常&ldquo;奢侈&rdquo;的，并且对于大部分读者来说也是非常不现实的。各位读者更多的则是像我当前的情况，从网络中心中撤离出来，回到宿舍，一共也就那么一个上网账号（还是自己花钱供养的），只能供一个主机同一时间访问网络的需要。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 此外，当前的环境除了只有一个宽带账号的限制外，由于这里是一个校园网（包括许多高校的校园网、宽带小区或者部分地区电信、联通宽带用户），它们都会有防蹭网（路由器封杀）的这么一个功能，还真的只是一个宽带账号只能供一个主机访问网络（在这里，VM用户仍然不用担心这个问题）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 想要让Hyper-V中的Linux能够访问网络，各位读者可以通过一以下几个办法：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　A、多开几个上网账号（非常耗费金钱）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　B、买一个放封的路由（一次投资，多次回报，还是个不错的选择）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　C、参考本文中的方法（虽不能保证一定能够成功，不过仍然值得一试，不行再采用前一种办法）</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">2、为Linux添加一块网卡</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正式进入到我们的实验，为了不对当前的Linux环境造成干扰，我们决定采用为Linux添加一张新的网卡来进行我们当前的这个实验。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，先确保Hyper-V的&ldquo;虚拟交换机管理器&rdquo;中存在一个属性为&ldquo;内部&rdquo;适配器（如果没有，则需要自己添加一个，这里采用一张已有的网卡，各位读者不必为了这么长的名字而纠结）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231712682.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后为Linux虚拟机添加一张网卡：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231734526.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，有几点是需要注意的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、虚拟交换机中请务必要选择&ldquo;内部&rdquo;属性的适配器（在这里选择的是刚刚新建的那张，名为：&ldquo;Windows phone &hellip;&hellip;&rdquo;）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、添加硬件时，建议选择&ldquo;旧版的网络适配器&rdquo;，以防止一些版本的Linux系统缺少对新版网卡的驱动。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后启动我们的Linux系统，直接使用&ldquo;setup&rdquo;设置网卡：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231758566.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们发现刚才新增的网卡是并没有被Linux识别的（在这里，我们使用的是CentOS 6.4 X86_64 版本，其他发行版的Linux可能会有所出入），我们需要手动的添加一个网卡配置文件。添加方法非常简单，进入&ldquo;/etc/sysconfig/network-scripts/&rdquo;目录，然后执行&ldquo;cp ifcfg-eth0&nbsp; ifcfg-eth1&rdquo;(把eth0的配置文件再拷贝一份到eth1中)，然后使用vi编辑器打开刚刚拷贝得到的&ldquo;ifcfg-eth1&rdquo;配置文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231826370.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后对该配置文件作出以下修改：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、把&ldquo;DEVICE&rdquo;中由eth0改为eth1</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、删除&ldquo;HWADDR&rdquo;这一行（删除配置文件记录的网卡硬件地址）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、删除&ldquo;UUID&rdquo;这一行（删除配置文件中硬件的唯一标识）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后保存并退出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 继续使用vi编辑器打开&ldquo;/etc/udev/rules.d/70-persistent-net.rules&rdquo;，然后把里面的所有内容清空，保存并退出后重启Linux。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 现在再setup就可以看到新添加的网卡了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231859605.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的。就这样，我们成功的为Linux添加了一张新网卡。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">3、对Hyper-V中的Linux赋予网络访问的权利</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上一个小节中，我们添加了一张&ldquo;内部&rdquo;属性的适配器，现在我们把Windows中的宽带连接共享到这张&ldquo;内部&rdquo;适配器，让Linux能够共享Windows中的网络。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 打开Windows中的&ldquo;网络连接&rdquo;：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905231951629.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 里面有非常之多的网络适配器，这些大家都不用管，只需要留意图中两个蓝色框起来的适配器，一个为&ldquo;宽带连接&rdquo;（也就是Windows中的宽带连接），另一个是&ldquo;vEthement（Internal Ethernet&hellip;&hellip;）&rdquo;（也就是在Hyper-V中新建的那一张内部网络适配器）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在&ldquo;宽带连接&rdquo;中点击右键，选择&ldquo;属性&rdquo;，打开设置窗口，打开&ldquo;共享&rdquo;这个选项卡，勾上&ldquo;允许其他网络用户通过此计算机的Internet连接来连接&rdquo;，&ldquo;家庭网络连接&rdquo;这个下拉菜单中选择刚刚我们新建的&ldquo;内部&rdquo;网络适配器。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232004869.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 点击确定保存退出，断开当前的Windows宽带连接，重新拨号之后，刚才的设置即可生效。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后继续设置我们的&ldquo;内部&rdquo;适配器的IP，如图所示，只要随意的设置一个与宽带连接不同网段的IP即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090523202531.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后，在Linux中的eth1网卡设置中采用DHCP的方式获取IP地址（有兴趣的读者可以分别尝试使用静态IP的方式和DHCP的方式获取Linux的IP，然后再对比一下&ldquo;/etc/resolv&rdquo;中的不同）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232048268.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出，并执行&ldquo;service network restart&rdquo;重启网络配置</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 现在尝试一下看能不能解析&ldquo;www.baidu.com&rdquo;的域名</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232115844.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯，非常好，我们的百度域名能够正常的解析，由于域名解析需要连网到DNS服务器，现在能够看到解析，这就表示，我们的Linux已经能够连网，具有网络访问的能力了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">4、应对拨号服务器的TTL检测</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 或许有一些读者遇过这么一种情况：现在有一个宽带的上网账号，由于某些原因（比如添置了一些新电脑之类的），想让几台电脑都能够共享这个宽带账号来上网，结果从电脑城中买回来一个路由器，非常正确的设置好相关的参数之后，竟然发现没有办法浏览网页，从路由器中的数据包监控中还发现，数据包不断的发送出去，却一个数据包都没有办法接收到。把路由器拿回电脑城中，路由器在哪里又能够正常的使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如果各位读者遇到了这种现象，并且排除了路由器故障这一问题之后，那就只能证明了一件事：当前的网路环境中存在对路由器使用的封杀，也就是在拨号服务器中有TTL的检测（当然，想要封杀路由器的使用方法有很多种，比较常用而且比较流行的办法就是采用TTL的检测，在本文中也是只针对TTL检测采取解决措施）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 关于什么是TTL值，各位读者可以用网上搜索详细的资料。在这里我只简单的解说一下：我们的数据包在网络中的传输，从一个网段的网络传输到另外一个网段的网络，这是需要路由器在其中发挥作用的，但是一个由多网段所组成的网络往往是非常庞大的（比如Internet），如果数据包没有一个传输次数的限制，那么就有可能发生这么一个事件：&ldquo;数据包不断的在网络中传来传去，走遍了整个网络，并且还不断的重复这个动作&rdquo;。这样，不仅使得网络的拥塞程度一下子大增甚至把整个网络挤垮，并且发送这个数据包的主机还无法获知这个数据包是否可达（也就是是否找到接收方或者接收方到底是否存在）。因此，为了解决这么一个问题，我们在发送数据包的时候，都会在数据包中设置一个TTL值，每当这个数据包经过一个路由器进行转发，数据包中的TTL值就会减1，直到数据包中的TTL值变为0，路由器就会自动的认为这个数据包是不可达的并自把这个数据包丢弃。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 针对TTL值的这一个特性，只要在拨号服务器中增加一个TTL值的检测，只要用户是采用路由器上网的（具有放封功能的或者刷了放封固件的除外），到达拨号服务器中的数据包的TTL值就不是默认的TTL值（Windows默认的TTL为128，Linux默认的TTL值为64），如果在拨号服务器中再做这么一个小动作：&ldquo;把所有不是默认TTL值的数据包全部丢弃&rdquo;，这样就达到了对路由器封杀的效果。也就是各位读者在路由器的数据包监测中所看到的不断有数据包发出却一个数据包都没有办法收到的原因。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本文中所介绍的Hyper-V共享上网中就遇到了这么一个问题（不一定所有读者都会遇到），比如我想从网上下载一个东西：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232225742.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然DNS能够解析域名，但是却无法从网上下载东西。造成此现象的其中的原因就是：共享上网的原理跟使用路由器一样，而当前的校园网对路由器的使用有封杀。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 要解决TTL检测并封杀路由器使用的方法比较直接，那就是修改数据包从网卡送出时的TTL值。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232240283.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 针对本文中的配置，我用excel画了一个简单的原理图，当虚拟机中的Linux通过eth1发送出一个数据包，该数据包会被发送到&ldquo;内部&rdquo;适配器中，然后&ldquo;内部&rdquo;适配器会充当一个路由的功能，把数据包转发到宽带连接中，接着，宽带连接也同样的充当同样的功能，把数据包转发出去。这里就存在着一个简单的算术题：&ldquo;Windows默认的TTL值为128，也就是从宽带连接中出来的数据包必须是128的才不会被拨号服务器丢弃，而数据包每经过一次路由的转发TTL值就会减1，问从eth0中出来的数据包是多少时数据包才不会被拨号服务器丢弃？&rdquo;聪明的读者一定能给很快的计算得出答案&mdash;&mdash;130！！！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，既然我们已经计算出合适的TTL值，我们二话不多说的去设置Linux的数据包TTL值。我们只需使用vi编辑器打开&ldquo;/etc/sysctl.conf&rdquo;，然后再最后的地方添加上这么一句&ldquo;net.ipv4.ip_default_ttl=130&rdquo;，然后保存退出并重启网络。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232311818.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这样，我们就可以突破了当前网络对路由器使用的封杀了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905232321255.x-png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 瞧，这就可以下载东西了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同时，这里还有一项需要读者们非常注意的地方：要时时刻刻的警惕seLinux和iptables所产生的作用，在本文中，如果这两项开启了的话，同样是无法下载东西的。各位读者要切记了。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，Linux（CentOS）如何在Hyper-V中实现与Windows宽带共享上网就到此结束了。各位读者如果发现文中有任何错漏的地方，欢迎留言指正。感谢各位读者的收看。</span></p>\r\n</body>\r\n</html>',1409959484616,1409959484616,15,6,'9,13',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 相信不少读者都会做（或者曾经做过）这么一项活动&mdash;&mdash;把一个Linux系统安装到Windows系统下的虚拟机软件中，然后在Windows这个大环境中对Linux进行学习或者一些实验操作。在进行这么一项活动时，不知道各位读者是否感受到网络连通的重要性（这里指外网的Internet），而事实上，无论是在虚拟机中还是在真实的物理机上&ldquo;玩&rdquo;Linux，（外网）网络都扮演着一个非常重要的角色。试想一下，当我们的Linux无法（外网）网路，这时我们又需要安装一个gcc编译器，各位读者会怎么做？采用源码编译？我想，gcc的编译安装这并不是一般人所能够做到的。采用rpm包安装？那光解决rpm包的依赖性就可能要折腾不少的时间。采用yum，并且把源指向安装光盘？这，确实是可以解决gcc的安装问题。但是，各位读者是否又想过这么一个问题，虽然Linux的安装光盘确实已经为我们提供了不少的软件包，但是一个安装光盘才有多大呀，CentOS 6.4的安装光盘也就只有那个四个来G，这就意味着，光盘并不是万能的，还会有不少的软件我们是无法从光盘中获取的，比如Mono，我们就必须自己从官网中下载一个并自己编译安装。（外网）网络是如此的重要，我们是不能够失去它的，哪怕是在虚拟机中也不例外。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在现实生活中，虚拟机软有非常多的种类，比较有名并且常用的有VM、VirtualBox等。如果各位正在阅读此文的读者是使用VM机作为自己的Linux虚拟机的，那么你们是幸福的，因为VM这款软件做得非常好，它自带的NAT技术一下子就可以帮各位读者解决联网问题，换句话说，只要作为大环境的Windows可以正常的访问网络，那么只需要在VM的网卡设置用选择&ldquo;nat&rdquo;选项或者采用&ldquo;8号网卡（vmnet8）&rdquo;，安装在VM中的Linux就已经获得了访问（外网）网络的权利了，用户完全无需为了网络的事情而烦恼和折腾。</span></p>',1409959484616),(28,'Linux.NET学习手记（6）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者大家好，好长一段时间没有更新文章了，自从参加工作之后，每天等待去做的工作没完没了，个人的时间也变得奢侈起来，今后要尽量从中脱身，抽更多的时间来完成自己想做的事情（希望如此）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 言归正传，<a href=\"/Home/Single/7028802\">上一回合</a>中，我们讨论学习了如何在Linux.NET中让一个 MVC 3.0 和 MVC 4.0 的项目在mono中跑起来。而就在早前几天，我在新浪微博中看到一位朋友转发了一篇有关如何将MVC4.0项目升级到MVC5.0的文章：《<a href=\"http://www.asp.net/mvc/tutorials/mvc-5/how-to-upgrade-an-aspnet-mvc-4-and-web-api-project-to-aspnet-mvc-5-and-web-api-2\" target=\"_blank\">How to Upgrade an ASP.NET MVC 4 and Web API Project to ASP.NET MVC 5 and Web API 2</a>》。我不禁感叹，这时代的步伐还真快，MVC还真的一年一版本的出，同时，一个想法在脑海中形成：既然MVC都发展到5.0了，那当前能否让它在Mono中跑起来呢？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 进入本回合主题，本回合中我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、得到一个ASP.NET MVC 5 的框架应用</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、将一个简单的ASP.NET MVC 5 的应用部署到Linux中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本回合的程序源码包，可以点击&ldquo;<a href=\"https://github.com/xiaodiejinghong/Linux_NET/tree/master/Linux.NET_6\" target=\"_blank\">这里</a>&rdquo;进行下载。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、得到一个ASP.NET MVC 5 的框架应用</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 巧妇难为无米之炊，想要部署一个MVC 5的应用，必须先得到一个基于这个版本的MVC应用。当前我使用的开发工具是Visual Studio 2012，而ASP.NET MVC 5.0 却是跟 Visual Studio 2013 绑定一同发布，官方貌似还没有提供独立的模板安装文件。当然，我们也不可能为了做这么一个ASP.NET MVC 5.0的实验而跑去下载并安装一个Visual Studio 2013，因此我们要通过一些其他办法来获得这么一个应用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; NuGet，果然是一枚好东西，我们很容易的就在上面的发现了ASP.NET MVC 5.0 的包，这样，我们可以先使用Visual Studio建立一个MVC 4.0（或以下）的项目，然后在通过NuGet为该项目升级即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，我们先建一个ASP.NET MVC 4.0 的项目：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234010479.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后调出我们的控制台程序（具体可以在：&ldquo;工具-&gt;库程序包管理器-&gt;程序包管理器控制台&rdquo;调出），输入：&ldquo;Update-Package&rdquo;，让它自动的把所有当前的版本库升级。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234023693.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第三步，我们需要对&ldquo;~/View/Web.config&rdquo;中的配置进行修改。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 具体的修改内容，可以参照前言中说提及的那篇文章，&ldquo;Update the web.config files under the Views folder&rdquo;这一节中的1、2两个步骤，在这里，我把我修改后的Web.Config配置全部贴出来让各位读者参考。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_51c100d5-a1cd-45ec-be35-cd37bf4a0d21\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Web.Config</span> <img id=\"code_img_opened_51c100d5-a1cd-45ec-be35-cd37bf4a0d21\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_51c100d5-a1cd-45ec-be35-cd37bf4a0d21\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">sectionGroup </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"system.web.webPages.razor\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">section </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"host\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #ff0000;\"> requirePermission</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">section </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"pages\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #ff0000;\"> requirePermission</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">sectionGroup</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configSections</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web.webPages.razor</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">host </span><span style=\"color: #ff0000;\">factoryType</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">pages </span><span style=\"color: #ff0000;\">pageBaseType</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.WebViewPage\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">namespaces</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">namespace</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">namespace</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.Ajax\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">namespace</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.Html\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">namespace</span><span style=\"color: #0000ff;\">=\"System.Web.Routing\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">namespaces</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">pages</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web.webPages.razor</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">appSettings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">key</span><span style=\"color: #0000ff;\">=\"webpages:Enabled\"</span><span style=\"color: #ff0000;\"> value</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">appSettings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">httpHandlers</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">path</span><span style=\"color: #0000ff;\">=\"*\"</span><span style=\"color: #ff0000;\"> verb</span><span style=\"color: #0000ff;\">=\"*\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Web.HttpNotFoundHandler\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">httpHandlers</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n    <span style=\"color: #008000;\">&lt;!--</span><span style=\"color: #008000;\">\r\n        在视图页面中启用请求验证将导致验证在\r\n        控制器已对输入进行处理后发生。默认情况下，\r\n        MVC 在控制器处理输入前执行请求验证。\r\n        若要更改此行为，请对控制器或操作\r\n        应用 ValidateInputAttribute。\r\n    </span><span style=\"color: #008000;\">--&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">pages\r\n        </span><span style=\"color: #ff0000;\">validateRequest</span><span style=\"color: #0000ff;\">=\"false\"</span><span style=\"color: #ff0000;\">\r\n        pageParserFilterType</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.ViewTypeParserFilter, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #ff0000;\">\r\n        pageBaseType</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.ViewPage, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #ff0000;\">\r\n        userControlBaseType</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc.ViewUserControl, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">controls</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">assembly</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"</span><span style=\"color: #ff0000;\"> namespace</span><span style=\"color: #0000ff;\">=\"System.Web.Mvc\"</span><span style=\"color: #ff0000;\"> tagPrefix</span><span style=\"color: #0000ff;\">=\"mvc\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">controls</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">pages</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.webServer</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">validation </span><span style=\"color: #ff0000;\">validateIntegratedModeConfiguration</span><span style=\"color: #0000ff;\">=\"false\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">handlers</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">remove </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"BlockViewHandler\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"BlockViewHandler\"</span><span style=\"color: #ff0000;\"> path</span><span style=\"color: #0000ff;\">=\"*\"</span><span style=\"color: #ff0000;\"> verb</span><span style=\"color: #0000ff;\">=\"*\"</span><span style=\"color: #ff0000;\"> preCondition</span><span style=\"color: #0000ff;\">=\"integratedMode\"</span><span style=\"color: #ff0000;\"> type</span><span style=\"color: #0000ff;\">=\"System.Web.HttpNotFoundHandler\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">handlers</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.webServer</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span><span style=\"color: #000000;\">\r\n\r\nWeb.Config</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_51c100d5-a1cd-45ec-be35-cd37bf4a0d21\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n&lt;configuration&gt;\r\n  &lt;configSections&gt;\r\n    &lt;sectionGroup name=\"system.web.webPages.razor\" type=\"System.Web.WebPages.Razor.Configuration.RazorWebSectionGroup, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"&gt;\r\n      &lt;section name=\"host\" type=\"System.Web.WebPages.Razor.Configuration.HostSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" requirePermission=\"false\" /&gt;\r\n      &lt;section name=\"pages\" type=\"System.Web.WebPages.Razor.Configuration.RazorPagesSection, System.Web.WebPages.Razor, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" requirePermission=\"false\" /&gt;\r\n    &lt;/sectionGroup&gt;\r\n  &lt;/configSections&gt;\r\n\r\n  &lt;system.web.webPages.razor&gt;\r\n    &lt;host factoryType=\"System.Web.Mvc.MvcWebRazorHostFactory, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" /&gt;\r\n    &lt;pages pageBaseType=\"System.Web.Mvc.WebViewPage\"&gt;\r\n      &lt;namespaces&gt;\r\n        &lt;add namespace=\"System.Web.Mvc\" /&gt;\r\n        &lt;add namespace=\"System.Web.Mvc.Ajax\" /&gt;\r\n        &lt;add namespace=\"System.Web.Mvc.Html\" /&gt;\r\n        &lt;add namespace=\"System.Web.Routing\" /&gt;\r\n      &lt;/namespaces&gt;\r\n    &lt;/pages&gt;\r\n  &lt;/system.web.webPages.razor&gt;\r\n\r\n  &lt;appSettings&gt;\r\n    &lt;add key=\"webpages:Enabled\" value=\"false\" /&gt;\r\n  &lt;/appSettings&gt;\r\n\r\n  &lt;system.web&gt;\r\n    &lt;httpHandlers&gt;\r\n      &lt;add path=\"*\" verb=\"*\" type=\"System.Web.HttpNotFoundHandler\"/&gt;\r\n    &lt;/httpHandlers&gt;\r\n\r\n    &lt;!--\r\n        在视图页面中启用请求验证将导致验证在\r\n        控制器已对输入进行处理后发生。默认情况下，\r\n        MVC 在控制器处理输入前执行请求验证。\r\n        若要更改此行为，请对控制器或操作\r\n        应用 ValidateInputAttribute。\r\n    --&gt;\r\n    &lt;pages\r\n        validateRequest=\"false\"\r\n        pageParserFilterType=\"System.Web.Mvc.ViewTypeParserFilter, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"\r\n        pageBaseType=\"System.Web.Mvc.ViewPage, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"\r\n        userControlBaseType=\"System.Web.Mvc.ViewUserControl, System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\"&gt;\r\n      &lt;controls&gt;\r\n        &lt;add assembly=\"System.Web.Mvc, Version=5.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35\" namespace=\"System.Web.Mvc\" tagPrefix=\"mvc\" /&gt;\r\n      &lt;/controls&gt;\r\n    &lt;/pages&gt;\r\n  &lt;/system.web&gt;\r\n\r\n  &lt;system.webServer&gt;\r\n    &lt;validation validateIntegratedModeConfiguration=\"false\" /&gt;\r\n\r\n    &lt;handlers&gt;\r\n      &lt;remove name=\"BlockViewHandler\"/&gt;\r\n      &lt;add name=\"BlockViewHandler\" path=\"*\" verb=\"*\" preCondition=\"integratedMode\" type=\"System.Web.HttpNotFoundHandler\" /&gt;\r\n    &lt;/handlers&gt;\r\n  &lt;/system.webServer&gt;\r\n&lt;/configuration&gt;\r\n\r\nWeb.Config</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后，我们再建立一个简单的控制器和页面，然后把它跑起来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234503286.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我有几点本小节的小建议或解析：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、在建立初始项目的时候，建议选择MVC项目，而非WebForm应用程序。为什么呢？这里并不是说通过WebForm+MVC库的方式无法实现，而是如果各位读者采用WebForm+MVC库的方式实现的话，除了没有办法使用Visual Studio所提供的便利之外，建立的每一个View页面，后方都有可能带一个CS文件（如果你是通过建立aspx页面然后改后缀名之类的），并且编译发布之后的代码，View中的内容也有可能被编进了dll中。总而言之，这都将造成极大的不便。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、由于ASP.NET MVC 5仅支持.NET FrameWork 4.5以上的版本，因此新建项目是，FrameWork 4.0 或 以下的版本是无法升级到MVC 5 的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、使用NuGet升级，因为本次\"Update-Package\"没有带上任何的参数，因此系统会默认的帮你升级到最新的版本，换句话说，如果下次是MVC 6 的话，NuGet则会帮你升到最新版本（当然，是否成功则是另外一个问题啦）。各位读者也可以通过在项目资源管理器中&ldquo;右键本项目-&gt;管理NuGet程序包&rdquo;来对这些库进行相关操作。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、将一个简单的ASP.NET MVC 5 的应用部署到Linux中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，接下来，我们要将这个简单的小项目部署进Linux当中，由于使用的是.NET FrameWork 4.5，我手头上的mono版本担心会有所不足（原先版本为：mono 3.0.12）因此我把Linux中的Mono重新安装了一遍（说起惭愧，由于&ldquo;rm -rf /usr/local/mono/&rdquo; 时忘了关Jexus，重新编译的时候还Error了一次），现在的版本为：mono 3.2.3。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234604604.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把环境搭建好之后，再把这个小项目发布到Linux中（jexus网站配置和网站发布过程这里不再写了，又需要的读者可以翻阅前面的文章），然后尝试访问。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234620126.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯嗯，就知道不会有这么顺利的，我们把&ldquo;CustomError&rdquo;设为&ldquo;Off&rdquo;看看它报了些什么错。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234642569.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第一个错误报出来了，说是无法加载&ldquo;System.Web.Http.WebHost&rdquo;程序集中的一个方法。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先检查是否是因为缺少程序集造成的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234726764.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 检查发现，这个程序集已经自带在bin文件夹中，初步排除是缺少程序集造成的，并且改程序集的版本也是5.0.0.0，也排除版本问题造成的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再观察它是否和mono不兼容（如该版本库使用了和操作系统紧密关联的东西之类的），在观察之前这里有个小技巧，那就是先看看mono中有没有这个程序集，如果有，则把mono里面的库直接替换它，如果没有再慢慢观察。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234741443.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 很幸运的，找到了这一个对应的程序集，我们把它抽取出来，直接替换掉bin里面的这个程序集。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再刷新页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234812114.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，第二个问题报出来了，这次是程序集中缺少方法了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过命名空间来查找，我们寻寻觅觅的找到了bin文件夹中&ldquo;System.Web.Http.dll&rdquo;中的class HttpConfiguration：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234827873.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然Methods没有明确的写有&ldquo;get_Service&rdquo;这个方法，不过留意红色框框那里，那里使用了语法糖，程序集编译后会自动的产生这个方法，因此此dll中是有这个方法存在的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 与此同时，我们发现了mono中也存在这个程序集：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090523485769.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们再撬开mono中的这个程序集：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905234917311.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可以发现，这两个属性，虽然名称相同，但是却是分别两个不同的类型，细心的读者还能够发现，就连这个类本身都是有不少东西是不同的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这样的话，我们就把mono的这个程序集拿来替换掉bin下的这个程序集。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再次刷新我们的页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905235003894.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嘿嘿，出现了。结果证明，ASP.NET MVC 5又跑起来了。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 写在本回合最后，最大的感想就是，在漫步漫长的失败的荆棘道路之后之后，成功的终点或许就在你面前的一步，只是因为雾太大了你没有看清而已。做这个实验时，前一个晚上折腾到三点半都没有结果出来，当时就放弃了，不过第二天灵感一来了，又花了几分钟再次尝试，最后产生了这一篇文章。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，不多说，期待<a href=\"http://jhonge.net/Home/Single/7145682\">下一回合</a>见面。</span></p>\r\n</body>\r\n</html>',1409960525946,1410052799953,343,6,'7,9,8,10,12',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者大家好，好长一段时间没有更新文章了，自从参加工作之后，每天等待去做的工作没完没了，个人的时间也变得奢侈起来，今后要尽量从中脱身，抽更多的时间来完成自己想做的事情（希望如此）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 言归正传，<a href=\"../../../Home/Single/7028802\">上一回合</a>中，我们讨论学习了如何在Linux.NET中让一个 MVC 3.0 和 MVC 4.0 的项目在mono中跑起来。而就在早前几天，我在新浪微博中看到一位朋友转发了一篇有关如何将MVC4.0项目升级到MVC5.0的文章：《<a href=\"http://www.asp.net/mvc/tutorials/mvc-5/how-to-upgrade-an-aspnet-mvc-4-and-web-api-project-to-aspnet-mvc-5-and-web-api-2\" target=\"_blank\">How to Upgrade an ASP.NET MVC 4 and Web API Project to ASP.NET MVC 5 and Web API 2</a>》。我不禁感叹，这时代的步伐还真快，MVC还真的一年一版本的出，同时，一个想法在脑海中形成：既然MVC都发展到5.0了，那当前能否让它在Mono中跑起来呢？</span></p>',1409960525946),(29,'Linux.NET实战手记—自己动手改泥鳅（上）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者大家好，不知各位读者有否阅读在下的前一个系列《Linux.NET 学习手记》，在前一个系列中，我们从Linux中Mono的编译安装开始，到Jexus服务器的介绍，以及如何在Linux中简单的部署自己的WebForm程序和ASP.NET MVC应用程序。如果各位读者有阅读该系列的文章并且成功的实现上面的每一个功能点，那么小弟认为，你对Linux.NET已经入门，剩下的就是各自在Linux.NET中自由发挥，在这另一天地中做自己爱做的事，创出一番更新的新天地来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 为此，在下推出一个新的系列&mdash;&mdash;Linux.NET实战手记，该系列主要用于记录我在使用Linux.NET中的点点滴滴，在记录的同时与各位读者朋友分享。小弟不才，没有办法保证所有的方法都是最科学以及真正可行，如有任何不妥的地方，还望各位读者不吝指正。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 先进入本回合，在本回合中，我们会对一个开源的个人博客&mdash;&mdash;小泥鳅 进行改造，以其让它能够在Linux.NET中正常的使用，由于该过程内容较多，因此无法在一篇文章中叙述完成，我们将采用分回合的方式来逐步分解其过程。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本回合中，我们暂时停留在win下对小泥鳅进行初改造，我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、什么小泥鳅，为什么是小泥鳅</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、对小泥鳅的风险性、成功率的分析，以及促使成功的要素有哪些</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、对MS.NET与Mono使用相同数据库驱动器前提下的数据访问层改造。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本文中的代码已经托管到GitHub（<a href=\"https://github.com/xiaodiejinghong/Loachs4Mono\">https://github.com/xiaodiejinghong/Loachs4Mono</a>）中，有兴趣的读者可以点击打开下载。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、什么是小泥鳅，为什么是小泥鳅</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本文中，不想用过多的话语，一句话：小泥鳅，Loachs，是一款开源的个人博客系统，官网：<a href=\"http://www.loachs.com/\">http://www.loachs.com/</a>，原作者：沩水老农。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至于为什么选择小泥鳅，基于以下三个方面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、近期内可能需要用到一个个人博客系统。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、界面非常经典，基本上可以马上上手使用，也挺符合在下的审美观。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、早前一段时间就通过该系统，并且暂时对网上有哪些开源的个人博客系统不太清楚。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嘿嘿，说了半天还是个人原因，勿拍砖哈。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、对小泥鳅的风险性、成功率的分析，以及促使成功的要素有哪些</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 当我们决定去干一件事的时候，我们需要先考虑它的可行性，像&ldquo;把太阳用弓箭射下来&rdquo;之类的神话般的事情我们不会做，同样的，如果代码里面遍布WCF或者Entity FrameWork的项目，我们就无谓自我折腾了，即使真的成功了，也是杀敌一千自损八百，相当的不值得。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 而对于小泥鳅来说，有几点则是非常关键的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第一、它的FrameWork版本仅仅为FrameWork 2.0，没错，只是2.0，并没有采用最新版的FrameWork。这点是根本，倘若小泥鳅采用的是FrameWork 4.5或以上，这就麻烦了，要知道，微软&ldquo;刷版本&rdquo;的速度极快，早在前两天ASP.NET MVC 5.1和WebAPI 2.1就已经发布，可是我们扪心自问一下，自己或许连MVC 5.0的文档还没有看多几份，VS 2012 还没办法通过独立的安装方式得到MVC 5.0 的模板。同样的，纵使Mono团队的办事效率再高，也很难完美的跟上微软的节奏。因此，一旦小泥鳅使用了Mono还不支持的Framework版本，那么后面的东西都不用玩了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第二、我们看一下小泥鳅的项目组织机构：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905235824245.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 抛开那个不可用且不影响系统的Loachs.Build，小泥鳅系统中包含了：一个包含页面、css、js等与用户直接做交互的Web层，一个包含系统业务逻辑、工具类以及数据访问接口的核心代码区core层，以及一个实现core层中数据访问接口的数据访问层。相当的清晰明了。当我们想要对小泥鳅进行二次开发，修改它支持的数据库的时候，只需增加多一个实现core层数据访问接口的类库，即可完成对其他数据库的支持。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第三、再看看现有的数据访问层&ldquo;Loachs.Data.Access&rdquo;，我们需要的SQL语句都在里面，我们在制作其他数据库的访问层的时候，只需要把当前访问层的SQL语句稍微修改，让它在其他数据库中成功的跑起来即可，而由于标准的SQL语句的关系，我们所需要耗费的工作量大大的减少。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第四、由于FrameWork版本的关系，整套系统中没有出现在Linux.NET中知名的坑（如WCF、Entity FrameWork等），同时因为小泥鳅是一个相对独立的系统，没有与操作系统发生严重的关联关系，没有直接的调用到操作系统的API，我们无需对系统发生大规模的改造。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后、代码中对文件、对类、对URL基本上编码大小写敏感（个别除外），我们无需花更多的时间进行修正（当然，我们也可以在Jexus中设置Mono，让Linux.NET不区分大小写）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 综上所述，对小泥鳅的改造风险较低，成功率较高，值得改造。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、对MS.NET与Mono使用相同数据库驱动器前提下的数据访问层改造</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 相信很多的读者会或多或少的把MS的.NET与Mono作关联，把两者之间的动态库进行对等，其实这并不然，虽然对于大部分的库文件来说，两者之间是可以通用的，但是仍然有不少的库是需要加以区别的。在本小节中，我们先从通用的库入手，最大限度的完成初始的工作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905235931210.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先添加一层MYSQL的类库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140905235938408.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后用Nuget安装上我们的驱动。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 接着建立我们的Mysql数据库，各位读者可以通过手写、使用工具或者最简单的执行托管代码中&ldquo;app_data\"目录中的脚本进行创建（注意别漏了表的主键和自增）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后就是非常低级的拷贝代码、改代码工序，此处就不花费文字来说明了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 只是有几个地方需要注意一下的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、Linux中有大小写敏感，同样在MySQL中也不例外，小心你的表名和字段名</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、在\"Loachs.Data.Access\"中，表名和字段名都有中括号括起来了，记得要清除一下</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、分页功能在MySQL比较简便，不用top，直接使用limit即可</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 改好了之后，在&rdquo;Loachs.Core&ldquo;中&rdquo;Data/DataAccess.cs&ldquo;文件的path修改为&rdquo;Loachs.Data.MYSQL&ldquo;即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906000030802.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后编译，在vs自带的调试web服务器中发布。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906000046877.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正常运作即可，非常简单，跟在windows中开发一模一样。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，本回合到此先告一段落，不知各位读者是否由此感觉：&ldquo;这跟开发普通的.NET根本没有任何差别&rdquo;。是的，本就没有太大的差别，只要开发时多加一个心眼，多注意编码的规范，其余的就没什么太大的要求了。Linux.NET并不是什么遥不可及的东西，只要稍加动手，你很快就会沉浸在其中了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"/Home/Single/25116007\">下回合</a>中，我们将会把我们在Windows中改好的项目发布到Linux中，并对它运行时所出现的问题进行修复，我们将不再依赖于Visual Studio（事实上也无法依赖了），通过一些其他的小技巧来定位以及解决我们的问题。</span></p>\r\n</body>\r\n</html>',1409961717246,1409963239833,39,6,'7,10,8,9',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者大家好，不知各位读者有否阅读在下的前一个系列《Linux.NET 学习手记》，在前一个系列中，我们从Linux中Mono的编译安装开始，到Jexus服务器的介绍，以及如何在Linux中简单的部署自己的WebForm程序和ASP.NET MVC应用程序。如果各位读者有阅读该系列的文章并且成功的实现上面的每一个功能点，那么小弟认为，你对Linux.NET已经入门，剩下的就是各自在Linux.NET中自由发挥，在这另一天地中做自己爱做的事，创出一番更新的新天地来。</span></p>',1409961717246),(30,'Linux.NET实战手记—自己动手改泥鳅（下）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"/Home/Single/17266065\">上回合</a>中，我们不痛不痒的把小泥鳅的数据库从只能供在Windows下运行的Access数据库改为支持跨平台的MYSQL数据库，毫无营养的修改，本回合中，我们将把我们修改后得来的项目往Linux中部署、调试，让它适应Linux.NET的运行环境。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在本回合中，我们将讨论研究：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、由一个谎言引出另一个谎言</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、遭遇大量大小写问题怎么办</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、requestValidationMode？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　4、同一个房顶，却是不同的房间</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、由一个谎言引出另外一个谎言</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 当我们把小泥鳅部署上Linux之后，首页一般是没有问题的（首页能够打开，并且能够阅读里面的文章），但是当我们点击后台管理时，页面就开始变得奇怪起来，它没有像我们想象那样，出现一个填写用户名密码的界面，而是如下图所示的&ldquo;问题&rdquo;页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001129819.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过阅读堆栈跟踪，我们大概知道程序用一个&ldquo;AdminPage.CheckLoginAndPermission&rdquo;的地方进去之后就开始报错，为此，我们需要先确定这个叫做&ldquo;CheckLoginAndPermission&rdquo;的东西到底是Mono或其他三方类库里的东西还是我们代码里的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 判断的方法也挺简单，对着Visual Studio 按&ldquo;Ctrl+Shirt+F&rdquo;，没错，就是查找功能，只要我们能够在项目中找到相关的代码，那就证明改方法是我们项目中自己的东西。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001148912.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过搜索，结果还真让我们找到症结的所在，于是，我们就顺藤摸瓜的进入到该方法里面，该方法的代码如下：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_4c09e9de-5343-41ce-bb8c-43db58f58752\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">CheckLoginAndPermission</span> <img id=\"code_img_opened_4c09e9de-5343-41ce-bb8c-43db58f58752\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_4c09e9de-5343-41ce-bb8c-43db58f58752\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n    <span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> 检查登录和权限\r\n    </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> CheckLoginAndPermission()\r\n    {\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #000000;\">!</span><span style=\"color: #000000;\">PageUtils.IsLogin)\r\n        {\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n        UserInfo user </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> UserManager.GetUser(PageUtils.CurrentUserId);\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (user </span><span style=\"color: #000000;\">==</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">)       </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">删除已登陆用户时有效</span>\r\n<span style=\"color: #000000;\">        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (StringHelper.GetMD5(user.UserId </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(user.UserName) </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> user.Password) </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> PageUtils.CurrentKey)\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (PageUtils.CurrentUser.Status </span><span style=\"color: #000000;\">==</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n        {\r\n            ResponseError(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您的用户名已停用</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您的用户名已停用,请与管理员联系!</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n\r\n        </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] plist </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] { </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">themelist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">themeedit.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">linklist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">userlist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">setting.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> ,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">categorylist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">taglist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">commentlist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">};\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (PageUtils.CurrentUser.Type </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">)UserType.Author)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> pageName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> System.IO.Path.GetFileName(HttpContext.Current.Request.Url.ToString()).ToLower();\r\n\r\n            </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> p </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> plist)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (pageName </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> p)\r\n                {\r\n                    ResponseError(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">没有权限</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您没有权限使用此功能,请与管理员联系!</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                }\r\n            }\r\n        }\r\n    }</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_4c09e9de-5343-41ce-bb8c-43db58f58752\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    /// &lt;summary&gt;\r\n    /// 检查登录和权限\r\n    /// &lt;/summary&gt;\r\n    protected void CheckLoginAndPermission()\r\n    {\r\n        if (!PageUtils.IsLogin)\r\n        {\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n        UserInfo user = UserManager.GetUser(PageUtils.CurrentUserId);\r\n\r\n        if (user == null)       //删除已登陆用户时有效\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n\r\n        }\r\n\r\n        if (StringHelper.GetMD5(user.UserId + HttpContext.Current.Server.UrlEncode(user.UserName) + user.Password) != PageUtils.CurrentKey)\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n\r\n        if (PageUtils.CurrentUser.Status == 0)\r\n        {\r\n            ResponseError(\"您的用户名已停用\", \"您的用户名已停用,请与管理员联系!\");\r\n        }\r\n\r\n\r\n        string[] plist = new string[] { \"themelist.aspx\", \"themeedit.aspx\", \"linklist.aspx\", \"userlist.aspx\", \"setting.aspx\" ,\"categorylist.aspx\",\"taglist.aspx\",\"commentlist.aspx\"};\r\n        if (PageUtils.CurrentUser.Type == (int)UserType.Author)\r\n        {\r\n            string pageName = System.IO.Path.GetFileName(HttpContext.Current.Request.Url.ToString()).ToLower();\r\n\r\n            foreach (string p in plist)\r\n            {\r\n                if (pageName == p)\r\n                {\r\n                    ResponseError(\"没有权限\", \"您没有权限使用此功能,请与管理员联系!\");\r\n                }\r\n            }\r\n        }\r\n    }</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 咋眼一看，一个验证账户登录与权限的方法，如果不满足则自动的跳转到各自的页面，没有什么特别的，也没有什么问题。但是，程序的异常就是出现在这里，因此我们需要把他找出来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者第一时间想到的可能是马上按&ldquo;F5&rdquo;或者&ldquo;附加到进程&rdquo;，依赖Visual Studio 这个强大的IDE来定位哪一步出了问题。但是，别忘了，我们的程序在Windows下是没有问题的，并且当前的操作系统也不是Windows，因此Visual Studio的功能我们是无法使用的。或许，有些读者还知道有&ldquo;Mono Develop&rdquo;这个IDE，该IDE可以在Linux中使用，可惜，我们的Linux中并没有安装这个工具，甚至连Xwindows也没有安装，Linux的运行级别也只是&ldquo;init-3&rdquo;级别，要弄&ldquo;Mono Develop&rdquo;太麻烦了，我们需要一些有趣的手段来定位我们的问题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 先回想一下，既然成功发布，那就证明项目是成功的编译，而在运行时出现却报错，则表示，这个是一个运行时异常。运行时异常，其实我们也会经常遇到，譬如让程序读一个不存在的文件、数据库连接字串写错之类的，这些都属于运行时异常，只有程序运行到这一步出现错误的时候，程序才终止继续运行并提示错误。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 根据这一原理，我们可以自己定义一些&ldquo;谎言&rdquo;（手动的添加一些运行时错误），让程序运行到此处终止并提示错误，通过比较程序提示的错误，我们就可以定位到项目中发生错误的哪一行代码了，通过一个谎言来引出另外一个谎言。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001433649.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 譬如我在检查是否登陆这里添加一个&ldquo;谎言&rdquo;。</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_a8724796-dc56-40ac-be9a-91bfac2b1b72\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">谎言的CheckLoginAndPermission</span> <img id=\"code_img_opened_a8724796-dc56-40ac-be9a-91bfac2b1b72\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_a8724796-dc56-40ac-be9a-91bfac2b1b72\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>    <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n    <span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> 检查登录和权限\r\n    </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n    <span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> CheckLoginAndPermission()\r\n    {\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #000000;\">!</span><span style=\"color: #000000;\">PageUtils.IsLogin)\r\n        {\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n        UserInfo user </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> UserManager.GetUser(PageUtils.CurrentUserId);\r\n\r\n        </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">在这里添加谎言</span>\r\n        <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">decimal</span><span style=\"color: #000000;\">.Parse(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">小蝶惊鸿</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (user </span><span style=\"color: #000000;\">==</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">)       </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">删除已登陆用户时有效</span>\r\n<span style=\"color: #000000;\">        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (StringHelper.GetMD5(user.UserId </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(user.UserName) </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> user.Password) </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> PageUtils.CurrentKey)\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">login.aspx?returnurl=</span><span style=\"color: #800000;\">\"</span> <span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (PageUtils.CurrentUser.Status </span><span style=\"color: #000000;\">==</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n        {\r\n            ResponseError(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您的用户名已停用</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您的用户名已停用,请与管理员联系!</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] plist </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] { </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">themelist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">themeedit.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">linklist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">userlist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">setting.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">categorylist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">taglist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">commentlist.aspx</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> };\r\n        </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (PageUtils.CurrentUser.Type </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">)UserType.Author)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> pageName </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> System.IO.Path.GetFileName(HttpContext.Current.Request.Url.ToString()).ToLower();\r\n\r\n            </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> p </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> plist)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (pageName </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> p)\r\n                {\r\n                    ResponseError(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">没有权限</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">您没有权限使用此功能,请与管理员联系!</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_a8724796-dc56-40ac-be9a-91bfac2b1b72\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">    /// &lt;summary&gt;\r\n    /// 检查登录和权限\r\n    /// &lt;/summary&gt;\r\n    protected void CheckLoginAndPermission()\r\n    {\r\n        if (!PageUtils.IsLogin)\r\n        {\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n        UserInfo user = UserManager.GetUser(PageUtils.CurrentUserId);\r\n\r\n        //在这里添加谎言\r\n        var a = decimal.Parse(\"小蝶惊鸿\");\r\n\r\n        if (user == null)       //删除已登陆用户时有效\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n\r\n        }\r\n\r\n        if (StringHelper.GetMD5(user.UserId + HttpContext.Current.Server.UrlEncode(user.UserName) + user.Password) != PageUtils.CurrentKey)\r\n        {\r\n            PageUtils.RemoveUserCookie();\r\n            HttpContext.Current.Response.Redirect(\"login.aspx?returnurl=\" + HttpContext.Current.Server.UrlEncode(RequestHelper.CurrentUrl));\r\n        }\r\n\r\n        if (PageUtils.CurrentUser.Status == 0)\r\n        {\r\n            ResponseError(\"您的用户名已停用\", \"您的用户名已停用,请与管理员联系!\");\r\n        }\r\n\r\n        string[] plist = new string[] { \"themelist.aspx\", \"themeedit.aspx\", \"linklist.aspx\", \"userlist.aspx\", \"setting.aspx\", \"categorylist.aspx\", \"taglist.aspx\", \"commentlist.aspx\" };\r\n        if (PageUtils.CurrentUser.Type == (int)UserType.Author)\r\n        {\r\n            string pageName = System.IO.Path.GetFileName(HttpContext.Current.Request.Url.ToString()).ToLower();\r\n\r\n            foreach (string p in plist)\r\n            {\r\n                if (pageName == p)\r\n                {\r\n                    ResponseError(\"没有权限\", \"您没有权限使用此功能,请与管理员联系!\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 编译发布后再刷新页面。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001544226.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们得到了这个运行时异常，图明显的跟之前的不同，那就证明，刚才的异常在此&ldquo;谎言&rdquo;的下方。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们不断的把我们的&ldquo;谎言&rdquo;（手动添加的运行时错误）往下挪，直到它把真正的&ldquo;谎言&rdquo;（原本的运行时错误）引出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过这种方法的迭代，我们大概定位到这里：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001612185.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再结合它报给我们的错误&ldquo;Object reference not set to an instance of an object&rdquo;（未将对象实例化），我们可以推演出，这里有东西为null。在这里，只有user为需要实例化的类（PageUtils.CurrentKey是一个static的属性），我们可以猜或许是user为null。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 为了验证，我们可以做如下动作：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001639642.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过验证，我们发现我们的推理是对的，就是user为null造成了此处的失败。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 但是，为什么user为空呢？或者说，难道说小泥鳅中原程序中没有对user作出checknull的判断吗？我们先追述一下user的来源，user来自于本方法中：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001707264.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 通过传入一个CurrentUserId，来获得user类，而在GetUser方法中，代码如下：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_e9f8068a-e55a-4116-90f1-1dc5b5f2bd33\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">GetUser</span> <img id=\"code_img_opened_e9f8068a-e55a-4116-90f1-1dc5b5f2bd33\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_e9f8068a-e55a-4116-90f1-1dc5b5f2bd33\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre>        <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;summary&gt;</span>\r\n        <span style=\"color: #808080;\">///</span><span style=\"color: #008000;\"> 获取用户\r\n        </span><span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;/summary&gt;</span>\r\n        <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;param name=\"userId\"&gt;&lt;/param&gt;</span>\r\n        <span style=\"color: #808080;\">///</span> <span style=\"color: #808080;\">&lt;returns&gt;&lt;/returns&gt;</span>\r\n        <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> UserInfo GetUser(</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> userId)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (UserInfo user </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> _users)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (user.UserId </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> userId)\r\n                {\r\n                    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> user;\r\n                }\r\n            }\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">;\r\n        }\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_e9f8068a-e55a-4116-90f1-1dc5b5f2bd33\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">        /// &lt;summary&gt;\r\n        /// 获取用户\r\n        /// &lt;/summary&gt;\r\n        /// &lt;param name=\"userId\"&gt;&lt;/param&gt;\r\n        /// &lt;returns&gt;&lt;/returns&gt;\r\n        public static UserInfo GetUser(int userId)\r\n        {\r\n            foreach (UserInfo user in _users)\r\n            {\r\n                if (user.UserId == userId)\r\n                {\r\n                    return user;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; CurrentId实际上还是一个userid，通过比较两个userid的值来获得user实例。还在想为什么没有得到null吗？这里是一个陷阱，我们根本就没有登陆，所以根本就没有CurrentUserId（或者说userid的值为null），因此，GetUser方法的输出东西应该也是为null。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 难道小泥鳅没有对输出为null的情况作出处理吗？答案是否定的，小泥鳅中已经有判断，不然在Windows中就已经报错了，如果用户没有登陆（没有登陆就必定没有CurrentUserId了），页面就跳转到&ldquo;login.aspx&rdquo;页面（登陆页面）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906001933225.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 逻辑上当然是这样的，但是现实却并非这样，页面没有发生跳转，或者更确切的说，程序没有到达Redirect方法之后进行重定向并终止&ldquo;CurrentUserId&rdquo;方法中接下来的代码。看清楚幕后的&ldquo;元凶&rdquo;之后，想要对付它也变得简单起来，我们只需手动的让它终止运行方法内接下来的代码就可以了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在Redirect下方加上Return（方法内所有的Redirect都加上）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002011187.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再次编译发布，我们就可以看到我们的登陆页面了。<img src=\"/Static/Images/140906002022389.jpg\" alt=\"\" /></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、如果遇到大量大小写问题怎么办？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们进入后台管理页面之后，尝试添加一篇文章：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002130129.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 为了添加图片，我们需要点击&ldquo;插入图片/文件&rdquo;：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090600213914.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后就&hellip;&hellip;，上面说&ldquo;\'UserControls/upfilemanager.ascx&rdquo;不存在。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002209906.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 典型的大小写问题，\"UserControls\"文件夹的大小写。解决办法很简单，把文件夹名按照大小写改好就ok。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正如我上回合中说的，小泥鳅的大小写还是比较严格的，基本上都是大小写敏感，但是，如果我们现在面对的不是小泥鳅，而是一个比较麻烦项目，里面充斥着大量的大小写问题，我们再对此进行地毯式的搜索并修正就显得可行性极低了（还不如推倒重写呢）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 面对这种情况，我们也是有&ldquo;作弊码&rdquo;可以行的，我们可以通过修改jws的脚本文件，让Mono对文件目录不区分大小写（注意，是文件目录，SQL语句还是区分的，因为解析SQL语句是数据库的事情，而不是Mono的事情）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们只需打开&ldquo;jws&rdquo;文件，并把Mono的IOMAP设置为all即可（jws中只需删掉&ldquo;#&rdquo;号）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002251793.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 重启一下Jexus，再尝试添加：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002302833.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; ok，我们又搞定了一个问题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、requestValidationMode？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 也不记得从什么时候开始，大概是.NET FrameWork 4.0 吧，我们使用富文本编辑器的时候，提交时会出现&ldquo;Form表单有危险&hellip;&hellip;&rdquo;之类的提示，.NET也自动的帮我们验证从页面中Post回来的报文，有尖括号之类的敏感字串会自动的被.NET拒绝接收，解决的办法也很容易，网上是大把大把的，基本上就是把验证的模式从&ldquo;4.0&rdquo;（或更高）改为&ldquo;2.0&rdquo;就ok了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 但是，在我们这里，小泥鳅是基于.NET 2.0哦，所以应该就不会出现上述这种情况吧？！我们先试着添加一点东西：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002837961.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再点击提交：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906002855896.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 片刻的广告之后，我们只能说&ldquo;嘿嘿~~&rdquo;了，Mono把小泥鳅用ASP.NET 4.0 来运行了，既然它是使用.NET FrameWork 4.0 的模式来运行，那么我们也只需使用相应的解决办法即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我在&ldquo;web.config&rdquo;中的&ldquo;httpruntime&rdquo;节点中加上&ldquo;requestValidationMode&rdquo;（在这里，我直接就用VI加了，无需重新编译发布）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090600293111.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后我们重新添加文章并保存，就可以在首页中找到了我们的文章了：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090600294253.jpg\" alt=\"\" /></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">四、同一个房顶，却是不同的房间</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 整好了小泥鳅在Linux.NET中的运行异常之后，我们还需要增加一个对Sqlite数据库的支持，虽然平时经常听到这一款的数据库，但是却从来都没有真正的接触过，直到开始增加此扩展的时候还是第一次（初体验？！），多亏了通用性高的SQL语句和ADO.NET，使我在仅仅知道它有五种数据类型并从Nuget哪里获得驱动的情况下就做好了对Sqlite的扩展（于是悲剧来了）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在Windows中测试通过之后，我们迫不及待的往Linux中发布，然后就：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906003102578.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在Linux.NET中，如果遇到DLL明明就在bin目录中，但是程序却报找不到或者无法加载之类的，一般要么就是DLL真的找不到（文件大小写问题）、还有其他依赖的DLL没有成功加载或者是直接不兼容造成的。排除了大小写问题之后，我们找找Mono中有没有带有对Sqlite作驱动的dll。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906003118688.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可以发现，Mono中已经自带了Sqlite的驱动，并且与在MS.NET中是处于两个不同的命名空间。此外，这里还有一个图片需要让读者们看看的：<img src=\"/Static/Images/140906003140667.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不仅命名空间不同，大小写也是有点点差别，所以，千言万语都不说了，改吧~~！</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，小泥鳅的改造基本上完成了，需要代码的读者可以在GitHub中找到（地址在上集中有说），能力有限，如果写得有不对的欢迎各位读者留言，有建议或者意见的也欢迎留言，我们下回见~~！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; PS：今年是&ldquo;码&rdquo;年，在这里小蝶惊鸿给各位读者拜年，祝各位读者新年快乐，恭喜发财。</span></p>\r\n</body>\r\n</html>',1409962403202,1409963586355,24,6,'7,10,8',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"../../../Home/Single/17266065\">上回合</a>中，我们不痛不痒的把小泥鳅的数据库从只能供在Windows下运行的Access数据库改为支持跨平台的MYSQL数据库，毫无营养的修改，本回合中，我们将把我们修改后得来的项目往Linux中部署、调试，让它适应Linux.NET的运行环境。</span></p>',1409962403202),(31,'如何让我们的PHP在Jexus中跑起来','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最近一段时间，经常看到不少的朋友在问，应该怎么设置才能够让Jexus支持PHP。其实，Jexus在很早之前就已经是可以支持PHP，像Apache或Nginx一样充当PHP的Web服务器的。不过由于没有这个方面的需求，我也一直没有用它这一项功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早在前两天，群里一名朋友找到我，他想把一个PHP版的BBS改为.NET版的，问我有没有兴趣，我看了下这个BBS的用途，也乐意的接受了他的邀请。于是问题就来了，这个BBS是PHP版的，我需要先把它挂上服务器，先大概的&ldquo;玩&rdquo;一下有些什么功能、好不好使，但是当前手头上，我没有任何可以供PHP运行的环境（早在一年前我就已经没有和LAMP接触了），我需要快速的获得一个PHP的运行环境。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 搭建一个新的，这是我唯一的一个选择。如果这是一个新装的系统，并且我只是想单纯的跑PHP的话，我也许会选择经典的LAMP构架（Linux+Apache+Mysql+PHP）,但是由于当前的系统中已经存在了一套完整的Linux.NET环境，所以我也不折腾了，直接采用最简单的方式，快速的这个BBS跑起来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下面开始动手：</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们使用的是最简单最快捷的方式来搭建，因此我选择YUM来安装所需要的所有组建，需要源码安装的朋友可以自行套弄</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们先获得我们的PHP环境：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; yum install -y php php-mysql php-common php-gd php-mbstring php-mcrypt php-devel php-xml</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906232947738.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 接着是MYSQL数据库：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; yum install -y mysql-server</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233004142.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Jexus对PHP的支持有三种方式，他们分别是：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、使用Jexus自带的CGI去支持</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、使用PHP的CGI</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、使用PHP.NET</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 详细的可以看：<a href=\"http://www.linuxdot.net/bbsfile-3132\">http://www.linuxdot.net/bbsfile-3132</a></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我使用最简单的方式&mdash;&mdash;使用Jexus自带的CGI去支持。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们需要修改PHP.INI文件，由于我们是通过Yum安装的，所以默认的地方是&ldquo;/etc/php.ini&rdquo;（自己源码编译的就不是哦）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090623305155.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 找到&ldquo;cgi.force_redirect=1&rdquo;这一行，然后把前面的注释去掉，并把&ldquo;1&rdquo;改为&ldquo;0&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233059544.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后，我们找到Jexus程序的存放目录，并修改&ldquo;Jws.conf&rdquo;文件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; vi /usr/local/jexus/jws.conf</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233140821.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把&ldquo;php-fcgi.set=/usr/bin/php-cgi,6&rdquo;前面的注释去除，这样Jexus就就可以通过CGI的方式支持PHP了</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233147189.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存退出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 等等，这里还有一点没有完成的，要支持PHP，我们还要在挂PHP的那个网站项目的配置文件中指明一下，我们新建一个名为PHP的网站项目</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cp /usr/local/jexus/siteconf/default /usr/local/jexus/siteconf/php</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后用VI打开它</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090623322394.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 修改好我们的端口和根目录配置，然后注意下方红框的地方，把前面的注释去除，再保存退出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 重启下Jexus。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; /usr/local/jexus/jws restart</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233258845.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里我解析一下：如果各位读者像我一样使用Jexus自带的CGI来支持PHP的，请除去前一个CGI的注释（红框那个），如果是用PHP的CGI的请出去下面那个。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们在根目录中建一个显示phpinfo的文件（懂PHP的人都知道怎么回事），然后浏览器中访问下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906233309827.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嘿嘿，然后就出来了。很简单，也很快，不过冲一杯咖啡的时间就搞好了，然后我们可以把自己的PHP项目挂上去跑了。</span></p>\r\n</body>\r\n</html>',1410046539721,1410046571550,80,6,'11,9,14',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最近一段时间，经常看到不少的朋友在问，应该怎么设置才能够让Jexus支持PHP。其实，Jexus在很早之前就已经是可以支持PHP，像Apache或Nginx一样充当PHP的Web服务器的。不过由于没有这个方面的需求，我也一直没有用它这一项功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早在前两天，群里一名朋友找到我，他想把一个PHP版的BBS改为.NET版的，问我有没有兴趣，我看了下这个BBS的用途，也乐意的接受了他的邀请。于是问题就来了，这个BBS是PHP版的，我需要先把它挂上服务器，先大概的&ldquo;玩&rdquo;一下有些什么功能、好不好使，但是当前手头上，我没有任何可以供PHP运行的环境（早在一年前我就已经没有和LAMP接触了），我需要快速的获得一个PHP的运行环境。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 搭建一个新的，这是我唯一的一个选择。如果这是一个新装的系统，并且我只是想单纯的跑PHP的话，我也许会选择经典的LAMP构架（Linux+Apache+Mysql+PHP）,但是由于当前的系统中已经存在了一套完整的Linux.NET环境，所以我也不折腾了，直接采用最简单的方式，快速的这个BBS跑起来。</span></p>',1410046539721),(32,'用迭代实现无限级分类','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 说起那个无限级分类，相信很多人都知道是什么东西，也曾经做过。我也相信，大家用得最多的实现方式就是做一个递归。最近我也要做一个带无限级分类的菜单，但是我又不想用递归来做，所以我需要用其他方式来实现，那就是迭代了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，我需要定义一个实体模型，这举一个省市无限级的例子：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Loaction\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> PID { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Name { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }    </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">地方名</span>\r\n    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> Level { </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">; </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">; }      </span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">深度</span>\r\n<span style=\"color: #000000;\">}</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后写方法，这里需要利用到栈的后进先出的特点：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\">    <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Loaction</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> Soft(List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Loaction</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> data, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> pid)\r\n        {\r\n            Stack task </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Stack();\r\n            task.Push(pid);\r\n            List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Loaction</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> tree </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Loaction</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\r\n            </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> level </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\"> (task.Count </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> flag </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">false</span><span style=\"color: #000000;\">;\r\n                </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">; i </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> data.Count; i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)\r\n                {\r\n                    </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> l </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> data[i];\r\n                    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (l.PID </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> pid)\r\n                    {\r\n                        pid </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> l.ID;\r\n                        task.Push(l.ID);\r\n                        l.Level </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> level;\r\n                        level</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">;\r\n                        tree.Add(l);\r\n                        data.Remove(l);\r\n                        i</span><span style=\"color: #000000;\">--</span><span style=\"color: #000000;\">;\r\n                        flag</span><span style=\"color: #000000;\">=</span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">;\r\n                    }\r\n                }\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #000000;\">!</span><span style=\"color: #000000;\">flag)\r\n                {\r\n                    task.Pop();\r\n                    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (task.Count </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n                    {\r\n                        pid </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Convert.ToInt32(task.Peek());\r\n                        level</span><span style=\"color: #000000;\">--</span><span style=\"color: #000000;\">;\r\n                    }\r\n                }\r\n            }\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> tree;\r\n        }</span></span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后准备数据-&gt;调用-&gt;输出：然后效果如下：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"font-family: 宋体; font-size: 12pt;\">        <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> data </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> List</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Loaction</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">();\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">北京</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广东</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">上海</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">重庆</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">黑龙江</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">6</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">丰台</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">7</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">海淀</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">8</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">石景山</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">9</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">3</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">上海市</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">广州</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">11</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">齐齐哈尔</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">12</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">茂名</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">13</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">深圳</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">14</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">5</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">哈尔滨</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">15</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">4</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">重庆市</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">东莞</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">17</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">中山</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            data.Add(</span><span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Loaction() { ID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">18</span><span style=\"color: #000000;\">, PID </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">16</span><span style=\"color: #000000;\">, Name </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">厚街镇</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> tree </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Soft(data, </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">);\r\n\r\n            </span><span style=\"color: #0000ff;\">foreach</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> t </span><span style=\"color: #0000ff;\">in</span><span style=\"color: #000000;\"> tree)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> sb </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> StringBuilder();\r\n                </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">; i </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> t.Level; i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">)\r\n                {\r\n                    sb.Append(</span><span style=\"color: #800000;\">\"</span>  <span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n                   \r\n                } \r\n                sb.Append(t.Name);\r\n                Console.WriteLine(sb.ToString());\r\n            }\r\n            Console.ReadKey();\r\n        }</span></span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;<img src=\"/Static/Images/140906234213499.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 就是这个样子。。。。。(END)</span></p>\r\n</body>\r\n</html>',1410046727661,1410047042893,27,6,'10,15',0,1,0,'<p><span style=\"font-family: 宋体; font-size: medium;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 说起那个无限级分类，相信很多人都知道是什么东西，也曾经做过。我也相信，大家用得最多的实现方式就是做一个递归。最近我也要做一个带无限级分类的菜单，但是我又不想用递归来做，所以我需要用其他方式来实现，那就是迭代了。</span></span></p>',1410046727661),(33,'警惕！高版本VS发布时预编译导致Mono中Razor找不到视图','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前一段时间，一位朋友在Q群里面找到我，说它按照《Linux.NET学习手记》的操作，把一个ASP.NET MVC 4.0的项目部署到Mono之后出现Razor无法找到视图的现象。当时费了一番周章才把问题解决。而最近一段时间，群里也有其他的朋友出现相同的问题，随着时间的推移，想必会有越来越多朋友会使用高版本的VS，于是我把当时的情况重现出来，并把解决办法记录下来。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 像往常一样，我们创建了一个MVC4的项目。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906234506314.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后添加了一个视图，默认的那个（/Home/Index），然后，再发布到Linux.NET里面。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/1409062345235.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后就出现了如图的这个令人不愉快的页面，我们的Razor找不到视图了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906234553287.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 而事实上，我们是有这个视图的，并且也不存在常见的大小写和权限问题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 由于近期为了体验.NET Nactive，装了个VS2013并打上了Update包，所以我把目光聚焦在了这次的更新当中，不排除更新是系统的一些配置诸如Config或者DLL出现变化而导致Linux.NET的不兼容。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 经过一番的排查，我突然发现，VS在发布的地方多了个容易让人忽略的东西（平时折叠起来了）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906234617552.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正如图中所见的，选项中多出了&ldquo;在发布期间预编译&rdquo;这么一个选项。把这个勾去掉，然后重新发布。再次刷新页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140906234645779.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Razor引擎又恢复正常了，视图被重新找到了。&nbsp; </span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 目前发现VS2013和VS2012 Update2以上 会出现&ldquo;发布时预编译&rdquo;这个功能，各位朋友需要多加留意。</span></p>\r\n</body>\r\n</html>',1410047261799,1410047261799,97,6,'7,12,8,9',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前一段时间，一位朋友在Q群里面找到我，说它按照《Linux.NET学习手记》的操作，把一个ASP.NET MVC 4.0的项目部署到Mono之后出现Razor无法找到视图的现象。当时费了一番周章才把问题解决。而最近一段时间，群里也有其他的朋友出现相同的问题，随着时间的推移，想必会有越来越多朋友会使用高版本的VS，于是我把当时的情况重现出来，并把解决办法记录下来。</span></p>',1410047261799),(34,'绿色版的Linux.NET——“Jws.Mono”','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Linux.NET环境的搭建，不仅是一项比较耗时的事情，同时也是一项略显复杂繁琐的事情。特别是对于近期的几个Mono版本，由于官方所提供的源码包中出现代码文件的缺失，这总让我们的付出变得徒劳。另外一方面，由于Linux.NET的环境搭建涉及到比较多Linux的操作知识，这无疑增加了它的学习使用成本，提高了学习的门槛，这也令不少习惯于Windows中开发ASP.NET的开发者对其望而生畏。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 降低Linux.NET的学习难度，需要从环境部署开始着手，为此，Jexus的作者宇内给我们制作了一款绿色版的Linux.NET环境包，当中提供了Jexus Web Server以及Linux.NET的运行环境，带来了解压即可用，删除即卸载便利，同时还降低了Linux,NET初学者的学习门槛。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 马上进入本文的主题，本文主要讲述：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、jws.mono的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、jws.mono的使用方法</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、自己动手组装一个jws.mono</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、jws.mono的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; jws.mono(暂定名)是针对Linux.NET Web诞生的一个绿色的环境包，当中包含了Jexus Web Server、.NET的编译器、运行时以及相关常用的类库。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 目前提供的版本以及下载地址如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　(1)、供64位CentOS 6.x使用的jwsmono-centos6-x64</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　　　 其下载地址可点击：<a href=\"http://yun.baidu.com/share/link?shareid=628191582&amp;uk=1950547713\" target=\"_blank\">百度云高速下载（高速、推荐）</a></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　(2)、供64位Ununtu 11+ 使用的jwsmono-ubuntu-x64</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　　　 其下载地址可点击：<a href=\"http://yun.baidu.com/share/link?shareid=652209321&amp;uk=1950547713\" target=\"_blank\">百度云高速下载（高速、推荐）</a></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 更多发行版本以及操作系统位数的包在制作后会继续发放。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同时关于jws.mono的正式名也欢迎各位读者留言献名（主要体现便捷快速部署且绿色干净）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如遇无法下载或有任何疑问可加入Linux.NET群（102732979）或到linuxdotnet大本营中发帖提问</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、jws.mono的使用方法</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; jws.mono的使用方法比较简单，包中也有相应详细的说明文档，参照文档即可完成部署。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 而CentOS和Ubuntu两种环境报的使用方法完全一致，因此在这里我抽取其中一种来进行简略的讲解。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 部署的方式主要通过以下三步(此处随机抽取Ubuntu来作为范例)：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第一步：上传并解压软件包</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; tar zxf jwsmono-ubuntu-x64.tar.gz</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907001734626.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第二步：把jws.mono目录移动到根目录中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; mv jws.mono /</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907001848922.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 第三步：启动jws</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; /jws.mono/jexus/jws start</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907001805965.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 即可完成环境包的部署，非常便捷。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 检查80端口以及info</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907001926342.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907001929400.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 80端口已被监听，info页面也访问正常，部署完成。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; jws.mono的卸载也很简单，只需：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; /jws.mono/jexus/jws stop</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; rm -rf /jws.mono/ 即可</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002000201.png\" alt=\"\" /></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、自己动手组装一个jws.mono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 绿色版的环境包固然不错，又方便又干净，但是，毕竟它的&ldquo;原材料&rdquo;来自于编译所生成的各类型文件，而Linux与Windows明显不同的一个特点就是发行版本众多，并且源码编译过程中受系统的软硬件各方面的因素影响较大，我们所现有提供的绿色环境包可能与部分读者的系统所不兼容（现提供环境包的是针对Jexus使用的，程序集库方面有不少删减，也可能无法满足部分读者的需要【特别是需要做Winform开发的读者】），如果遇到了这种情况，我们可以考虑定制一个自己专属的绿色环境包。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本节中我们将学习如何组装出自己专属的绿色环境包。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 二话不说，我们先看看我们需要些什么&ldquo;工具&rdquo;以及&ldquo;原材料&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 做这个实验，我需要准备两台的Linux系统，第一套中包含由源码编译得出的整套Linux.NET环境，而另外一套则是单纯的新装完系统，非常干净。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002043437.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 开始动手了，在这里，我说明下，本机的Linux.NET环境搭建文件路径与<a href=\"http://jhonge.net/Home/Single/19747286\">《Linux.NET学习手记（1）》</a>一致，因此不知道环境安装路径的读者可以去翻翻那篇文章。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先在/home/中创建一个jono目录，这作为我们放&ldquo;原材料&rdquo;的地方</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; mkdir /home/jono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后把jexus和mono都从系统中拷贝一份到jono中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cp -r /usr/local/jexus/ /home/jono/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; cp -r /usr/local/mono/ /home/jono/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把jono打包，并从Linux中取出到Windows中（打包只为传输更快）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; tar czf /home/jono.tar.gz /home/jono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002158359.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 回到Windows中并把jono.tar.gz解压。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002205121.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 里面包含了两个文件夹，分别是mono和jexus。mono文件夹中包含了全套的Linux.NET库以及Runtime，如果各位读者想对软件包进行定制瘦身，可以从这里入手进行修改，在本文中，我们制作的是&ldquo;完全版&rdquo;，提供了全部的库文件，因此就不管这个目录。而jexus文件夹，顾名思义，就是Jexus Web Server的安装目录。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们进入到jexus中，并用编辑器打开jws文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090700222975.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如图所示，我们主要修改两个变量参数的值，在每个参数后面分别加上&ldquo;：/jono/mono/bin&rdquo;和&ldquo;/jono/mono/lib&rdquo;，然后保存退出（这里假设我们的绿色包将放在根目录下）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 重新把jono打包并传输第二台Linux中（干净那台）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 进入第二台Linux,把jono.zip解包</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; unzip jono.zip</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; mv ./jono/ /</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 给jws文件赋予执行权限</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; chmod a+x /jono/jexus/jws</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 给mono/bin赋予执行权限</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; chmod a+x -R /jono/mono/bin/</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，我们自己组装的绿色包基本成型，我们测试绿色包能否正常运作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 打开jexus服务器，并查看监听、info页面</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; /jono/jexus/jws start</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; netstat -an | grep :80</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002329442.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 80端口监听正常</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002346553.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; info页面正常</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 证明，我们制作的绿色包已经成功，我们可以将其打包并发布出来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; /jono/jexus/jws stop</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; tar czf /jono.tar.gz /jono</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里顺带一提，因为我们制作的是完整版的环境包，因此不单止可以提供给Jexus运作，同样可以提供给其他.NET程序运作，我们执行执行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; echo \"/jono/mono/lib\" &gt; /etc/ld.so.conf.d/mono.conf</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; ldconfig</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; echo&nbsp; PATH=/jono/mono/bin:$PATH&gt;&gt;~/.bash_profile</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; source ~/.bash_profile</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 将mono的bin以及路径加入系统环境变量中，即可达到与编译搭建的环境一样效果。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002403165.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; （图中出现了几个提示不是符号连接，有兴趣的读者可以它改回符号连接）</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，本篇内容至此结束，如有疑问或者异议，可在本文中留言或到Linux.NET群中提出，我会尽可能的逐一进行解答，希望对各位读者的学习带来帮助。</span></p>\r\n</body>\r\n</html>',1410049555433,1410049555433,712,6,'8,9,7,11',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Linux.NET环境的搭建，不仅是一项比较耗时的事情，同时也是一项略显复杂繁琐的事情。特别是对于近期的几个Mono版本，由于官方所提供的源码包中出现代码文件的缺失，这总让我们的付出变得徒劳。另外一方面，由于Linux.NET的环境搭建涉及到比较多Linux的操作知识，这无疑增加了它的学习使用成本，提高了学习的门槛，这也令不少习惯于Windows中开发ASP.NET的开发者对其望而生畏。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 降低Linux.NET的学习难度，需要从环境部署开始着手，为此，Jexus的作者宇内给我们制作了一款绿色版的Linux.NET环境包，当中提供了Jexus Web Server以及Linux.NET的运行环境，带来了解压即可用，删除即卸载便利，同时还降低了Linux,NET初学者的学习门槛。</span></p>',1410049555433),(35,'绿色版的Linux.NET——“Jws.Mono”(续)','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"http://jhonge.net/Home/Single/7164042\">前一篇</a>文章中，我们简略的介绍了jws.mono的安装使用，以及我们如何自己动手做一个jws.mono出来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在文章发表之后的几天里，我一直觉得有点不妥之处，直到后来猛然的意识到：我们自己动手做的jws.mono虽然可以见到info页面，但实际上却是无法挂载任何的.NET站点的。因此这也有必要写下这篇的续篇来对前面的疏漏进行填补。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 马上进入本节主题，在本节中我们主要讲述：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、分析jws.mono的组成及相关组件的作用</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、此mono非彼mono：bin目录详解</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、jws.mono组成及介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 总的来说，jws.mono包含了两个部分，jexus以及提供它运行环境的mono。下面是&ldquo;jws.mono.tar.gz&rdquo;解压之后的组成（注：本篇文章针对的是前一篇中下载获得的jws.mono，其他的可能结构不一样）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907002857128.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 直接开始分析吧，如上图所示，jws.mono的根目录包含了四个目录，它们的作用分别是：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　bin：包含Mono编译器的可执行文件目录</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　etc：包含.NET默认配置文件的目录（machine.config等）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　jexus：顾名思义，放jexus的目录</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　lib：里面包含了.NET的程序集、我们编译mono和libgdiplus所得到的so库文件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 目录以及结构大概就是这样，各位读者分别点击进入相关的目录之后定会眼前一种熟悉的感觉。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、目录详解</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 点击进入到bin目录：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003005580.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 各位读者如果对比自己手上编译得出的mono/bin目录，这里的bin目录就显得轻量多了，是的，此处的bin目录是经过裁剪，仅仅包含了提供.NET运行所需的核心组件，并没有其他更多的东西。出了mono-sgen，其余均有脚本组成，而dmcs、gmcs以及mcs分别供给FramWork版本为4.0、2.0（3.5）以及4.5的程序的程序调用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 使用VIM打开其中一个脚本文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003017401.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里面仅包含了一条命令，命令的作用是调用同级目录下的mono，并指定它的framework版本。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 回到文件目录中，我们再仔细观察一下文件&ldquo;mono&rdquo;的大小（有兴趣的读者可以看看自己编译的Linux.NET中可执行文件&ldquo;mono&rdquo;的大小，相差甚大），大小只有1KB，显然这个叫&ldquo;mono&rdquo;的文件绝不会是编译器&ldquo;mono&rdquo;，只是一个同名的文件而已。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我在前文中曾说过，出了mono-sgen以外，其余的均是脚本文件，因此我们仍然可以继续用Vim打开它：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003058450.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 到了这里，我们已经一目了然了，这个&ldquo;mono&rdquo;文件的作用其实就是先设置并载入与Linux.NET运行相关的资源文件（程序集文件、machine.config等），然后把处理交给了&ldquo;mono-sgen&rdquo;处理（提示：mono-sgen里面包含了mono的JIT以及Sgen垃圾回收等组件，好东西）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这一个文件很重要，我们所有的.NET程序的运行都要经过这一个文件，因此如果这个文件里面的参数（目录之类的）有任何的差错，都会导致我们的.NET程序无法编译运行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 再留意&ldquo;--runtime&rdquo;这里，在此处，无论你使用的是那个版本的framework库，其实在jws.mono运行时都是使用framework 4.0（事实上目前流行的CLR主要有2.0和4.0两个版本，而在mono中CLR 4.0是可以兼容CLR 2.0的库，MS.NET则不行）。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 回到起点，开篇的时候，我提到的那个问题，各位读者现在知道是什么原因造成的了吗？</span></p>\r\n</body>\r\n</html>',1410049932093,1410050013468,550,6,'11,9,7,8,10',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"http://jhonge.net/Home/Single/7164042\">前一篇</a>文章中，我们简略的介绍了jws.mono的安装使用，以及我们如何自己动手做一个jws.mono出来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在文章发表之后的几天里，我一直觉得有点不妥之处，直到后来猛然的意识到：我们自己动手做的jws.mono虽然可以见到info页面，但实际上却是无法挂载任何的.NET站点的。因此这也有必要写下这篇的续篇来对前面的疏漏进行填补。</span></p>',1410049932093);
INSERT INTO `posts` VALUES (36,'如玫瑰一般的PHP与C#混合编程','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 故事背景是这样的，有一套项目，服务器端是用C#写的，为了完成某种事情，它需要使用到一个组件，这个组件很小但很重要，很不巧的是，这个这个组件是用PHP语言写的，如果为了使用这个组件而专门搭建一个PHP的环境显得有点高射炮打蚊子（况且还有其他不可预见的阻力）。或许有读者会提出&ldquo;抗议&rdquo;：不是PHP写的么，直接看源码翻译出一份C#版的不就行了？然而事实并不如想象的美好，总之就是短期内无法这么做了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如今的C#已经非常强大了，它除了可以做我们普通的站点开发、桌面开发和原生的Windows Phone、应用商店开发，还可以做其他诸如IOS、安卓开发；也通过用CLR来托起一个JVM（这里指IKVM.NET）来跑Java应用程序，当然也可以通过把PHP编译成IL来跑PHP的网站程序了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本篇中，我们就如何进行PHP与C#混合编程作如下讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、PHP与C#的胶水：&ldquo;Phalanger&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、牛刀小试跑跑PHP</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、如何添加PHP类库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、C#与PHP混合互调</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（5）、美丽如玫瑰，采摘须谨慎</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本文中的示例代码请点击<a href=\"http://files.cnblogs.com/xiaodiejinghong/PhalangerDemo.7z\" target=\"_blank\">这里</a>进行下载</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、什么是Phalanger</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 什么是Phalanger，最简单的概括就是，它能够把PHP编译成DLL供我们C#调用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Phalanger的官网是：<a href=\"http://www.php-compiler.net/\">http://www.php-compiler.net/</a></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们要做混合编程，首先得先从官网那里下载一个安装包。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090700370080.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下载下来之后，打开压缩包，双击Setup开始安装。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003707422.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把这些都给安装了，前面两个必装，最后一个是模板文件，不想装就不装，已经安装的话它会写着&ldquo;Already installed&rdquo;。由图中，我们可以得知一个信息，那就是它只支持Framework 4.0。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 把上面的东西安装好之后，我们需要的&ldquo;胶水&rdquo;就得到了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、在.NET里面跑一个php</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯，phpinfo()，我没有猜出，这个函数应该是各位读者们第一个敲的，也是搭建完PHP环境之后必敲写的一个函数。我们也牛刀小试一番，试试执行这个函数。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先创建一个空的WebApplication</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003801174.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后添加一个PHP文件，由于我们没有直接的PHP文件添加，所以我们随便添加了一个内容少一点的文件，然后改它的后缀为php并删光里面的代码。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003808846.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 写上我们的代码（还带有智能提示，先进！！！）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003848105.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后按下&ldquo;F5&rdquo; </span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907003903236.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后就奇迹般的出现了我们想要的页面。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、添加PHP的类库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 事实上，即使我们是写原生的PHP，我们都需要使用到大量的PHP库，譬如MySQL库、GD库、CURL库等。在这里当然也不例外，我们也需要使用那些库。不过在这里，我们所使用的库并不是PHP/ext中的那些库，而是Phalanger给我们准备好的库，它们随着Phalanger的安装一同安装到我们的电脑当中，有兴趣的读者可以翻开GAC目录，里面会多了很多php打头的文件夹，那些就是与Phalanger相关的库了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907004221818.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;&nbsp;&nbsp; 需要使用哪个库，就自行的在WebConfig的phpNet节点下添加，譬如我需要用MySQL的库，则在WebConfig这样配置：</span></span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_354ed553-2a23-46a5-bfa4-b0038417fa8c\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Web.Config</span> <img id=\"code_img_opened_354ed553-2a23-46a5-bfa4-b0038417fa8c\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_354ed553-2a23-46a5-bfa4-b0038417fa8c\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n\r\n<span style=\"color: #008000;\">&lt;!--</span><span style=\"color: #008000;\">\r\n  有关如何配置 ASP.NET 应用程序的详细消息，请访问\r\n  http://go.microsoft.com/fwlink/?LinkId=169433\r\n  </span><span style=\"color: #008000;\">--&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n        <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">phpNet</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">classLibrary</span><span style=\"color: #0000ff;\">&gt;</span>\r\n      <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">assembly</span><span style=\"color: #0000ff;\">=\"PhpNetMySql, Version=3.0.0.0, Culture=neutral, PublicKeyToken=2771987119c16a03\"</span><span style=\"color: #ff0000;\"> section</span><span style=\"color: #0000ff;\">=\"mysql\"</span><span style=\"color: #0000ff;\">/&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">classLibrary</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">phpNet</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n</pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_354ed553-2a23-46a5-bfa4-b0038417fa8c\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n\r\n&lt;!--\r\n  有关如何配置 ASP.NET 应用程序的详细消息，请访问\r\n  http://go.microsoft.com/fwlink/?LinkId=169433\r\n  --&gt;\r\n\r\n&lt;configuration&gt;\r\n    &lt;system.web&gt;\r\n        &lt;compilation debug=\"true\" targetFramework=\"4.0\" /&gt;\r\n    &lt;/system.web&gt;\r\n\r\n  &lt;phpNet&gt;\r\n    &lt;classLibrary&gt;\r\n      &lt;add assembly=\"PhpNetMySql, Version=3.0.0.0, Culture=neutral, PublicKeyToken=2771987119c16a03\" section=\"mysql\"/&gt;\r\n    &lt;/classLibrary&gt;\r\n  &lt;/phpNet&gt;\r\n\r\n&lt;/configuration&gt;\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里注意一点，MYSQL的扩展库请使用CodePlex上的，而非自带的，自带的版本链接高板MYSQL可能会遇到问题（地址如下：<a href=\"http://phalangermysql.codeplex.com/releases/view/103022\">http://phalangermysql.codeplex.com/releases/view/103022</a>）</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里还有另外一点需要注意，CodePlex上的扩展下载下来之后是这样的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907004407400.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; MySql的库命名有问题，正确的应该是&ldquo;MySql.Data.dll&rdquo;，各位读者请留意。&nbsp;然后就是写下我们读取数据库信息的代码：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_5048d52b-cc40-4d77-a630-94c5a5c3d616\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">mysqlextension.php</span> <img id=\"code_img_opened_5048d52b-cc40-4d77-a630-94c5a5c3d616\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_5048d52b-cc40-4d77-a630-94c5a5c3d616\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #000000;\">&lt;?</span><span style=\"color: #000000;\">php\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">**** 判断库是否被加载 ****</span><span style=\"color: #008000;\">*/</span> \r\n<span style=\"color: #800080;\">$extensionName</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">mysql</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">!</span><span style=\"color: #008080;\">extension_loaded</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$extensionName</span><span style=\"color: #000000;\">)){\r\n    </span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #800080;\">$extensionName</span><span style=\"color: #000000;\">.</span><span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">没有被加载进来</span><span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">exit</span><span style=\"color: #000000;\">;\r\n}\r\n\r\n</span><span style=\"color: #008000;\">/*</span><span style=\"color: #008000;\">*** 操作mysql ***</span><span style=\"color: #008000;\">*/</span>\r\n<span style=\"color: #800080;\">$host</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">192.168.70.128</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">root</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$pwd</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">root</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #800080;\">$conn</span><span style=\"color: #000000;\">=</span><span style=\"color: #008080;\">mysql_connect</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$host</span><span style=\"color: #000000;\">,</span><span style=\"color: #800080;\">$name</span><span style=\"color: #000000;\">,</span><span style=\"color: #800080;\">$pwd</span><span style=\"color: #000000;\">) or </span><span style=\"color: #0000ff;\">die</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">mysql数据库连接失败</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #008080;\">mysql_select_db</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">phalangerdb</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">,</span><span style=\"color: #800080;\">$conn</span><span style=\"color: #000000;\">)or </span><span style=\"color: #0000ff;\">die</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">无法选择数据库</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #008080;\">mysql_query</span><span style=\"color: #000000;\">(</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">set names utf8</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #800080;\">$sqlstr</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">select * from person</span><span style=\"color: #000000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #800080;\">$result</span> <span style=\"color: #000000;\">=</span> <span style=\"color: #008080;\">mysql_query</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$sqlstr</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">&lt;pre&gt;</span><span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$row</span><span style=\"color: #000000;\">=</span><span style=\"color: #008080;\">mysql_fetch_row</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$result</span><span style=\"color: #000000;\">)){\r\n    </span><span style=\"color: #008080;\">print_r</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$row</span><span style=\"color: #000000;\">);\r\n}\r\n</span><span style=\"color: #0000ff;\">echo</span> <span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">&lt;/pre&gt;</span><span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">;\r\n\r\n</span><span style=\"color: #008080;\">mysql_free_result</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$result</span><span style=\"color: #000000;\">);\r\n</span><span style=\"color: #008080;\">mysql_close</span><span style=\"color: #000000;\">(</span><span style=\"color: #800080;\">$conn</span><span style=\"color: #000000;\">);\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_5048d52b-cc40-4d77-a630-94c5a5c3d616\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?php\r\n/***** 判断库是否被加载 *****/ \r\n$extensionName=\"mysql\";\r\nif(!extension_loaded($extensionName)){\r\n    echo $extensionName.\'没有被加载进来\';\r\n    exit;\r\n}\r\n\r\n/**** 操作mysql ****/\r\n$host=\"192.168.70.128\";\r\n$name=\"root\";\r\n$pwd=\"root\";\r\n\r\n$conn=mysql_connect($host,$name,$pwd) or die(\"mysql数据库连接失败\");\r\nmysql_select_db(\"phalangerdb\",$conn)or die(\"无法选择数据库\");\r\nmysql_query(\"set names utf8\");\r\n$sqlstr=\"select * from person\";\r\n$result = mysql_query($sqlstr);\r\necho \'&lt;pre&gt;\';\r\nwhile($row=mysql_fetch_row($result)){\r\n    print_r($row);\r\n}\r\necho \'&lt;/pre&gt;\';\r\n\r\nmysql_free_result($result);\r\nmysql_close($conn);\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后运行并查看结果：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907004545241.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 它成功的读取到我们数据库的东西并输出到页面中。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">四、C#与PHP互调</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 既然是混合编程，如果没有两种语言之间的相互调用那又如何能够称得上混合编程呢？本节中，我们主要分两个部分，其一就是PHP调C#函数，其二就是C#掉PHP函数。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; PHP调用C#，Phalanger官网中主要的范例均是此，这里就不作讲解了，有需要的读者可移步到Phalanger官网中看里面的Blog。本文中讲解的是使用概率更高同时也是官网中比较缺乏资料的C#调用PHP的函数。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们先创建一个PHP的函数：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_51185ee0-d13b-44d1-936c-79c2cfef18e7\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Fun.php</span> <img id=\"code_img_opened_51185ee0-d13b-44d1-936c-79c2cfef18e7\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_51185ee0-d13b-44d1-936c-79c2cfef18e7\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #000000;\">&lt;?</span><span style=\"color: #000000;\">php\r\n</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> Sum(</span><span style=\"color: #800080;\">$a</span><span style=\"color: #000000;\">,</span><span style=\"color: #800080;\">$b</span><span style=\"color: #000000;\">){\r\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #800080;\">$a</span><span style=\"color: #000000;\">+</span><span style=\"color: #800080;\">$b</span><span style=\"color: #000000;\">;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">function</span><span style=\"color: #000000;\"> SayHello(){\r\n    </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">Hello,我是小蝶惊鸿</span><span style=\"color: #000000;\">\'</span><span style=\"color: #000000;\">;\r\n}\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_51185ee0-d13b-44d1-936c-79c2cfef18e7\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?php\r\nfunction Sum($a,$b){\r\n    return $a+$b;\r\n}\r\n\r\nfunction SayHello(){\r\n    return \'Hello,我是小蝶惊鸿\';\r\n}\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后新建一个WebForm页面程序，并在CodeBehind中调用它（这里是简单加法例子）：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_0ac0a533-be38-4dd0-8c5e-d2178951fb7a\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">ViewCode</span> <img id=\"code_img_opened_0ac0a533-be38-4dd0-8c5e-d2178951fb7a\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_0ac0a533-be38-4dd0-8c5e-d2178951fb7a\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> PhalangerDemo.demo3\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">partial</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> WebForm1 : System.Web.UI.Page\r\n    {\r\n        </span><span style=\"color: #0000ff;\">private</span><span style=\"color: #000000;\"> PHP.Core.ScriptContext phpContext;\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> WebForm1()\r\n        {\r\n            phpContext </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> PHP.Core.ScriptContext.CurrentContext;\r\n            phpContext.Include(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Fun.php</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Page_Load(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> context </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> phpContext.Call(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">SayHello</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">[] { }).ToString();\r\n            Response.Write(context.StartsWith(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&amp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #000000;\">?</span><span style=\"color: #000000;\"> context.Substring(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) : context);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">protected</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> btnAdd_Click(</span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\"> sender, EventArgs e)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> num1 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> txtNum1.Text </span><span style=\"color: #0000ff;\">as</span> <span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> num2 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> txtNum2.Text </span><span style=\"color: #0000ff;\">as</span> <span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> result </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> phpContext.Call(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sum</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">[] { num1, num2 }).ToString();\r\n            txtRes.Text </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> result.StartsWith(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">&amp;</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">) </span><span style=\"color: #000000;\">?</span><span style=\"color: #000000;\"> result.Substring(</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) : result;\r\n        }\r\n    }\r\n}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_0ac0a533-be38-4dd0-8c5e-d2178951fb7a\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">namespace PhalangerDemo.demo3\r\n{\r\n    using System;\r\n    public partial class WebForm1 : System.Web.UI.Page\r\n    {\r\n        private PHP.Core.ScriptContext phpContext;\r\n\r\n        public WebForm1()\r\n        {\r\n            phpContext = PHP.Core.ScriptContext.CurrentContext;\r\n            phpContext.Include(\"Fun.php\", true);\r\n        }\r\n\r\n        protected void Page_Load(object sender, EventArgs e)\r\n        {\r\n            var context = phpContext.Call(\"SayHello\", new object[] { }).ToString();\r\n            Response.Write(context.StartsWith(\"&amp;\") ? context.Substring(1) : context);\r\n        }\r\n\r\n        protected void btnAdd_Click(object sender, EventArgs e)\r\n        {\r\n            var num1 = txtNum1.Text as object;\r\n            var num2 = txtNum2.Text as object;\r\n            var result = phpContext.Call(\"Sum\", new object[] { num1, num2 }).ToString();\r\n            txtRes.Text = result.StartsWith(\"&amp;\") ? result.Substring(1) : result;\r\n        }\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">然后再页面中运行看看，Cool：</span></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><img src=\"/Static/Images/140907004901737.jpg\" alt=\"\" /></span></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里，我要对CodeBehind（C#）部分的代码进行下讲解，它的原理大概如下：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、先获取PHP的上下文对象PHPContext</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、然后往PHPContext中require_once我们写的&ldquo;Fun.php&rdquo;</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、通过Call方法，第一个参数传入方法名，第二个参数传入Object数组类型的参数。调用PHP中的函数</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、在被调用的PHP函数执行完成之后，将它的返回接收回来。并过滤开头的&ldquo;&amp;&rdquo;字符。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至于更深入的，譬如如何New一个PHP的Class之类的，我没有进行深入的研究，所以这里就不作描述，有兴趣的读者可以自行深入研究，同时也欢迎有此经验的读者进行分享。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;</p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">五、这美丽又丑陋的Phalanger</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在前面的几章中，Phalanger的表现是如此的美丽优秀，它好比一朵玫瑰，看起来是那么的鲜艳，闻起来是那么的幽香，但是当你想采摘它的时候，手中拿着的确是幽艳玫瑰之下的荆棘。也只有你划破伤口流着血的时候，你才感觉到原来采摘这朵玫瑰是那么的痛。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我把开篇时的故事继续说完，到了这一步，读者们大概也可以猜到是个什么情况了，没错，我的尝试失败了，这个PHP的组件无法正常的运行。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 下面，我给各位读者分享两个这个组件所遇到致命性伤痕：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、if中对byte的真假识别不一致。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　同样是读取一个文件，通过if(byte[])来判断这个文件是否为空，原生的PHP中可以根据传入的byte[]是否为null来决定true/false，而Phalanger则无论如何一直返回false。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、同样的PHP内置函数，执行的效果却不一致。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　这里的所说的函数运行效果不一致并不是说效果完全的不一致，普通的使用还是没有问题的（正如我刚才读取mysql那样），而是有极少数的函数在特殊的条件下运行后得出的结果在原生PHP与Phalanger中是不一样的。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 当然了，一百个读者有一百个海姆莱特，萝卜青菜各有所爱，Phalanger到底值不值得使用，应该怎么使用，还是全凭各位读者自己博弈了。</span></p>\r\n</body>\r\n</html>',1410050400183,1410051122106,96,6,'10,14,16',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 故事背景是这样的，有一套项目，服务器端是用C#写的，为了完成某种事情，它需要使用到一个组件，这个组件很小但很重要，很不巧的是，这个这个组件是用PHP语言写的，如果为了使用这个组件而专门搭建一个PHP的环境显得有点高射炮打蚊子（况且还有其他不可预见的阻力）。或许有读者会提出&ldquo;抗议&rdquo;：不是PHP写的么，直接看源码翻译出一份C#版的不就行了？然而事实并不如想象的美好，总之就是短期内无法这么做了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如今的C#已经非常强大了，它除了可以做我们普通的站点开发、桌面开发和原生的Windows Phone、应用商店开发，还可以做其他诸如IOS、安卓开发；也通过用CLR来托起一个JVM（这里指IKVM.NET）来跑Java应用程序，当然也可以通过把PHP编译成IL来跑PHP的网站程序了。</span></p>',1410050400183),(37,'如何安装并简单的使用OwinHost——Katana','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 微软OWIN的提出必然会引起一场风暴，而我们作为C#阵营中一份子，自然免不了会卷入其中。OWIN是什么东西，我在这里就不解析了，还不知道是OWIN是什么的读者请打开浏览器，然后搜索即可，中文的英文的应有尽有。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OWIN的发展，预示着将来会有越来越多的基于OWIN的应用框架出现，也将会由更多的OwinHost出现。就在我写这篇文章的时候，就我所知的就已经有两款的支持OWIN的Host出现：其一就是微软先发制人Katana，它能够运行于Windows中，独立于IIS为支持OWIN协议的框架提供宿主支持；而另外一款则是率先支持OWIN协议的运行于Linux以及FreeBSD的Jexus Web Server（需要Jexus 5.6 以上版本）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 关于Jexus，本文中就不作介绍了，安装方式、使用方式还是和以前的一样，不了解的读者可以翻阅《<a href=\"http://jhonge.net/Home/Single/19971666\">Linux.NET学习手记</a>》，本文中，我们还是介绍如何快速的安装并如何简单的使用Katana来调试我们的程序。想想在Windows下用Katana作为宿主，借助强大的VS进行开发，开发完成之后发布到Linux中，使用Jexus作为生产服务器，何尝不是一个愉快的事情。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本文中，我们将讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、快速的安装一个Katana</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、在VS中简单的使用Katana来调试程序</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、快速的安装一个Katana</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 要安装一个Katana，其实非常简单，加起来就两条命令。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们需要打开我们的cmd</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907005416442.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 敲入（粘入）下面这条命令：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; @powershell -NoProfile -ExecutionPolicy unrestricted -Command \"iex ((new-object net.webclient).DownloadString(\'http://chocolatey.org/install.ps1\'))\" &amp;&amp; SET PATH=%PATH%;%systemdrive%\\chocolatey\\bin</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; PowerShell就自动的帮我们先安装Chocolatey，然后再执行下面的这条命令：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; choco install OwinHost</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 系统就会自动的帮我们安装好Katana</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907005449747.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这就完成了Katana的安装。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 注：个别情况下，执行第二条命令cmd会提示不懂&ldquo;choco&rdquo;这条命令，这时你只需关闭cmd重新再打开即可。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、怎么使用Katana对OWIN程序进行简单的调试</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们需要打开一个使用OWIN协议的项目，然后右键项目文件&mdash;&gt;选择属性</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090700552513.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 打开属性页面，左边栏选择&ldquo;Web&rdquo;，启动操作改为启动外部程序，并选择Katana.exe的目录，项目的目录。需要指定端口的填入-p 端口号即可完成katana的配置。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907005544335.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 程序的调试也可以加断点，然后F5.</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Katana的不是我们议论的重点，因此本文也没有使用过多的语言进行描述，有兴趣的读者可以移步到Katana的官网进行查阅。</span></p>\r\n</body>\r\n</html>',1410051462655,1410051462655,161,6,'10,17',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 微软OWIN的提出必然会引起一场风暴，而我们作为C#阵营中一份子，自然免不了会卷入其中。OWIN是什么东西，我在这里就不解析了，还不知道是OWIN是什么的读者请打开浏览器，然后搜索即可，中文的英文的应有尽有。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OWIN的发展，预示着将来会有越来越多的基于OWIN的应用框架出现，也将会由更多的OwinHost出现。就在我写这篇文章的时候，就我所知的就已经有两款的支持OWIN的Host出现：其一就是微软先发制人Katana，它能够运行于Windows中，独立于IIS为支持OWIN协议的框架提供宿主支持；而另外一款则是率先支持OWIN协议的运行于Linux以及FreeBSD的Jexus Web Server（需要Jexus 5.6 以上版本）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 关于Jexus，本文中就不作介绍了，安装方式、使用方式还是和以前的一样，不了解的读者可以翻阅《Linux.NET学习手记》，本文中，我们还是介绍如何快速的安装并如何简单的使用Katana来调试我们的程序。想想在Windows下用Katana作为宿主，借助强大的VS进行开发，开发完成之后发布到Linux中，使用Jexus作为生产服务器，何尝不是一个愉快的事情。</span></p>',1410051462655),(38,'Linux.NET学习手记（7）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"http://jhonge.net/Home/Single/20496676\">前一篇</a>中，我们简单的讲述了下如何在Linux.NET中部署第一个ASP.NET MVC 5.0的程序。而目前微软已经提出OWIN并致力于发展VNext，接下来系列中，我们将会向OWIN方向转战。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早在三周之前，我偶然的得到了一本《SignalR Programming in Microsoft ASP.NET》，在晚上不工作的时候对这本书进行细细研读（到目前为止大概只研读了一半）。虽然目前只有英文原版，但是这本书讲得很不错，即使需要抱着一本词典来辅助阅读，那也是值得的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OWIN的发展，不仅对于传统的MS.NET(常规运行于Windows中的.NET)方向的开发是一个新的征程，对于我们Linux.NET方向的开发也同样是一个新的纪元。至于关于OWIN发展所给我们带来的好处，我这里给各位读者随意的列出这么几条：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、我们写的代码兼容性更高，项目的迁移更可靠（当然前提是你使用的框架是支持OWIN的框架）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、社区将会更加活跃（由于OWIN具有更开放性，它鼓励了一批人把自己的创意变成现实）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、Web Server我们有更多的选择，可以使用非IIS挂载自己的站点（当然在Windows下，IIS仍然为一个最佳的选择，不过目前IIS暂时没有支持OWIN，想尝试OWIN的暂时读者只能用Katana，而Linux下的Jexus则已经支持）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、更多&hellip;&hellip;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过，凡事总有两面性，OWIN所带来的除了巨大的好处之外，还带来了一些短期内不好的附加属性，最直接的就是增加了我们的学习成本，我们需要同时学习VNext之前的.NET知识，以及伴随VNext新产生的知识（三五年内这个是必须的）。不过我们目前还有Visual Studio 2014还没有正式的发布，我们还有少许的时间供我们赛跑。等万事已成定局的时候再来努力，那就只能看着其他人的背影了，毕竟&ldquo;先来的喝汤，迟来的喝水，不来的啥都没得喝&rdquo;我说得对吧？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 咳咳，言归正传，回到本节的主题，本节中我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、在Linux.NET中跑OWIN程序，怎么准备</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、把两个有趣的SignalR Demo部署向Linux.NET中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、搭个顺风车，NancyFx部署向Linux.NET</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本文中的相关代码已经托管GitHub，大家可以点击<a href=\"https://github.com/xiaodiejinghong/Linux_NET/tree/master/Linux_NET_7\" target=\"_blank\">这里</a>进行下载。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、、我们需要准备些什么</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 由于OWIN协议提出的时间并没有太久，并且是许多支持OWIN的框架均是基于FrameWork 4.5的，因此为了您的程序成功部署，请使用最新版的Mono（Mono 3.4）作为Linux.NET的运行环境。这里要特别指出注意的一点，关于&ldquo;Mono 3.4.tar.gz&rdquo;这个包，官方所提供的安装包其实是缺少组件的，因此如果各位读者采用的是官方包编译那么一般是报Error的，这里我们提供正确的安装包，需要的读者可以点击这里进行下载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至于Linux中的OwinHost，Jexus已经率先的给予支持，各位读者只需移步到官网中下载版本为5.6以上的Jexus即可，也可以<a href=\"http://yun.baidu.com/s/1hqeeAfM\" target=\"_blank\">点击这里</a>直接进行下载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 安装方法与之前的一样，需要的读者可以移步到<a href=\"http://jhonge.net/Home/Single/24085607\">《Linux.NET 学习手记 （1）》</a>查阅。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 还有一点需要补充的，本系列的文章中Mono的安装路径均为&ldquo;/usr/local/mono/&rdquo; 与很多教程中采用的&ldquo;/usr/&rdquo;有所不同，因此如果选择按照本系列教程的读者，请务必确保安装步骤每一步都执行完成且正确。近期中收到了不少的朋友Jexus无法运行，找不到Mono。这些基本是没有设置好环境变量，造成系统扫描目录的时候不扫描Mono的安装目录，继而找不到bin/Mono。宇内流云也给我建议能否将安装目录由&ldquo;/usr/local/mono&rdquo;改为&ldquo;/usr/&rdquo;，不过我看了下已有文章，发生改动的话影响就很大了（衷心感觉到写文章就像写项目一样，文章多了项目也变大，改一个基类所有派生的子类都遭殃了），所以就压着没有改，各位读者要千万的留意（当然，我目录的选择也是有故事的，有兴趣的读者可以留言，我可以分享出来）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们一直采用的开发模式是Windows中开发，Linux中运行，OWIN中也不例外。Windows中使用Katana作为Host，发布之后采用Jexus作为Host运行。需要了解Katana安装使用的读者，也可移步到<a href=\"http://jhonge.net/Home/Single/25734827\">《如何安装并简单的使用OwinHost&mdash;&mdash;Katana</a>》。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、部署两个有趣的SignalR程序到Linux.NET中</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; SignalR框架作为支持OWIN协议的框架，自然是可以通过挂载到OwinHost的方式部署到Linux.NET中了。在本示例代码中，里面有两个基于SignalR的Demo，具体这个Demo是怎么做出来的我在这里就不作讲解了，希望以后有机会单独出一个SignalR的学习系列（待我觉得对SignalR无惑之时），到时再针对SignalR作出详细的讲解，现在就不误导各位读者了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们拿到代码之后，用Visual Studio打开它，先讲解如何部署Demo1，Demo1是一个简易的在线聊天室。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先，我们先在Jexus中新建一个网站配置文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011102366.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后在里面写上配置（当然，推荐直接拷贝出新的一份default，然后直接改里面的参数），在最后的一行中加上以下的这条语句：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OwinMain=Jws.OwinAdapter.MsOwin.dll,Jws.OwinAdapter.MsOwin.Adapter</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011110519.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这句话的作用是通知并让Jexus支持OWIN（我称它为OWIN模式）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后把我们的Demo向Linux中发布：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011147290.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 打开bin目录，在bin中添加上Jexus针对OWIN的通用适配器（相关组件可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/Jexus-OWIN%E9%80%82%E9%85%8D%E5%99%A8.7z\" target=\"_blank\">点击这里</a>进行下载，源码则可以<a href=\"http://files.cnblogs.com/xiaodiejinghong/JWS%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3OWIN%E9%80%82%E9%85%8D%E5%99%A8%E6%BA%90%E7%A0%81-20140624.zip\" target=\"_blank\">点击这里</a>下载）找到&ldquo;Microsoft.AspNet.SignalR.Owin.dll&rdquo;，把后缀改了或者直接删除（如图所示）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011202896.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后再重启下Jexus，然后我们就可以用浏览器访问了（网址如图，高清大图来的）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011259490.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 挺有趣的哈~！至于Demo2，部署方式跟Demo1一致，部署成功之后的效果如下（网址也在图中）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011312945.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 图中的那个Guid框会跟着鼠标走，并且鼠标经过任意的浏览器，其余浏览器均会同步这个Guid的位置，挺有趣好玩的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里提示一下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、重新部署之后记得重启Jexus</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、这个Demo可能会令CPU飙升，特别是虚拟机中。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、搭个顺风车</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可能有个别的读者懂得怎么使用NancyFX，并且也可能手上有一些基于NancyFX框架的站点。NancyFX跟SignalR一样，同样支持OWIN协议，因此也是可以随时从Windos中向Linux中部署的。事实上，部署NancyFX可说是只是动动手指头的事情（没有用到些&ldquo;特别&rdquo;的组件、代码也按照标准的情况下），相比于SignalR简单多了（前面两个Demo中SignalR当时是部署不成功的，后来和宇内流云一同在调呀调呀才调试完毕，这里感谢他的技术支持）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然我本人并没有使用NancyFX的习惯，不过也顺带让NancyFX搭个顺风车，讲讲它怎么部署。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 示例代码中，ExtraDemo是基于NancyFX做出来的Demo，我们可以把它部署到项目文件之后，直接向Linux中发布</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011421131.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后添加上Jexus的适配器：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011428454.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 重启Jexus，即可完成NancyFX的部署。访问页面：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907011500390.jpg\" alt=\"\" /></span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 目前，支持OWIN协议的框架除了文中提及的两个以外，还有其他存在，由于能力有限，那些框架我暂时也没有尝试使用过，有兴趣的读者可以自行尝试，当然也欢迎您将您的心得体会与我们一同分享。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"http://jhonge.net/Home/Single/14524864\">下一篇中</a>，我们将分析OwinHost与OWIN的框架到底是怎么&ldquo;沟通&rdquo;的，它又是怎么&ldquo;驱动&rdquo;OWIN框架的。下回见。</span></p>\r\n</body>\r\n</html>',1410052571497,1410053716961,855,6,'7,8,10,9,17',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"http://jhonge.net/Home/Single/20496676\">前一篇</a>中，我们简单的讲述了下如何在Linux.NET中部署第一个ASP.NET MVC 5.0的程序。而目前微软已经提出OWIN并致力于发展VNext，接下来系列中，我们将会向OWIN方向转战。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早在三周之前，我偶然的得到了一本《SignalR Programming in Microsoft ASP.NET》，在晚上不工作的时候对这本书进行细细研读（到目前为止大概只研读了一半）。虽然目前只有英文原版，但是这本书讲得很不错，即使需要抱着一本词典来辅助阅读，那也是值得的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OWIN的发展，不仅对于传统的MS.NET(常规运行于Windows中的.NET)方向的开发是一个新的征程，对于我们Linux.NET方向的开发也同样是一个新的纪元。至于关于OWIN发展所给我们带来的好处，我这里给各位读者随意的列出这么几条：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、我们写的代码兼容性更高，项目的迁移更可靠（当然前提是你使用的框架是支持OWIN的框架）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、社区将会更加活跃（由于OWIN具有更开放性，它鼓励了一批人把自己的创意变成现实）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、Web Server我们有更多的选择，可以使用非IIS挂载自己的站点（当然在Windows下，IIS仍然为一个最佳的选择，不过目前IIS暂时没有支持OWIN，想尝试OWIN的暂时读者只能用Katana，而Linux下的Jexus则已经支持）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、更多&hellip;&hellip;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过，凡事总有两面性，OWIN所带来的除了巨大的好处之外，还带来了一些短期内不好的附加属性，最直接的就是增加了我们的学习成本，我们需要同时学习VNext之前的.NET知识，以及伴随VNext新产生的知识（三五年内这个是必须的）。不过我们目前还有Visual Studio 2014还没有正式的发布，我们还有少许的时间供我们赛跑。等万事已成定局的时候再来努力，那就只能看着其他人的背影了，毕竟&ldquo;先来的喝汤，迟来的喝水，不来的啥都没得喝&rdquo;我说得对吧？</span></p>',1410052571497),(39,'Linux.NET学习手记（8）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"http://jhonge.net/Home/Single/10901153\">上一回合</a>中，我们讲解了Linux.NET面对OWIN需要做出的准备，以及介绍了如何将两个支持OWIN协议的框架：SignalR以及NancyFX以OwinHost的方式部署到Linux.NET当中。这一章，我们将对框架与OwinHost之间怎么通过OWIN协议作出解析。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本章我们将讨论学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、连接两世界之门&mdash;&mdash;&ldquo;Middleware&ldquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、转动大门的钥匙，打开无尽的财宝</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、适配器？转换插头</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 相关示例代码，可以<a href=\"https://github.com/xiaodiejinghong/Linux_NET/tree/master/Linux_NET_8\" target=\"_blank\">点击这里</a>进行下载。</span></p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">一、充当&rdquo;门&ldquo;的&rdquo;Middleware&ldquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 英文名&rdquo;Middleware&ldquo;，中文名&rdquo;中间件&ldquo;，要了解什么是Middleware，我们先看看OWIN协议中的分层。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090701251424.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上图为OWIN分层的一个简图。最下的一层是我们的操作系统，Linux、Windows、Unix、Mac或其他；对上一层则是运行于操作系统中的OwinHost；再往上一层也就是紫色那层是基于OWIN协议建立的基础框架；而最顶层则是我们基于这些OWIN协议的框架所诞生的应用程序（直接操作OWIN字典的暂不记录在图中）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 抛开最顶和最底两层不管，当用户从客户端发起一请求，经过漫长的网络，到达目标主机时，请求将被并且仅能被OwinHost捕获，因为只有OwinHost在持续的不断监听端口。虽然请求已经被OwinHost捕获，但是OwinHost并没有能力对这个刚捕获的请求做出处理（这里特指需要经过OWIN框架及相关应用程序处理的请求）即使它知道自身有请求需要处理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同样的，我们再把目光转到OWIN框架，它是我们的&rdquo;处理中枢&ldquo;，它能够对我们把我们的输入通过适当的计算之后把正确的答案输出来，但是它也有一个缺点，那就是它自身没有办法收集&rdquo;相关信息&ldquo;，也就是它自己并不能产生出&rdquo;输入&ldquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这就好比人的大脑与其他器官，OWIN框架是我们的&rdquo;大脑&ldquo;，OwinHost则是我们的&rdquo;器官&ldquo;，没有了大脑我们的其他器官也无法正常运行（当然咯，有点功能不需要大脑，就像有些OwinHost处理静态资源不需要经过OWIN框架一样），没有了其他&ldquo;器官&rdquo;的支持&ldquo;大脑&rdquo;也无法发挥作用甚至会死亡（没有宿主，OWIN框架也无法运行）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907012630400.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 因此，我们需要有相应的&ldquo;神经&rdquo;来连通我们的&ldquo;器官&rdquo;与&ldquo;大脑&rdquo;之间的通信。而Middleware发挥的就是这种作用，它是连接OwinHost与OWIN框架的门，OwinHost把捕获到的请求通过自身的处理后通过这扇门推送到OWIN框架中；而OWIN框架也自己对请求计算后得出的响应通过这扇门返回到OwinHost中，再由OwinHost推送到用户手上。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 而事实上，Middleware作为一扇连接OwinHost与OWIN框架的门，让这两个世界得以交流以外，还发挥着另外一个作用，那就是规定了统一的信息出入口，所有的请求响应均只能够通过这扇门传递，这或者可以更方便的对一些敏感信息、恶意代码之流的数据进行拦截与过滤。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、转动我们手中的钥匙</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 正如上一节中最后所讲到的一样，Middleware作为OWIN框架与OwinHost的唯一通道，这意味着无论是SignalR、NancyFX、Webapi、FubuMVC或是其他，它们所站立的起点高度都是一致的，我们只要把能握住Middleware，就相当于把握住了大门的钥匙，我们也可以做出我们自己的框架出来。这也是我在上一回合中所提到OWIN协议给我们带来的好处中的第二点：&ldquo;它给鼓励了一批人把自己的想法变成现实&rdquo;。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 本节我们将简述如何直接操作OWIN字典，直接和OwinHost进行通信。</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 首先我们需要在Visual Studio中建立我们的项目，然后通过NuGet获得OWIN：</span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907012829508.jpg\" alt=\"\" /></span></p>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\"><span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&nbsp;&nbsp;&nbsp; 然后我们新建一个类，并以它作为我们的Middleware：</span></span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_28538594-0db7-444d-aa84-e84155ad2f13\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">MyMiddleware</span> <img id=\"code_img_opened_28538594-0db7-444d-aa84-e84155ad2f13\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_28538594-0db7-444d-aa84-e84155ad2f13\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.IO;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Text;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Threading.Tasks;\r\n</span><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> Demo1\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> AppFun </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Func</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">IDictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">, Task</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> MyMiddleware\r\n    {\r\n        </span><span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">readonly</span><span style=\"color: #000000;\"> AppFun _env;\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> MyMiddleware(AppFun env)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (env </span><span style=\"color: #000000;\">==</span> <span style=\"color: #0000ff;\">null</span><span style=\"color: #000000;\">) </span><span style=\"color: #0000ff;\">throw</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> ArgumentNullException(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">OWIN环境参数为空</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            </span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">._env </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> env;\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> Task Invoke(IDictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">object</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> env)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> responseBody </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Linux.NET 学习手记（8）&amp;nbsp;        --小蝶惊鸿</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> responseBodyBytes </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Encoding.UTF8.GetBytes(responseBody);\r\n            ((IDictionary</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[]</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">)env[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">owin.ResponseHeaders</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]).Add(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Content-Type</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, </span><span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] { </span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">text/html; charset=utf-8</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\"> });\r\n            ((Stream)env[</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">owin.ResponseBody</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">]).Write(responseBodyBytes, </span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">, responseBodyBytes.Length);\r\n            </span><span style=\"color: #0000ff;\">return</span> <span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">._env(env);\r\n        }\r\n    }\r\n}\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_28538594-0db7-444d-aa84-e84155ad2f13\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\nnamespace Demo1\r\n{\r\n    using AppFun = Func&lt;IDictionary&lt;string, object&gt;, Task&gt;;\r\n    public class MyMiddleware\r\n    {\r\n        private readonly AppFun _env;\r\n\r\n        public MyMiddleware(AppFun env)\r\n        {\r\n            if (env == null) throw new ArgumentNullException(\"OWIN环境参数为空\");\r\n            this._env = env;\r\n        }\r\n\r\n        public Task Invoke(IDictionary&lt;string, object&gt; env)\r\n        {\r\n            var responseBody = \"Linux.NET 学习手记（8）&nbsp;        --小蝶惊鸿\";\r\n            var responseBodyBytes = Encoding.UTF8.GetBytes(responseBody);\r\n            ((IDictionary&lt;string, string[]&gt;)env[\"owin.ResponseHeaders\"]).Add(\"Content-Type\", new string[] { \"text/html; charset=utf-8\" });\r\n            ((Stream)env[\"owin.ResponseBody\"]).Write(responseBodyBytes, 0, responseBodyBytes.Length);\r\n            return this._env(env);\r\n        }\r\n    }\r\n}\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p style=\"font: 14px/24px verdana, \'ms song\', 宋体, Arial, 微软雅黑, Helvetica, sans-serif; margin: 10px auto; padding: 0px; color: #403226; text-transform: none; text-indent: 0px; letter-spacing: normal; word-spacing: 0px; white-space: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\"><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里要对代码进行一番的解析：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（1）、这是我们的Middleware，所有来自于OwinHost的请求数据以及OWIN框架响应的数据都要通过这个类来进行统一中转处理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（2）、IDictionary&lt;string, object&gt;实则为OWIN字典，里面包含了基于OWIN协议的用于OwinHost与OWIN框架之间通信的数据信息。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（3）、程序启动时，OwinHost会先实例化这个类（实则调用Startup中的Configuration，然后实例化这个类，稍后我们会对此进行讲述），继而执行这个类的构造函数对Environment（也就是那个env）进行初始化。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　（4）、每次OwinHost捕获到请求之后，会调用Invoke，OWIN字典会携带请求进入该方法，程序处理完成之后，OWIN字典则会携带OWIN框架的响应离开该方法。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 创建好我们的Middleware之后，我们需要在项目的根目录新建一个名为&ldquo;Startup&rdquo;的类，并在此类里面创建一个名为&ldquo;Configuration&rdquo;的方法：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_91ec6ef8-227e-418c-8d2a-993341733d39\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Startup.cs</span> <img id=\"code_img_opened_91ec6ef8-227e-418c-8d2a-993341733d39\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_91ec6ef8-227e-418c-8d2a-993341733d39\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> Demo1\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> Owin;\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Startup\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Configuration(IAppBuilder app)\r\n        {\r\n            app.Use(</span><span style=\"color: #0000ff;\">typeof</span><span style=\"color: #000000;\">(MyMiddleware));\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_91ec6ef8-227e-418c-8d2a-993341733d39\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">namespace Demo1\r\n{\r\n    using Owin;\r\n    public class Startup\r\n    {\r\n        public void Configuration(IAppBuilder app)\r\n        {\r\n            app.Use(typeof(MyMiddleware));\r\n            \r\n        }\r\n    }\r\n}\r\n\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这里也要为这个类作出一番解析：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; OwinHost尝试驱动OWIN框架时，它会尝试寻找Startup，并激活里面的Configuration，继而激活我们自定义的Middleware。OwinHost激活我们的Middleware之后，OwinHost与OWIN框架之间就建立了连接，连接这两个世界的&ldquo;门&rdquo;也就打开了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在示例代码中，Demo1为讲解如何通过简单的操作OWIN字典获取并返回我们想要输出的结果。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907013200167.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Demo2则是模拟ASP.NET MVC的路由功能，OwinHost激活Startup时，程序会对自身的程序集进行反射，找出所有以&ldquo;Controller&rdquo;结尾的类，并把里面的方法注册到路由字典中。当有来自于用户的请求，程序则会自动的拆解URL并在路由字典中判断是否存在改页面，存在则继而激活相应的方法（Action），不存在则导向到404页面。其效果如下图所示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907013205852.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 成功的路由导向到Home/Index 页面</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907013234100.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 访问一个不存在的地址，路由导向到一个404的小动画。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 事实上，由于我们是基于OWIN协议直接操作OWIN字典所诞生的小Demo，因此我们是可以以一种无障碍的方式直接将项目发布到Linux.NET中运行。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、充当转换插头角色的适配器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可能有细心而又爱动脑筋的读者不禁问到，关于那两个Demo（也能泛指其他所有的OWIN框架），OwinHost已经有了（Katana或者Jexus或其他），Middleware也由我们自行提供，不是OwinHost就可以与OWIN框架之间作出通信了吗？上一回合中所出现的适配器又是怎么回事？为什么没有见到Windows版的适配器？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在解析这个之前，我先上一张能够很恰当比喻适配器的图片：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907013349514.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 这是我随手从网上找来的图片，用过它的读者很容易就能够分辨出来它是一个转换插头，它能够把各种类型的原插口转换成通用的插口。对的，没错，如果以简单的方式来理解，适配器所起的所用正式OwinHost与OWIN框架之间的转换插头，它把OwinHost中所提供的原始数据格式化成OWIN字典供OWIN框架使用。这就是简单的理解方式。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 更深入的方式来理解，适配器发挥着两个重要的作用，除了简单理解中所讲述的作用以外，它还充当着让OwinHost成功驱动Startup并激活Configuration的关键。有兴趣的读者可以打开Jexus针对于OWIN框架的适配器，你会发现原来它也是通过反射寻找Startup类并激活里面的Configuration来创建Middleware并建立连接的，了解了这一点之后，我们可以通过修改适配器的源码来更改OwinHost尝试驱动OWIN框架时最先激活的类，我们可以根据自己的爱好把&ldquo;Startup&rdquo;这个名字改为&ldquo;Breakdown&rdquo;、&ldquo;Sunday&rdquo;或者&ldquo;ILoveChina&rdquo;甚至&ldquo;ILoveXiaodiejinghong&rdquo;，也可以把&ldquo;Configuration&rdquo;改为其他&hellip;&hellip;总之你喜欢的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至于为何Katana没有适配器，我这里只能说：&ldquo;可能已经内置了吧&rdquo;（具体还需要各位读者查看源码，我没有查看过，因此没有发言权）。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 好的，两回合文章我们简单的认知了一些关于OWIN的事情，OWIN作为微软提出一套重要协议具有重大的战略意义。不多说了，我们下回再见吧。谢谢。</span></p>\r\n</body>\r\n</html>',1410053227351,1410053765473,752,6,'10,17',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; <a href=\"http://jhonge.net/Home/Single/10901153\">上一回合</a>中，我们讲解了Linux.NET面对OWIN需要做出的准备，以及介绍了如何将两个支持OWIN协议的框架：SignalR以及NancyFX以OwinHost的方式部署到Linux.NET当中。这一章，我们将对框架与OwinHost之间怎么通过OWIN协议作出解析。</span></p>',1410053227351),(40,'关于《Linux.NET学习手记（8）》的补充说明','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前的一两天<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>发布了，这一篇主要是讲述OWIN框架与OwinHost之间如何根据OWIN协议进行通信构成一套完整的系统。文中我们还直接学习如何直接操作OWIN字典，从OwinHost中拿数据进行直接使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过文章发布之后，有朋友提示我，文章出了点细节上的问题，我细细度量之后，发现果然出了情况，并且还不是一个无关紧要的小问题，本打算把那篇文章下线，待修改好之后再重新上线，网友&ldquo;王爷&rdquo;提醒到，可以为文章专门写上一篇补充文，这样颇有手稿的感觉。考量之下我接受了王爷的建议，&ldquo;Linux.NET学习手记&rdquo;本就是个人学习的记录，也算得上是手稿的一种。于是就有了这一篇的补充文。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>中主要犯了以下这几个错误：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、误将&ldquo;Microsoft.OWIN&rdquo;当&ldquo;OWIN&rdquo;，使&ldquo;OWIN&rdquo;的概念扩大。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、&ldquo;Middleware&ldquo;其实并不是OWIN必须的</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、适配器不是这样用的</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、<span style=\"color: #403226; text-transform: none; line-height: 24px; text-indent: 0px; letter-spacing: normal; font-style: normal; font-variant: normal; font-weight: normal; word-spacing: 0px; float: none; display: inline !important; white-space: normal; font-size-adjust: none; font-stretch: normal; background-color: #ffffff; -webkit-text-stroke-width: 0px;\">&ldquo;Microsoft.OWIN&rdquo;不等于&ldquo;OWIN&rdquo;</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>中，虽然文中并没有任何一个地方指出&ldquo;Microsoft.OWIN&rdquo;是&ldquo;OWIN&rdquo;这么一个说法，但是文章的写作手法中，却非常容易的把读者引入歧途，让读者误以为&ldquo;OWIN&rdquo;其实就是&ldquo;Microsoft.OWIN&rdquo;。什么是&ldquo;OWIN&rdquo;，\"OWIN\"说白了就是一个协议，一个字典，里面包含了Environment，&ldquo;OWIN.dll&rdquo;其实也不过是一个接口，没有更多。所有根据&ldquo;OWIN&rdquo;所派生出来的东西已经不是OWIN自己了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 因此，在<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>应把所有的&ldquo;OWIN&rdquo;改为&ldquo;Microsoft.OWIN&rdquo;，指明这是针对&ldquo;Microsoft.OWIN&rdquo;所诞生出的东西。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、&ldquo;Middleware&rdquo;其实是&ldquo;Microsoft.OWIN&rdquo;的东西</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我需要上一个图，说说为什么在现有的OWIN框架中以及我也为何写作时发生误判：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907014033250.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如图所示，虽然OWIN协议并不属于任何的一方，但是出现得最早的关于OWIN协议的实现是微软的&rdquo;Microsoft.OWIN&ldquo;，因此目前许多的OWIN框架都是基于&rdquo;Microsoft.OWIN&ldquo;来实现。而&rdquo;Startup&ldquo;、&rdquo;Configuration&ldquo;、&rdquo;Middleware&ldquo;等组件是&rdquo;Microsoft.OWIN&ldquo;所提出的知识点，因此这些OWIN框架也就自然而然的会出现这一类的事物来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 因此，我们文中说到&rdquo;转动我们的钥匙&ldquo;，其实是转动&rdquo;Microsoft.OWIN&ldquo;的钥匙，而不是整个&rdquo;OWIN&ldquo;大门的钥匙。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、适配器的真正用法</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上一节中已经说得非常清楚了，目前现存的OWIN框架都是针对&ldquo;Microsoft.OWIN&rdquo;所缔造出来的框架，因此这些OWIN框架与Katana之间是无缝的连接，根本就无需适配器这一类型的玩意，而Jexus则不同，适配器这一说法是Jexus针对这些基于&ldquo;Microsoft.OWIN&rdquo;所实现出来的OWIN框架能够在Jexus.OwinHost中使用所诞生出的组件（感谢Jexus原作者的提醒），下面附上宇内流云给出的概念图：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090701414241.jpg\" alt=\"\" /></span></p>\r\n<hr />\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然即使不了解OWIN本身，对于日常的开发没有太大的影响（除非涉及到直接操作OWIN字典这方面），框架还是照样的用，项目还是照样的开发。但是，我个人对于知识的准确性要求比较高，需要做到一丝不苟。如果更多的朋友发现有其他错误的，也欢迎指出更正。谢谢。</span></p>\r\n</body>\r\n</html>',1410054154482,1410054227882,542,6,'10,17',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前的一两天<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>发布了，这一篇主要是讲述OWIN框架与OwinHost之间如何根据OWIN协议进行通信构成一套完整的系统。文中我们还直接学习如何直接操作OWIN字典，从OwinHost中拿数据进行直接使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过文章发布之后，有朋友提示我，文章出了点细节上的问题，我细细度量之后，发现果然出了情况，并且还不是一个无关紧要的小问题，本打算把那篇文章下线，待修改好之后再重新上线，网友&ldquo;王爷&rdquo;提醒到，可以为文章专门写上一篇补充文，这样颇有手稿的感觉。考量之下我接受了王爷的建议，&ldquo;Linux.NET学习手记&rdquo;本就是个人学习的记录，也算得上是手稿的一种。于是就有了这一篇的补充文。</span></p>',1410054154482),(41,'关于《Linux.NET学习手记（8）》的补充说明','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前的一两天<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>发布了，这一篇主要是讲述OWIN框架与OwinHost之间如何根据OWIN协议进行通信构成一套完整的系统。文中我们还直接学习如何直接操作OWIN字典，从OwinHost中拿数据进行直接使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过文章发布之后，有朋友提示我，文章出了点细节上的问题，我细细度量之后，发现果然出了情况，并且还不是一个无关紧要的小问题，本打算把那篇文章下线，待修改好之后再重新上线，网友&ldquo;王爷&rdquo;提醒到，可以为文章专门写上一篇补充文，这样颇有手稿的感觉。考量之下我接受了王爷的建议，&ldquo;Linux.NET学习手记&rdquo;本就是个人学习的记录，也算得上是手稿的一种。于是就有了这一篇的补充文。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>中主要犯了以下这几个错误：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　1、误将&ldquo;Microsoft.OWIN&rdquo;当&ldquo;OWIN&rdquo;，使&ldquo;OWIN&rdquo;的概念扩大。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　2、&ldquo;Middleware&ldquo;其实并不是OWIN必须的</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">　　3、适配器不是这样用的</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>中，虽然文中并没有任何一个地方指出&ldquo;Microsoft.OWIN&rdquo;是&ldquo;OWIN&rdquo;这么一个说法，但是文章的写作手法中，却非常容易的把读者引入歧途，让读者误以为&ldquo;OWIN&rdquo;其实就是&ldquo;Microsoft.OWIN&rdquo;。什么是&ldquo;OWIN&rdquo;，\"OWIN\"说白了就是一个协议，一个字典，里面包含了Environment，&ldquo;OWIN.dll&rdquo;其实也不过是一个接口，没有更多。所有根据&ldquo;OWIN&rdquo;所派生出来的东西已经不是OWIN自己了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 因此，在<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>应把所有的&ldquo;OWIN&rdquo;改为&ldquo;Microsoft.OWIN&rdquo;，指明这是针对&ldquo;Microsoft.OWIN&rdquo;所诞生出的东西。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">二、&ldquo;Middleware&rdquo;其实是&ldquo;Microsoft.OWIN&rdquo;的东西</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在这里，我需要上一个图，说说为什么在现有的OWIN框架中以及我也为何写作时发生误判：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/140907014033250.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如图所示，虽然OWIN协议并不属于任何的一方，但是出现得最早的关于OWIN协议的实现是微软的&rdquo;Microsoft.OWIN&ldquo;，因此目前许多的OWIN框架都是基于&rdquo;Microsoft.OWIN&ldquo;来实现。而&rdquo;Startup&ldquo;、&rdquo;Configuration&ldquo;、&rdquo;Middleware&ldquo;等组件是&rdquo;Microsoft.OWIN&ldquo;所提出的知识点，因此这些OWIN框架也就自然而然的会出现这一类的事物来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 因此，我们文中说到&rdquo;转动我们的钥匙&ldquo;，其实是转动&rdquo;Microsoft.OWIN&ldquo;的钥匙，而不是整个&rdquo;OWIN&ldquo;大门的钥匙。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">三、适配器的真正用法</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 上一节中已经说得非常清楚了，目前现存的OWIN框架都是针对&ldquo;Microsoft.OWIN&rdquo;所缔造出来的框架，因此这些OWIN框架与Katana之间是无缝的连接，根本就无需适配器这一类型的玩意，而Jexus则不同，适配器这一说法是Jexus针对这些基于&ldquo;Microsoft.OWIN&rdquo;所实现出来的OWIN框架能够在Jexus.OwinHost中使用所诞生出的组件（感谢Jexus原作者的提醒），下面附上宇内流云给出的概念图：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14090701414241.jpg\" alt=\"\" /></span></p>\r\n<hr />\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 虽然即使不了解OWIN本身，对于日常的开发没有太大的影响（除非涉及到直接操作OWIN字典这方面），框架还是照样的用，项目还是照样的开发。但是，我个人对于知识的准确性要求比较高，需要做到一丝不苟。如果更多的朋友发现有其他错误的，也欢迎指出更正。谢谢。</span></p>\r\n</body>\r\n</html>',1410054160194,1410054160194,0,6,'10,17',1,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 早前的一两天<a href=\"http://jhonge.net/Home/Single/26275207\">《Linux.NET学习手记（8）》</a>发布了，这一篇主要是讲述OWIN框架与OwinHost之间如何根据OWIN协议进行通信构成一套完整的系统。文中我们还直接学习如何直接操作OWIN字典，从OwinHost中拿数据进行直接使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 不过文章发布之后，有朋友提示我，文章出了点细节上的问题，我细细度量之后，发现果然出了情况，并且还不是一个无关紧要的小问题，本打算把那篇文章下线，待修改好之后再重新上线，网友&ldquo;王爷&rdquo;提醒到，可以为文章专门写上一篇补充文，这样颇有手稿的感觉。考量之下我接受了王爷的建议，&ldquo;Linux.NET学习手记&rdquo;本就是个人学习的记录，也算得上是手稿的一种。于是就有了这一篇的补充文。</span></p>',1410054160194),(42,'到底应该选择那种Linux.NET的部署方式？','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;当前部署Linux.NET环境的方式可谓是五花八门，既有传统的源码编译的方式、又有各式各样的一键安装脚本、还有绿色包安装方式，而随着Mono官方的新站上线，更增加了采用RPM包的部署方式。那对于一名Linux.NET的初学者来说，我们又该如何选择？下面，本文将对这几种的安装方式进行优缺点的比较，从而协助各位读者选择出最佳的部署方式。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;本文中，我们将对下列的部署方式展开讨论：</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp;&nbsp;1、源码编译</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; 2、一键安装脚本</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; 3、RPM包</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; 4、绿色包</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">一、源码编译</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 通过源代码编译安装部署Linux.NET可谓是最传统并且最原始可靠的方式，通过获取源代码，并在物理机（虚拟机）中进行编译，编译器能够有针对性的给机器编译出最适合改机器运行的二进制执行文件。同时，通过源代码编译的方式也是所有部署方式中最稳定靠谱的方式。同时，采用源码编译的方式部署也是最灵活的。要想深入学习的读者必须要掌握此方式部署。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 想要通过源码编译的方式安装部署Linux.NET，我们需要事先Get到一份源代码，目前获得Mono源代码的方式主要分为两种，一种是通过GitHub将Mono的托管代码Pull下来执行autogen再执行make install的方式进行编译安装部署，另外一种则是通过Mono/Source所发行的源码包（tar.gz或者tar.bz2包）进行./Configuration再执行make install的方式编译。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 事实上，如果读者们采用前者（也就是Git Pull的方式）来编译部署环境，所获取到的版本一般都会比从Mono/Source中发行的版本高（当然在能够编译的情况下），对希望能够尽快使用最高版本或者想尝鲜的读者，使用这种方式不失为一个好选择。但选择这个方式也有一定的缺点，那就是我们在编译之前需要先进行Git Clone或者Git Pull代码，这将使我们可能面临上G的Git代码仓库需要下载，同时由于Mono中的external目录下又包含了其他.NET项目的GIT仓库，执行autogen时，系统会检查包括external目录的代码是否完整，因此编译时系统也有可能再次的执行Git Pull拉去相关代码。另外还有一点，在我们进行Git Pull Master之后，我们也未必可以编译通过。所幸的是，文章发布之后，LexLi给予了一些提醒，通过他的思路，我们发现了其实GitHub/Mono的Readmd中是有一盏当前代码是否能够编译的&ldquo;提示灯&rdquo;，通过观察此&ldquo;灯&rdquo;所显示的颜色我们就可以知道当前的代码是否可以编译，另外<a href=\"http://jenkins.mono-project.com/job/test-mono-mainline/\" target=\"_blank\">在这里</a>也有一个版本编译测试历史记录，我们也可以根据它的编译测试记录获知那一个提交版本的的源码是可以编译，然后只需把代码ReSet到此版本即可再次进行编译。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 而采用Mono/Source所发行的源码包编译的读者，可靠性则大幅度提高，毕竟这个是Release版本。虽然当中有个别的发行包因为文件缺失无法编译，但是总得来说还是最可靠的，并且源码包发行版大小一般都在百兆以内，相比于Git仓库的上G代码可谓是小巧得多。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 最后，各位读者无论是采用以上两种方式中的那种，都需要花费一段或漫长或短暂的编译等待时间，并且编译时可能会遇到一些Make Error的现象，这都需要各位读者自己进行克服处理。但无论怎么样，这还是对想深入学习Linux.NET的读者要求必须掌握的部署方式。（有需要的读者可以参详<a href=\"/Home/Single/6881602\">《Linux.NET学习手记》</a>）</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">二、一键安装脚本</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 由于采用源码编译方式都是直接采用Shell命令来操作，因此有不少的人士将这些Shell命令提取出来重新组装成一个Shell脚本，只要执行该脚本即可完成环境的部署，其中更有爱好者别出心裁，在命令行的基础上加以改进，提供类似&ldquo;界面&rdquo;之流的方式，给予了较好的与用户的交互。采用脚本式部署环境是解放生产力的标志。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 但即便如此，采用脚本安装的方式仍然存在着相当的不足，那便是采用脚本安装其实只是一个&ldquo;礼盒&rdquo;，&ldquo;礼盒&rdquo;里面的内容依然是源代码编译方式，因此，采用脚本安装所遇到的问题不会比采用源码安装的少。同时，采用脚本安装仍然存在这&ldquo;兼容性&rdquo;的问题，这里值得注意，所谓的&ldquo;兼容性&rdquo;并不是指脚本的命令行不通用，而是由源码编译所&ldquo;继承&rdquo;下来的&ldquo;不兼容&rdquo;，也就是环境的复杂性造成不同的Make Error所带来的&ldquo;不兼容&rdquo;。此外，由于每个人都有自己的安装风格，有的人可能喜欢将东西安装在&ldquo;/usr&rdquo;中（像宇内、善友的教程等），有人喜欢安装到&ldquo;/usr/local/&rdquo;中（我的风格，《<a href=\"/Home/Single/6881602\">Linux.NET学习手记</a>》的教程路径），也有人喜欢安装到&ldquo;/opt&rdquo;中&hellip;&hellip;总而言之，脚本中所编写的安装路径纯属由撰写者决定，安装目录可能并不是各位读者所希望的路径，这点也有一定的不足。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">三、RPM包</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 伴随着Mono新版官网的上线，依赖于Yum的RPM安装方式也悄悄的出现在各位读者的视野，一段时间以来，不少朋友开始或是为了尝鲜（没办法，体验到Yum的甜头之后恐怕很难回头了）或是收到&ldquo;官方&rdquo;的指引纷纷采用了此种办法部署Linux.NET环境。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 我没有尝试过这种方式（懒得自己添加镜像源），不过从不少朋友反（bao）馈（yuan）回（ma）来（niang）的信息来看，这种方式似乎是几种方法中最残（zi）念（sha）的了。由于RPM包隶属于二进制包的一种，安装路径已经在包中预配置，无法更改，我们也无法获知它到底安装到哪里（只能find了），从一些通过此方式安装的朋友所提供的资料来看，基本上会安装到&ldquo;/opt&rdquo;目录中（不过没有具体目录，有&ldquo;/opt/&rdquo;、&ldquo;/opt/mono&rdquo;甚至&ldquo;/opt/201408xx/&rdquo;目录）。此外，采用RPM包方式安装还有一项非常严重的问题，那就是采用此种方式安装竟然没有向环境变量注册Mono/bin路径，导致系统无法找到mono。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 因此，我个人尤其不推荐此中安装方式。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">四、绿色包（jws.mono）</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 以上三种方式都有一个共同的特点，那就是都需要在有网络条件的情况下进行。而绿色包与前者不同，绿色包是从使用源码编译好的机器中进行抽取重组并进行适当的修改变成新的解压即可运行的绿色版的Linux.NET运行环境。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 使用绿色包具有以下的几项优点：</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; （1）、快速部署，由于采用此方式部署仅仅需要执行一条解压命令（有需要的可自行注册环境变量），没有编译过程，大大节省了因为环境部署所需要消耗的宝贵时间。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; （2）、针对性强：由于每一款的绿色包都是针对其标注的Linux发行版进行编译，因此绿色包具有比较强的发行版针对性。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; &nbsp; （3）、精致而不失功能：使用过绿色包的读者可能会发现，它的打包文件大小甚至会比Mono/Source所发行的源码包还会小，但功能却又没有减少。这个秘密就在于Mono与MS.NET不同，Mono的库是向下兼容的，因此，在每款的绿色包中，我们都会对&ldquo;重复&rdquo;的库进行剔除，让包变得足够精致。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 但金无足赤，绿色包同样也面临一些问题，第一就是它无法升级（这项即将得到改善，在下个发行包中提供可用于升级的脚本），第二就是制作发行包是一项工作量大且耗时的活。我们需要对应编译并制作相应发行版的包。</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp; 不过对于初学者和需要快速部署、大规模部署的读者来说，绿色包还是最佳选择，因为它足够容易，因为它足够快。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;当然了，仁者见仁智者见智，以上观点乃我利用Linux.NET编译的时间写出的（已经失败了差不多十次）的主观观点和建议，不喜勿弹哈，谢谢。</span></p>\r\n</body>\r\n</html>',1411981502252,1412093432460,1763,6,'7,8,9,10',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 想要学习Linux.NET？那必须先要有一个Linux.NET的运行环境。当前部署Linux.NET环境的方式可谓是五花八门，既有传统的源码编译的方式、又有各式各样的一键安装脚本、还有绿色包安装方式，而随着Mono官方的新站上线，更增加了采用RPM包的部署方式。那对于一名Linux.NET的初学者来说，我们又该如何选择？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 本文将通过对这几种部署方式的优缺点进行罗列，希望能给读者，特别是新加入Linux.NET的读者予以启发。</span></p>',1411981502252),(43,'jws.mono脚本安装详解','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 就在最近两天，最新版本的jws.mono上线了，这个版本除了提供与之前版本拥有的功能外，还额外提供了一个&ldquo;自动化&rdquo;的安装脚本，通过执行该脚本，jws.mono将自动快速的安装到指定的目录，同时，通过改变脚本执行参数，我们还可以实现对旧版本jws.mono的升级。此外，由这个版本开始，jws.mono还提供了供Red Hat流Linux使用的initd脚本&mdash;&mdash;jwsd，借助这个jwsd，我们可以以&ldquo;server jwsd xxx&rdquo;的方式很容易的对Jexus进行操作（此功能需要使用脚本安装方式方可提供）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 关于jws.mono的好处，我这里就不在过分详述了，有兴趣的读者可以移步查阅《<a href=\"/Home/Single/15235204\">到底应该选择那种Linux.NET的部署方式？</a>》。而jws.mono的&ldquo;手工&rdquo;安装方式，这里也不再作详述，jws.mono的说明文档中有相应的叙述，还需要更多帮助的可翻阅《<a href=\"/Home/Single/17711065\">绿色版的Linux.NET&mdash;&mdash;&ldquo;Jws.Mono&rdquo;</a>》以及《<a href=\"/Home/Single/14240064\">绿色版的Linux.NET&mdash;&mdash;&ldquo;Jws.Mono&rdquo;(续)</a>》相信这些可以帮到你。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对了，竟然忘记了最重要的一件事了，那就是新版jws.mono的版本说明和下载地址了。本次提供的jws.mono的内置Mono版本为3.10.1，Jexus的版本为5.6.2，同样是GAC库无删减。其下载地址为：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、适用于32位CentOS 6+ 操作系统的：<strong><a href=\"https://github.com/xiaodiejinghong/JWS_MONO_X86CentOS/archive/master.zip\" target=\"_blank\">点我下载（GitHub源）</a></strong></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、适用于64位CentOS 6+ 操作系统的：<strong><a href=\"https://github.com/xiaodiejinghong/JWS_MONO_X64CentOS/archive/master.zip\" target=\"_blank\">点我下载（GitHub源）</a></strong></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、适用于64位Ubuntu 12+ 操作系统的：<strong><a href=\"https://github.com/xiaodiejinghong/JWS_MONO_X64Ubuntu/archive/master.zip\" target=\"_blank\">点我下载（GitHub源）</a></strong></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><strong>&nbsp; &nbsp; </strong>网络不好的情况，可右键获取下载地址，然后放入迅雷离线、旋风离线或百度云离线等方式进行离线下载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 下面就开始进入新版本jws.mono的第二种安装方式也就是使用脚本安装的详解中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 使用此方式安装jws.mono，我们只需进行以下几个步骤：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 对于第一次安装：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; a）、解压绿色包并切换到data/目录</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; b）、执行 ./install -i &nbsp;开始进行jws.mono的安装</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; c）、待提示&ldquo;Congratulations...All Install Complete~!&rdquo;方可完成安装（默认安装到/jws.mono中）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 而对于需要升级旧版本的jws.mono：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; a）、解压绿色包并切换到data/目录</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; b）、执行 ./install -u &nbsp;开始进行jws.mono的升级</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp; c）、待提示&ldquo;Congratulations...All Install Complete~!&rdquo;表示升级成功（注意：默认需要旧版本的jws.mono位于/jws.mono中）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这里还有一个新手慎用的小Tips，执行install脚本的时候，还可以加入第二个参数&ldquo;--prefix&rdquo;，通过&ldquo;--prefix=安装目录&rdquo;，我们还可以指定jws.mono的安装路径，将jws.mono自动的安装到我们指定的目录中。【再次发出提醒，该参数仅提供给有特殊需要的人士使用，新手慎用，因为这可能为您带来不必要的麻烦】</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 使用脚本方式安装jws.mono，我们除了可以通过进入Jexus目录直接操作jws来控制Jexus外，我们还可以通过另外一种方式来控制Jexus，命令如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 启动Jexus：service jwsd start</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 关闭Jexus：service jwsd stop</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 重启Jexus：service jwsd restart</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 查看Jexus状态：service jwsd status</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 查看Jexus版本：service jwsd version</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 设置Jexus为开机启动：chkconfig jwsd on</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 取消Jexus开机启动：chkconfig jwsd off</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这其中的奥秘就是：使用脚本方式安装jws.mono，一个名为jwsd的init脚本会自动的加入到init.d/目录中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最后，让我们在一轮的Q&amp;A中结束本篇的内容。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、Q：使用脚本方式安装与采用手工的安装，技术技术细节中有什么不同吗？A：使用脚本安装除了提供了更多的功能外，还有一点就是包括mono/bin/中的一些文件以及jwd都是通过脚本来生成，而非进行单纯的拷贝，这是为了让即使使用了--prefix参数，我们仍能够正确的配置出Mono以及Jexus所需的配置。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、Q：为什么我安装的时候会提示&ldquo;Other Mono Exists&rdquo;？A：一些操作系统譬如Ubuntu，系统已经内置了Mono，如果系统中存在多个可直接通过Mono命令运行的Mono JIT，这将会造成不同Mono间的互相干扰，因此jws.mono的安装过程第一步会先检测是否存在其他的Mono，如发现确实存在，则终止当前的操作，防止对系统造成不可逆的破坏。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、Q：这个可以在RHEL中运行吗？A：你试试。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; 好了，本文到此结束了，谢谢各位的支持。</span></p>\r\n</body>\r\n</html>',1412208640610,1416404691752,1190,6,'7,8,9,10,11',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 新版本的jws.mono除了提供更最新版的Mono和Jexus外，还提供了一份&ldquo;自动化&rdquo;安装脚本以及相关的便于用户使用的功能。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 本文中，我们将讲述如何通过绿色包所提供的脚本来安装和升级我们的jws.mono。同时本位还介绍由于使用脚本安装所带来的&ldquo;玩意&rdquo;以及使用脚本安装与自己手动安装两者之间的区别。</span></p>',1412208640610),(44,'如何给CentOS安装字体库','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 很多时候，我们需要做一些图像生成工作（譬如验证码之类的），这时候，我们一般都需要用到系统的字体库。但事情却总非尽善人意，我们所使用的Linux操作系统无法像Windows操作系统那样足够&ldquo;旗舰&rdquo;，字体这种东西，分分钟都是缺失的（譬如我们选择Minimum方式安装或者没有选择Chinese Support之类的）。如果遇到这种情况，我们就得发扬DIY（自己动手丰衣足食）的精神，自己给操作系统安装字体库了。本节内容，我们将讲解如何为CentOS（Red Hat流）操作系统安装字体库，使用Ubuntu的童鞋，可以移步参考《<a href=\"http://www.linuxdot.net/bbsfile-3253\" target=\"_blank\">如何在Ubuntu上安装字体</a>》。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 如果各位读者向Linux.NET部署站点时遇到下面这幅图的时候，本文就恰好能够派上用场了，因为它正在提示您：您的操作系统缺少了相关的字体库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14100914405866.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;这时候，只需要参照本文一下的操作即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;首先，第一步我们需要执行以下的命令来安装字体管理工具：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;yum install -y fontconfig mkfontscale<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;然后我们到&ldquo;c:\\windows\\fonts&rdquo;中把我们需要的字体拷贝出来（这里我们拷贝了&ldquo;Arial&rdquo;、&ldquo;Comic Sans MS&rdquo;、&ldquo;Georgia&rdquo;、&ldquo;Times New Roman&rdquo;四种）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141009145259835.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;把他们拷贝出来（注意，这里是字体的连带关系，你拷贝一个字体系统会把附属的也跟着拷贝出来，可以不用管）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;然后上传到&ldquo;/usr/share/fonts&rdquo;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/1410091455170.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 执行下面三条命令刷新字体缓存</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;mkfontscale</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;mkfontdir</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;fc-cache&nbsp;-fv</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最后重启操作系统（Reboot）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在这里，读者们可以执行&ldquo;fc-list&rdquo;来查看安装了那些字体（看每一个小段落前面的那加个英文即可）</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 好的，本节内容就到这里了，谢谢。</span></p>\r\n</body>\r\n</html>',1412866854914,1412866991401,1580,6,'9',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 很多时候，我们需要做一些图像生成工作（譬如验证码之类的），这时候，我们一般都需要用到系统的字体库。但事情却总非尽善人意，我们所使用的Linux操作系统无法像Windows操作系统那样足够&ldquo;旗舰&rdquo;，字体这种东西，分分钟都是缺失的（譬如我们选择Minimum方式安装或者没有选择Chinese Support之类的）。如果遇到这种情况，我们就得发扬DIY（自己动手丰衣足食）的精神，自己给操作系统安装字体库了。</span></p>',1412866854914),(45,'激活jws.mono的图像处理','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 不得不说，jws.mono真的给我们带来了很大的便利，它免除了我们编译Linux.NET所带来的烦恼，节省了我们的时间。但是金无足赤人无完人，虽然jws.mono已经大致能够提供与我们自行编译相同的效果，不过它仍然有一点不足，那就是我们无法使用与图形处理相关的工作（System.Drawing）。造成这点不足的原因就是在于，我们的jws.mono没有内置与常见图像处理相关的库，澄清一点，这里所指的库是类似于\"libpng库\"、\"libjpeg库\"、\"gd库\"之类的通用图形处理库，并非\"libgdiplus库\"，\"libgdiplus库\"是已经集成了的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 所以当有使用jws.mono的读者需要做一些与图像处理相关的操作时（验证码的生成之类的），页面会出现如下图的错误（大图，可以单独拖出来看）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141011113628990.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 要解决这个问题也是比较简单的，我们只要把缺了的库补上即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对于CentOS【Red Hat流】操作系统的读者可在网络通畅的情况下执行以下命令：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;yum install glib2-devel gettext make libpng-devel libjpeg-devel libtiff-devel libexif-devel giflib-devel libX11-devel freetype-devel fontconfig-devel &nbsp;cairo-devel</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对于Ubuntu【Debian流】操作系统的读者则可以在网络畅通的情况下执行以下命令：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;apt-get&nbsp;install&nbsp;libgif-dev&nbsp;libtiff4-dev</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;apt-get&nbsp;libpng12-dev&nbsp;libexif-dev&nbsp;libx11-dev</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;apt-get&nbsp;libxft-dev&nbsp;libjpeg62-dev</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 通过以上的命令，系统会自动的从Linux镜像服务器在线下载并安装相关的图形库。再这些库安装完毕之后，读者们只需要执行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; service jwsd stop</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; service jwsd start</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 重新启动Jexus服务【没有注册脚本的，自行进入/jws.mono/jexus/进行重启】，我们就可以使用上了图像处理功能了。</span></p>\r\n<p>&nbsp;<img src=\"/Static/Images/141011163900954.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 好的，这一节到此结束，如果各位读者的机器足够&ldquo;干净&rdquo;，再完成这些图像库的安装之后可能还需要安装字体库，有需要的读者可以移步到《<a href=\"/Home/Single/29427288\">如何给CentOS安装字体库</a>》，希望各位读者能使用愉快，谢谢。</span></p>\r\n</body>\r\n</html>',1413027679855,1413046467675,839,6,'9,8,7',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; jws.mono真的是非常方便，它能够让我们免除了源码编译所带来的烦恼，节省我们的时间，同时，它的包也比较小（比源码包本身还小）而又不失去相关功能。但是，金无足赤人无完人，虽然jws.mono如此强悍，但也存在这一个&ldquo;软肋&rdquo;，那就是它无法做图像处理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 那么，问题就来了，如果我们需要用到一些图像处理功能，像二维码、验证码的生成怎么办？难道就此绝缘？不！！本节内容，我们将讲解如何给&ldquo;</span><span style=\"font-family: 宋体; font-size: medium;\">康达姆机器人</span><span style=\"font-family: 宋体; font-size: 16px;\">&rdquo;升级装备，让我们的jws.mono也能用进行与源码编译一样的图像操作。</span></p>',1413027679855),(46,'JWS.Mono如何进行“在线安装”','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 各位读者大家好，如果说，JWS.Mono的脚本安装方式是因为某群某网友PigPig提出升级JWS.Mono这个需求所催生出的安装方式的话，那么本文所提供的在线安装方式绝对是我个人自我救赎的方式。（说个题外话，据了解，网友PigPig他们公司的项目是采用NancyFX作为基础框架，采用OWIN协议，将项目挂载到Jexus中，Linux.NET的环境貌似也是采用JWS.Mono快速部署【还需要考证下】）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 可能有好奇的读者会问到，自我救赎，啥意思？莫急磨机，切听我娓娓道来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 先介绍下在此之前的JWS.Mono的制作过程：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1）、首先，我们需要找一台干净（新建一台）虚拟机并安装上Linux操作系统。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2）、然后获得新版的安装包并进行比较常规的编译安装\"libgdiplus\"以及\"Mono\"。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 3）、把我们需要的库进行抽取并重新组装出绿色版本的Mono。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 4）、从宇内大大的官网中把最新版Jexus下载下来，并加入绿色包中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 5）、对一些JWS.Mono的文件进行手工的修改，并打包tar.gz。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 6）、找来另外一个纯净（要求纯净，一般是Minimum方式新装一台）进行两轮的-i、-u、-i --prefix=xxx和-u --prefix=xxx（不断回滚VM的一轮测试以及不做回滚系统的一轮测试）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 7）、通过测试之后便可从Linux中转移出Windows中，加上说明文档便可以7Z包的方式上传到云盘供读者们下载。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 完成以上的流程步骤才得出一份可靠的JWS.Mono出来，且先不说步骤的繁琐，由于不同派别的Linux二进制包互不兼容，同一派别的Linux也有X86和X64之分（实际更多，还要IA64等，这里没有提供），而每一个制作一个JWS.Mono的绿色包则至少需要两台的虚机。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141022161758284.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 而笔者家中所在网络乃城中村共享小破网，连个淘宝都打不开的（最近从电信拉了个新网有500+K上行），家中电脑也是从大学一直跟着过来的本本，开机速度没有一次比2分钟快，试过最慢4分钟。因此，JWS.Mono所用到的\"原材料\"如果更新太快的话，那就基本吃不消了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 而事实上，总所周知，GitHub/Mono是异常活跃的<span style=\"text-decoration: line-through;\">，整天刷版本，</span>版本迭代是非常快，而作为国内优秀的Linux.NET Web Server的Jexus也不是吃干饭的，版本的更新也是异常的\"激烈\"。那么，问题就来了，如何使用比较小的代价来让Jexus和Mono的更新不会影响到对方，同时能够让读者们所能下载到的版本包保持足够最新而又不需要我重新的把新的包重新上传呢？寻寻觅觅之中，我们找到了GitHub的Download Zip功能（除了GitHub，jdCode之类的也有提供）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 当有Jexus或者Mono需要更新时，我们只需要把需要更新的那部分替换掉，然后再Push上Git中，那么读者们通过DownLoad Zip下载到的JWS.Mono包都可以保持最新的。同时，读者们还可以通过Git Clone的方式把整套的GIT仓库克隆到本地，任何通过Git Reset的方式得到之前版本组合的JWS.Mono。【国内可能有些地方上不了GItHub或者下载速度太慢，建议挂离线下载，当然我们也会推一份去百度云盘，用户也可以直接去那里下】</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 此外，为了让这种在线安装方式变得更加简单，我们还提供了一份在线安装的脚本，以下是使用方法<span style=\"background-color: #000000;\">前面是废话这里才是重点</span>：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; wget&nbsp;http://jhonge.net/down4load/1413998270361/jwsmono_net.sh</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; chmod a+x&nbsp;jwsmono_net.sh</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ./jwsmono_net.sh</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 通过以上三步，我们可以进入到JWS.Mono的安装控制台，我们只需要根据提示选择好操作系统：</span></p>\r\n<p><img src=\"/Static/Images/141022165338833.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;然后再选择好想要的操作即可进行安装了：</span></p>\r\n<p><img src=\"/Static/Images/141022165406365.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后电脑就会自动帮你下载所需要的包并且帮你安装好，剩下的就跟《<a href=\"/Home/Single/7612812\">jws.mono脚本安装详解</a>》里面一样了。是不是很有趣很简单？</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 好的，<span style=\"text-decoration: line-through;\">废话</span>就说这么多先，主要就是像告诉读者现在又有一种新的安装方式以及这种安装方式怎么用。就这样了，拜拜~~！！</span></p>\r\n</body>\r\n</html>',1413989286960,1413998527302,853,6,'8,9,11',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; JWS.Mono除了提供离线包的安装方式之外，现在又提供了一种在线安装方式。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 通过在线安装方式，读者可以无需提前准备好离线包，同时，通过改进JWS.Mono的获得方式，读者可以更快更及时的获得最新版本的Linux.NET环境。</span></p>',1413989286960),(47,'CentOS下如何搭建ISCSI以及Windows如何挂载ISCSI镜像','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 相信不少读者都使用过目录共享，网上邻居、Ftp、Samba、NFS或其他之类的，这些服务挺方便的，除了可以做文件共享之外，还可以当作网络同步盘使用。在本文中，我们将介绍一个功能与它们差不多的技术&mdash;&mdash;ISCSI。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 至于ISCSI是什么，我这里就不作介绍了，本文主要是以最简单最小要求的方式快速的搭建起一个ISCSI服务供自己使(shua)用(ku)。Ubuntu的搭建方式，各位读者可以<a href=\"http://jiezhia.blog.163.com/blog/getBlog.d\">点击这里下载</a>文档，这是由宇内流云编写的。我这里主要介绍CentOS搭建ISCSI的方式。事不宜迟，马上Go！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 首先，我们打开CentOS并确保网络通畅。然后我们执行（安装ISCSI-Server）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; &nbsp;yum install -y scsi-target-utils&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后创建出一个作为\"磁盘\"的文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;mkdir /home/mydisk</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; cd&nbsp;/home/mydisk</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;dd if=/dev/zero of=/home/mydisk/iscsi.block bs=4M count=1000</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这里解析下dd那条命令，这个是用于创建\"磁盘\"的，bs表示数据库(最小存储单位)大小，count表示数目，因此创建出来的磁盘空间大小=bs*count，各位读者可以通过修改count的数目来获得相应的磁盘空间大小。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后用打开文件/etc/tgt/targets.conf ：<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; vi&nbsp; /etc/tgt/targets.conf <br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 找到大概38行，如下图的位置：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023105353994.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 把38~40的注释去掉，然后把backing-sotre改为刚刚创建的文件的物理路径(/home/mydisk/iscsi.block)，需要做账户密码的还可以设置incominguser，需要做使用ip限制的可以增加initiator-address，修改后效果如下图：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023111119122.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 保存退出，然后重启ISCSI服务：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;service tgtd restart&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 有需要的还可以设置服务开机启动：chkconfig tgtd on</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; ISCSI的服务配置就完成了。下面我们再讲讲Windows里面怎么挂ISCSI的磁盘镜像：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 首先，进入\"控制面板\"-&gt;\"管理工具\"-&gt;\"ISCSI发起程序\"：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 如果是第一次使用，Windows会弹出以下图片，选择\"是\"即可：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023111549613.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后点击\"门户\"-&gt;\"发现门户\"，填写上ISCSI服务器的IP（Linux的IP），然后点击确定。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023112509499.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;然后在\"目标\"中选择需要连接的磁盘，点击连接，在弹出的对话框中点击高级，点击启动CHAP登录，输入帐号密码后，沿路点击确定返回【这里注意一件事，CHAP对密码的要求是11-16位，所以刚才设置密码的时候要设置这么多的位】。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023113009388.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;在\"卷和设备中\"，点击\"自动配置\",系统会自动的添加磁盘：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14102311342883.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;然后在\"磁盘管理\"中就出现了一块新的磁盘，我们只需要对他进行初始化并创建分区即可完成整套的ISCSI配置了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141023113634397.png\" alt=\"\" /></span></p>\r\n<p><img src=\"/Static/Images/141023113731735.png\" alt=\"\" /></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;至此，全套包括如何搭建ISCSI服务以及如何在Windows里面挂载ISCSI磁盘的全部流程已经讲解完毕。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;Tips：图片都是高清大图，可以单独拖出新页面看哦~~！！</span></p>\r\n</body>\r\n</html>',1414062955727,1414064718989,535,6,'9,18,19,20',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 相信不少读者都用过一些网络共享工具，如Windows中最常见的网上邻居，Linux中常见的NFS、Samba以及它们两边都常见的FTP等。本文中，我们将介绍另外一种即可用作文件共享，也可用作文件同步的网络共享服务&mdash;&mdash;ISCSI。希望能帮到你，谢谢。</span></p>',1414062955727),(48,'文章归类整理','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">已经写了些文章，这里作一个归类，作为一个目录（点击文章即可进入）：&nbsp;</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">JWS.Mono 系列：</span>&nbsp; &nbsp;&nbsp;</p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/14566814\" target=\"_blank\">《绿色版的Linux.NET&mdash;&mdash;&ldquo;Jws.Mono&rdquo;》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/14640014\" target=\"_blank\">《绿色版的Linux.NET&mdash;&mdash;&ldquo;Jws.Mono&rdquo;(续)》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/15059234\" target=\"_blank\">《jws.mono脚本安装详解》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/15204034\" target=\"_blank\">《激活jws.mono的图像处理》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/15276434\" target=\"_blank\">《JWS.Mono如何进行&ldquo;在线安装&rdquo;》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">Linux.NET学习手记 系列：</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/13389254\" target=\"_blank\">《Linux.NET学习手记（1）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6617682\" target=\"_blank\">《Linux.NET学习手记（2）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/10035973\" target=\"_blank\">《Linux.NET学习手记（3）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/3401051\" target=\"_blank\">《Linux.NET学习手记（4）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/23798667\" target=\"_blank\">《Linux.NET学习手记（5）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/3493331\" target=\"_blank\">《Linux.NET学习手记（6）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/7145682\" target=\"_blank\">《Linux.NET学习手记（7）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/14524864\" target=\"_blank\">《Linux.NET学习手记（8）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/29192068\" target=\"_blank\">《关于《Linux.NET学习手记（8）》的补充说明》</a></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">其他不成系列&ldquo;散文&rdquo;：</span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/27008827\" target=\"_blank\">《CentOS下如何搭建ISCSI以及Windows如何挂载ISCSI镜像》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/26626627\" target=\"_blank\">《如何给CentOS安装字体库》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/30304818\" target=\"_blank\">《到底应该选择那种Linux.NET的部署方式？》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/29572818\" target=\"_blank\">《如何安装并简单的使用OwinHost&mdash;&mdash;Katana》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/7075282\" target=\"_blank\">《如玫瑰一般的PHP与C#混合编程》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6969682\" target=\"_blank\">《警惕！高版本VS发布时预编译导致Mono中Razor找不到视图》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6934482\" target=\"_blank\">《用迭代实现无限级分类》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6938472\" target=\"_blank\">《如何让我们的PHP在Jexus中跑起来》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6903072\" target=\"_blank\">《Linux.NET实战手记&mdash;自己动手改泥鳅（下）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/6867672\" target=\"_blank\">《Linux.NET实战手记&mdash;自己动手改泥鳅（上）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/10425633\" target=\"_blank\">《Linux在Hyper-V中实现与Windows的宽带共享上网》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/23696427\" target=\"_blank\">《初识Entity Framework CodeFirst（3）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/23569027\" target=\"_blank\">《初识Entity Framework CodeFirst（2）》</a></span></p>\r\n<p><span style=\"font-size: 12pt; font-family: 宋体;\">&nbsp; &nbsp;&nbsp;<a href=\"/Home/Single/23441627\" target=\"_blank\">《初识Entity Framework CodeFirst（1）》</a></span></p>\r\n</body>\r\n</html>',1414769252458,1422660085658,294,6,'21',0,0,1,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 整理了下文章，作为一个目录存在。</span></p>',1414769252458),(49,'再探ASP.NET 5','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 就在最近一段时间，微软又有大动作了，在IDE方面除了给我们发布了Viausl Studio 2013 社区版还发布了全新的Visual Studio 2015 Preview。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Visual Studio 2015 Preview 除了给我们带了了C# 6.0的新语法、跨移动的开发以外，还给我们带来了ASP.NET5（也就是之前被称作下一代ASP.NET的ASP.NET vNext）。于是，本人也先睹为快的安装上了PreView版的Visual Studio 2015，再探这个万众期待的ASP.NET5。有读者可能会问到，为何用&lsquo;再&rsquo;这个字眼，之前是否已经有探索过？对的，早VisualStudio 2014 CTP的时代，不少对vNext（当时对ASP.NET5的称呼）抱有巨大兴趣的朋友就提前尝鲜，而那个时候也是本博客（jhonge.net）决定开始编码的阶段，迫切需要对Web进行选型，也就是那个时候对ASP.NET vNext进行了一番初探（不过这些都是题外话了）。我们还是马上进入本文讨论的主题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 本文中，我们将讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1、ASP.NET5(Web)中，各个目录以及文件的介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2、KRuntime的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 3、ASP.NET5与OWIN的关系</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、ASP.NET5中各个目录以及文件的介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; ASP.NET5主要提供了两种应用程序，其一就是ASP.NET5控制台程序，另外一个是ASP.NET Web&nbsp;应用程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141129164833240.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;我们选择新建一个Web应用程序，得到如下图所示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141130005704533.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 由于One ASP.NET战略的关系，从Visual Studio 2013（.NET FrameWork 4.5）开始，在ASP.NET&nbsp;Web Application中ASP.NET WebFrom与ASP.NET MVC/WebAPI已经合并为同一个的选项卡，用户在选择该选项卡创建新的Web应用程序之后再根据自身的需求选择想创建的站点类型，Visual Studio会根据用户的期望自动的引入相应的预设资源以及创建相应的预设目录。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 由图中，我们也可见前面的六项是&ldquo;经典&rdquo;的One ASP.NET项目，后面的两项则是我们本文中的主角&mdash;&mdash;ASP.NET5 Web应用程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对于ASP.NET 5 Web应用程序，它主要泛指ASP.NET5 MVC应用程序（也就是一些读者所称的MVC6），而我们所熟知的ASP.NET WebForm已经被剔除在ASP.NET5之中，这也意味着我们再也无法拖控件了，这点确实是有点遗憾，或许是WebForm与System.Web结合过紧亦或其他原因（专利技术？）从而导致它从ASP.NET5中被剔除（图中也显示我们无法勾选想创建的类型）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对于类库的使用，ASP.NET5使用了一种名为&ldquo;ASP.NET 5 Class Library&rdquo;的专用库，这种全新的专用库使用方式于之前的.NET普通类库还是有少少区别。这里也有一点值得各位读者非常注意的，那就是这种专用库与普通类库是互不兼容的，ASP.NET5也无法直接使用普通的类库，这点非常令人难堪，不过值得安慰的是，微软正在火速的对现有的类库进行ASP.NET5的转移，每周都有大批的专用库转换完成并上线。有兴趣的读者可以到<a href=\"https://www.myget.org/gallery/aspnetvnext\" target=\"_blank\">MyGet</a>（需要翻~@墙）进行查阅。对于一些私有库，我们则需要将原有的CS文件抽出来，然后重新添加进专用库中，重新发布（或许以后会有个批量自动转换工具）。发布后的库文件，我们需要对其进行重新的单元测试，确认无误后方可使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们先新建一个ASP.NET5 Start Web应用程序，创建后如下图所示（高分辨率大图，可以单独拖出来看）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141130014218667.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 可见Visual Studio自动默认的显示了一个ASP.NET5的欢迎页面，我们可以从上面得到一些关于ASP.NET5的有关消息，再看看右边的项目截图，如下图所示：</span></p>\r\n<p><img src=\"/Static/Images/14113002011675.jpg\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们可以看到，在ASP.NET5中，它划分了一个隶属于解决方案的Solution Item目录和一个src（顾名思义，源代码）的目录，Solution Item我们忽略不看，我们将目光投向其中的WebApplication，它是我们刚新建的项目，下面我们相对里面包含的目录以及关键的文件进行一番说明。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;wwwroot&rdquo;：一看这名字，或许许多人会认为这个是网站根目录的意思，其实不然，这个目录的作用并非字面意思，实际上这个目录的作用是放置静态文件的，样式文件放css，第三方的库文件放lib，自己创建的脚本文件放script（默认没有创建）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Dependence&rdquo;：依赖，这里就是字面意思了，严格来说，这个&ldquo;Dependence&rdquo;并非文件夹，而是Visual Studio将一些项目配置文件中的配置以可视化的方式将它们的配置（依赖或者打包等）显示出来，当然也可以进行可视化操作了（仅限可视化删除）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;References&rdquo;：这个只要是懂.NET的人都知道，显示您的程序用了啥程序集，在Project.json中进行配置（稍后介绍Project.js）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Controller&rdquo;：大名鼎鼎的MVC中的C字头。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Migrations&rdquo;：EntityFramework的数据迁移文件，一般由VisualStudio自动托管。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Models&rdquo;：MVC中的M字头。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Views&rdquo;：MVC中的V字头。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;bower.json&rdquo;：一个包管理器，作用就是自动把前端的包搞到本地。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;config.json&rdquo;：作用跟ASP.NET的WebConfig中的部分节点类似，作用就是将一些譬如链接字串、EntityFrameWork的配置、Log4Net等配置信息写到此处，并在Startup中将此文件读取并加入到ASP.NET5的环境中。除了有默认为json格式的配置外，ASP.NET5还支持另外配置方式&mdash;&mdash;XML，作用是一致的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;gruntfile.js&rdquo;：作用与MVC5以及5-的BundleConfig相同，也是通过配置将一堆的静态文件进行打包压缩，并通过一个Request把这些文件全部下载下来。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;package.json&rdquo;：在此（ASP.NET5）之前，&ldquo;package.json&rdquo;被用作一个程序集组件信息清单，在这个清单中记录着所有通过NuGet获得的组件以及它的版本信息，NuGet本身就是通过这个清单列表来维护它的组件。但在ASP.NET5中，项目所依赖的组件已经由package.json移到了project.json中，因此package.json的功能已经被削减。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Project_Readme.html&rdquo;：这个不解析了，一个&ldquo;ReadMe&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;project.json&rdquo;：刚才说到项目用到的组件清单已经移到该文件中，是的，而事实上，这个文件可以说是整套项目中最重要的文件之一。它包含了项目启动所需要的几乎所有基础配置，包括NuGet的组件清单、程序集的依赖、使用哪种Host方式，监听那个端口，以及一些中间件的配置等。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;Startup.cs&rdquo;：如果对Microsoft.OWIN有所了解的读者，那一定可以下意识的联想到这个文件是干嘛的，对的，ASP.NET5中&ldquo;Startup&rdquo;文件与基于Microsoft.OWIN的OWIN框架中的&ldquo;Startup&rdquo;文件的作用是相同的，但别误会了，ASP.NET5并不是基于Microsoft.OWIN打造的（在第三节会介绍），因此它们作用差不多，但不是同一个东西。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 目录组成已经文件的介绍大概就这么多，至于每个文件的详细介绍以及用法，由于文章篇幅关系以及官方暂未公布更多的资料，这里就不再作展开介绍了，有机会我再来跟各位读者进行展开的讨论学习。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、KRuntime的简单介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 关于KVM、KLR为何叫&lsquo;K&rsquo;，这个众说纷纭，有人说是K For Katana，也有人说K For Kool，当然也有人说K is the&nbsp;next J。不管怎么样，我们都无法知道为何叫做K，我们只知道这个K来源于Project K。至于Project K的内容，恐怕只有核心的Team成员才通晓。关于KVM最详细最权威的解析以及最新的发展介绍，各位读者可以到<a href=\"https://github.com/aspnet/Home/wiki/KRuntime-structure\" target=\"_blank\">GitHub/Wiki</a>中找到，这里我们仅对其作抛砖引玉。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 为了介绍这个新概念的东西，我们需要先上一张图：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/14113014532617.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 由图中我们可以知道，KRuntime大概分为这么三大层：以KHost方式存在的Layer0、作为KRuntime的Layer1-Layer3以及应用程序层Layer4。下面我们再介绍下每个Layer层的作用：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Layer0：Layer0层作为Host层，它提供了查找并调用CLR的功能，所有的请求将通过它来进行初步处理并对非静态请求推送到Layer1层，它的功能就跟IIS相当，而在ProjectK中，该层的实例就是KLR.exe。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Layer1：从Layer1层开始，请求正式进入到KRuntime的环节，Layer1层的工作内容是启动CLR，装载Coreclr.dll（这个玩意会在发布之后的/approot/packages/KRE-XXXXX/bin中可以找到，会自带的），提供Layer0层的CLR入口。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Layer2：Layer2层的名字叫做&lsquo;Managed Entry Point&rsquo;，中文翻译为&ldquo;入口点管理&rdquo;，根据官方的介绍，这层的是托管代码的第一层，它的作用是创建LoaderContainer并根据CLR的请求提供ILoader，ILoader负责根据名称来加载程序集。此外Layer2层还用于调用Layer3中程序的主入口点。<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Layer3：如果您已经把项目发布到硬盘当中，那么您发布的东西就是Layer3中的内容了，要激活您的发布（Layer3的内容），您需要提供发布的这个项目的项目名（ProjectName）作为项目的程序入口点（程序会自动寻找ProjectName.Startup），Layer2会根据给出的程序名（ProjectName）调用您的项目程序入口并根据项目的Project.json清单检查程序集是否完备，如果程序集不完备，它将自动的根据清单中的依赖关系，从NuGet、MyGet等源中自动解决依赖。同时，Layer2中会使用一个ILoader来自动加载项目的程序集组件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Layer4：顾名思义，就是加载到内存后正在运行的您的程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 以上就是关于KRuntime的简单介绍，我们的ASP.NET5就处于Layer3以及Layer4之中，运行我们的ASP.NET5，我们的底层需要KRuntime的支撑，因此要激活（启动）我们的ASP.NET5程序，最简单的方式就是使用ProjectK中所提供的K Command，通过命令行的方式来启动我们的ASP.NET5。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; K Command目前包含了三种类型的命令。一种是单纯的&lsquo;K&rsquo;，它是用于直接控制您的项目启动、关闭和构建（Build）；另外一种是&lsquo;KVM&rsquo;，它是管理您的KRE版本的，使用它我们可以列出本机中存在的KRE，也可以安装类型的KRE或者升级本机的KRE；最后一种就是&lsquo;KPM&rsquo;，它的作用是管理您的项目中一些程序集组件包，其中最直接的用法就是KPM Restore直接用NuGet等源下载Project.json中列有的相关组件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 不过即便K Command是如此的重要，但或许还是少有读者会直接接触它，原因就在于Visual Studio实在太贴心了。在Visual Studio 2015中发布项目时，IDE会通过图形化的界面让您选择合适的KRE版本，项目所需要用到的组件也统统的发布到&ldquo;/approot/packages&rdquo;中（KLR.exe也在里面），自动的帮我们解决了KRE和组件的完整性，在发布的根目录中，IDE还给我买你自动生成启动项目的批处理命令，我们只需要简单的双击即可启动我们的项目。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 但是随着时间的推移，KRE也会出现Mono版本，在非Windows中使用ASP.NET，那就没有这么方便了，我们需要老老实实的自己敲K Command，当然，本文也不是专门详解K Command的，希望能够获得更多关于K Command信息的读者，可以访问<a href=\"https://github.com/aspnet/Home/wiki/Version-Manager\" target=\"_blank\">Version Manager</a>、<a href=\"https://github.com/aspnet/Home/wiki/Package-Manager\" target=\"_blank\">Package Manager</a>来获取。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、ASP.NET5与OWIN的关系</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在Visual Studio 2015发布之前，ASP.NET5当时被称作vNext，vNext作为微软发布的&ldquo;下一代.NET&rdquo;一直备受关注，与此同时，微软发起了一个全新的介于WebServer与WebApplication的协议&ldquo;Open Web Interface for .NET&rdquo;也即时OWIN。vNext中一个很重要的特点就是不再限于Windows中运行，微软主动的把vNext往跨平台.NET方向走；而OWIN协议的出现也是为了解决WebApplication与IIS之间紧密耦合的关系（实际上我们还是可以Host到其他WebServer的，这里我们就不作研讨了），OWIN协议也很大程度上让我们的.NET WebApplication得到了跨平台的功能。因此一时之间，不少的&ldquo;同行&rdquo;都想当然并自动代入的将这两者直接联系了起来，关于&ldquo;OWIN即vNext&rdquo;这种类似的说法也如潮水一般铺天盖地而来。（What？您还不懂OWIN是啥，那赶紧补补，建议参考《<a href=\"/Home/Single/7145682\" target=\"_blank\">Linux.NET 学习手记7</a>》、《<a href=\"/Home/Single/14524864\">Linux.NET 学习手记8</a>》、《<a href=\"/Home/Single/29192068\" target=\"_blank\">关于&lt;Linux.NET学习手记（8）&gt;的补充说明</a>》以及<a href=\"http://owin.org/\" target=\"_blank\">OWIN&nbsp;Org</a>）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 但，OWIN真的就是vNext吗？我个人理解并不是的，OWIN是一个协议，它定义的内容是WebApplication与WebServer之间的通信协议，协议的核心内容也精简到只是一个单纯的OWIN字典，字典上面包含了一些比较原始的请求参数，只要支持并使用OWIN字典与WebApplication进行通信的WebServer我们便可以广义上认为这就是一个OWinHost（Katana、Jexus等），同样的只要兼容OWIN协议的框架我们也可以认为这是一个支持OWIN的框架（像NancyFX、SignalR、FubuMVC之类）。而vNext是什么？它是一个现成的构架，虽然它长得像其他的OWIN框架（准确来说是Microsoft.OWIN，都有Startup，并且都是通过Startup作为程序的入口点），但它的战略却与OWIN的提出是不同的，vNext的战略目标是云部署、云编译以及云优化，它是云战略的重要组成部分，当然跨平台也是它的其中之一的特点，但它并不是像OWIN一样为开放性解决WebServer与WebApplication之间的关系而提出。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 事实上，更具爆炸性的消息就是，vNext虽然也有Startup入口，并且也具有兼容Katana的功能，但它的中间件并非基于OWIN协议（OWIN 1.0）建立。关于这一点，在撰写本文的前两天时间中，大（Artech）所公布的一封与ASP.NET Team同证实了这个事实，以下是内容的节选：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/141201213232116.jpg\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对此我们的LexLi童鞋也跟我们比较详细的解析了Katana与vNext之间的关系（以下原文）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1.Katana是在vNext开始前就存在的OWIN实现，未必完全适合vNext的需要。<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2.vNext现在不基于Katana，但是兼容OWIN中间件。<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 3.vNext定义的接口还是和Katana相似的，容易迁移。<br /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 4.vNext完工的时候，OWIN标准也许也该升级了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 5.反正都是开源的开放的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 因此，我们现在已经可以很明确的得出了一个结论：&ldquo;OWIN是OWIN，vNext是vNext，它们两者并不是同一个东西&rdquo;。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 嗯，好的，在本文中，我们借助Visual Studio 2015 Preview，给读者们简单介绍了下ASP.NET5(vNext)以及KRuntime，同时也与读者们一同梳理了一下vNext与OWIN之间的关系。虽然本文努力保证知识的正确性，但仍然可能会存在知识点的错漏，望各位读者以微软官方发布的消息为准，如果发现文中有错误或者不足的，欢迎与我联系提出，本人感激不尽。此外，有兴趣的读者，（打个广告）也可以到QQ群：373470340 找到我或与其他大牛一同探讨跨平台的技术。</span></p>\r\n</body>\r\n</html>',1417278390650,1417600692151,2049,6,'7,8,10,22,23',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp;&nbsp;</span><span style=\"font-family: 宋体; font-size: 16px;\">就在最近一段时间，微软又有大动作了，在IDE方面除了给我们发布了Viausl Studio 2013 社区版还发布了全新的Visual Studio 2015 Preview。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 相信不少的读者也已经先睹为快的装上了预览版的Visual Studio并且已经尝鲜式的尝试这个被称作MVC6的ASP.NET5 Web应用程序。本文中，我们将带领各位读者走入ASP.NET5的世界，为各位读者列举ASP.NET5 Web Application的目录构架并解析每个目录以及里面的预设文件的作用。同时在本文的第二节，我们还是深入浅出的为大家介绍ASP.NET5的运行时KRuntime，让读者比较直观的掌握KRuntime的结构分层，初步的了解ASP.NET5的启动过程。在最后一节，本文阐述了ASP.NET5(vNext)与OWIN的关系，并通过引述一些资料，为论述提供了强有力的证据。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 希望读者们可以通过阅读本文，对ASP.NET5能够有一个比较全面的理解。</span></p>',1417278390650),(50,'让ASP.NET5在Jexus上飞呀飞','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;就在最近一段时间，&ldquo;Visual Studio 2015 CTP 5&rdquo;（以下简称CTP5）发布了，CTP5的发布不仅标志着新一代的VisualStudio正式发布又向前迈出了一步，还标志着距离ASP.NET5(vNext)的正式发布不远。跟随者CTP5，KRE也从Kre beta-1.0升级到了Kre beta-2.0。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 与众多.NET开发者一样，我们也一直在密切的关注ASP.NET5的发展，而作为领先的Linux.NET WebServer服务器更是如此，早在Kre beta-2.0发布前后，Jexus已经以&ldquo;内部&rdquo;的方式发布了相应的&ldquo;适配器（Adapter）&rdquo;，通过这些适配器，我们可以比较容易的在Linux上运行ASP.NET5的程序。相信在不久的将来，随着ASP.NET5的正式发布，正式版Jexus For ASP.NET5 Adapter也会在第一时间进行发布。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 言归正传，上回我们发布了<a href=\"/Home/Single2/1666\" target=\"_blank\">《再探ASP.NET5》</a>,对ASP.NET5的构架进行了初步的探讨，在本篇内容中，我们将正如标题所说的那样，我们将介绍如何在Linux.NET中部署ASP.NET5程序，相关的组件，可以到&ldquo;OWIN群（Q群号：373470340）&rdquo;或者本文Demo（<a href=\"/down6load/1422739208371/JexusForASP.NET5.7z\" target=\"_blank\">点击这里进行下载</a>）中获得。本文的操作是基于ASP.NET5 Beta1/2进行操作，如若ASP.NET5正式版有巨大改动，请以正式版为准。本实验对网络环境要求较高，请各位读者确保机器网络环境通畅且没有被任何物质阻挡。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 正式进入主题，本节中我们将介绍：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 1、搭建ASP.NET5运行环境</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 2、如何向Linux.NET部署ASP.NET5程序</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 3、Jexus Host ASP.NET5的技术内幕</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 本文demo，各位读者可以点击这里进行下载。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp;一、搭建ASP.NET5运行环境</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;所谓工欲善其事必先利其器，需要运行ASP.NET5程序，必须先要有ASP.NET5的运行环境。ASP.NET5的运行环境除了要有常规的Linux.NET运行环境外，还额外需要一个KRuntime的环境。关于常规环境这一块这里就不作细说，不懂的读者可以翻阅《Linux.NET学习手记（1）》进行搭建，注意：这里的Mono版本需求为3.4.1以上，当前最新版本为3.12，各位读者可以到官网下载并编译安装，也可以更简便直接的使用JWS.OWIN进行常规环境的快速搭建。</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 首先，我们要逐条执行以下语句给Linux安装相关证书：</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;certmgr -ssl -m https:<span class=\"hljs-comment\">//go.microsoft.com</span></span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;certmgr -ssl -m <a href=\"https://nugetgallery.blob.core.windows.net\">https://nugetgallery.blob.core.windows.net</a></span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp; certmgr -ssl -m <a href=\"https://nuget.org\">https://nuget.org</a></span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp; certmgr -ssl -m <a href=\"https://www.myget.org\">https://www.myget.org</a></span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 每条语句执行之后都会询问是否安装，输入几次的&ldquo;yes&rdquo;并回车确认即可。然后再执行以下语句让证书马上生效。</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp; mozroots --import --sync</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 执行以下语句进行KRuntime的安装：</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;curl -sSL https://raw.githubusercontent.com/aspnet/Home/master/kvminstall.sh | sh &amp;&amp; source ~/.kre/kvm/kvm.sh<br /></span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 安装完成之后可以执行&ldquo;kvm llist&rdquo;列出已经安装了的KRE版本。</span></p>\r\n<p><span style=\"font-size: 12pt;\"><img src=\"/Static/Images/15013116072461.jpg\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 如果显示的不是beta2版本，而是beta1版本，各位读者可以通过执行&rdquo;kvm upgrade&ldquo;进行升级。</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 至此，我们就拥有了一个供ASP.NET5的运行环境。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 二、如何部署ASP.NET5程序到Linux.NET中</span></p>\r\n<p><span style=\"font-size: 12pt;\">&nbsp; &nbsp; 首先，我们需要创建一个ASP.NET5的程序，用VS15PrewView或者CTP5随你喜欢，并写上简单的代码确保能够运行。</span></p>\r\n<p><span style=\"font-size: 12pt;\"><img src=\"/Static/Images/150131165806959.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后发布到本地目录。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150131170201301.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对ASP.NET5有所了解的读者对这玩意绝对不陌生，我们等下需要部署里面的东西。镜头先转到Linux中，我们进行Linux的配置。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们先对Jexus中的SiteConfig进行配置，配置好相关的端口、地址，并添加\"OwinMain=Jws.OwinAdapter.Next.dll,Jws.OwinAdapter.Next.Adapter\"这行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150131170657137.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 把刚才发布的项目中的源码路径（/approot/src/Demo1）中的内容全部上传到Linux.NET的网站根目录中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 把webroot中的静态资源也上传到根目录中（bin/和web.config就不要了）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在根目录创建一个bin文件夹，并把Jexus的ASP.NET5适配器上传到bin目录中（&ldquo;Jws.OwinAdapter.Next.dll&rdquo;和&ldquo;k.config&rdquo;）.</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 得到的效果入下图所示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150131171609508.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 接下来就是重头戏了，使用vi打开&ldquo;project.json&rdquo;：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 除了&ldquo;dependencies&rdquo;节点其他的全部删除，&ldquo;dependencies&rdquo;里面的内容也清空。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 在&ldquo;dependencies&rdquo;节点中添加&ldquo;\"Microsoft.AspNet.Mvc\": \"6.0.0-*\"&rdquo;。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 完成后效果如下图：</span></p>\r\n<p><img src=\"/Static/Images/150131174348252.jpg\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;保存退出。最后在根目录执行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; kpm restore</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;ASP.NET5会自动的到所有的NuGetServer下载并解决相关依赖，类似于Yum（对网络要求高）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;执行完成之后，启动Jexus即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150131172718603.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;访问我们的页面，页面被成功的访问了。</span></p>\r\n<p><img src=\"/Static/Images/150131174456719.jpg\" alt=\"\" /></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、Adapter技术内幕</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 通过上述操作，我们的ASP.NET5已经成功的在Jexus上跑起，相信不少读者也已经发现，在Jexus上运行ASP.NET5跟在VS中发布的默认方式是有所不同的，使用Jexus的方式与当前的ASP.NET MVC 1-5更接近。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150131193047854.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Jexus和ASP.NET5的&ldquo;通讯&rdquo;方式正如上图所示。而事实上，通过一些的项目证实Jexus已经作为成熟的工业级WebServer，它已经和MSOWIN相关框架达至无缝连接的水平，使用Jexus的&ldquo;OWIN模式&rdquo;输出的是标准的OWIN字典，而ASP.NET5虽然与OWIN长得类似，但两者是截然不同的东西。适配器的作用就是把OWIN Environment中的数据包装成能直接提供ASP.NET5使用的模式以便于ASP.NET5 Application的正常运行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 此外，这里还有一些技术内幕。其一就是在Jexus中使用ASP.NET5是无需使用静态组件的（StaticFile组件），Jexus充分发挥自身强大的静态处理能力等优势（静态资源的吞吐能力、安全性、并发处理能力、心跳检测等）将尽量多的静态请求放入到自身进行处理，一些静态资源譬如图片、音频、小文件之类的Jexus是不会再调用Kre使用ASP.NET5框架进行处理，也无需再走ASP.NET5的Pipe。这大幅度的不仅大幅度的提升了网站的效率，同时也弥补了直接使用ASP.NET5 SelfHost所带来的众多短板（不间断运行、多线程、安全性等）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 还有一点内幕，那就是Jexus对ASP.NET5的激活方式。相信各位读者也知道，ASP.NET5的类库采用了独特的ASP.NET5 Library，目前它是与现有的程序集是互不兼容的，也暂时没有比较好的方式去处理新旧类库的关系，而Jexus对ASP.NET5的激活方式或许能够给出一条解决的道路。Adapter是通过Assembly.Load的方式激活其内嵌的DLL，继而激活并与ASP.NET5的程序进行通讯，Jexus自身成为了ASP.NET5Library与程序集之间的&ldquo;中转站&rdquo;，因而Jexus既使用了ASP.NET5的类库又最大限度的保障了普通类库的兼容，真正做到鱼与熊掌兼得。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;好的，本节内容就到这里，有疑问或建议的读者可以到OWIN群里与我或其他大牛取得联系。需要OWIN/Jws.Mono技术支援的也可以到此群。感谢宇内大大对本篇进行技术校对，以及群里朋友借来的国外服务器。谢谢~！</span></p>\r\n</body>\r\n</html>',1422717234213,1422746503107,979,6,'7,8,11,23,22',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 就在最近一段时间，&ldquo;Visual Studio 2015 CTP 5&rdquo;（以下简称CTP5）发布了，CTP5的发布不仅标志着新一代的VisualStudio正式发布又向前迈出了一步，还标志着距离ASP.NET5(vNext)的正式发布不远。跟随者CTP5，KRE也从Kre beta-1.0升级到了Kre beta-2.0。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 与众多.NET开发者一样，我们也一直在密切的关注ASP.NET5的发展，而作为领先的Linux.NET WebServer服务器更是如此，早在Kre beta-2.0发布前后，Jexus已经以&ldquo;内部&rdquo;的方式发布了相应的&ldquo;适配器（Adapter）&rdquo;，通过这些适配器，我们可以比较容易的在Linux上运行ASP.NET5的程序。相信在不久的将来，随着ASP.NET5的正式发布，正式版Jexus For ASP.NET5 Adapter也会在第一时间进行发布。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 本节内容，我们将对ASP.NET5如何在Jexus中运行进行介绍。让读者能够快速的知道如何在Linux.NET中部署ASP.NET5应用程序。</span></p>',1422717234213),(51,'初识PDF.NET','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最初听见PDF.NET这个名字的时候，我相信百分之九十九的读者都会认为它是一个.NET版的操作PDF组件，是的，我当初听到这个名字的时候也一样。但这玩意(PDF.NET)可不是一个操作PDF的组件，它的全称是\"PWMIS Data Develop Framework\"，它是一个用于数据操作的组件，也就是一款ORM。<span style=\"text-decoration: line-through;\">(为啥不叫PDDF.NET呢？)</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 正如它的作者在《<a href=\"http://www.cnblogs.com/bluedoctor/p/3378683.html\" target=\"_blank\"><span style=\"color: #0000ff;\">成熟的ORM性能不是瓶颈，灵活性不是问题&hellip;&hellip;</span></a>》中所说描述的一样，ORM中有三大火枪手&mdash;&mdash;Reflection、Emit、Expression，反射自然就不用说了，它对性能的损耗相信各位读者心里大概也有个数，目前一些如PetaPoco、Dapper等轻量ORM框架主要采用Emit技术，而重型的如EntityFramework则采用表达式即编译器的方式通过构建表达式树来进行加速。而PDF.NET则与这三种，PDF.NET采用的是一种无反射技术，是技巧性的方式，关于这种技巧，这属于进阶的内容，在本篇中就不作介绍，有兴趣的读者可以翻看源码以及作者深蓝医生的博客内容。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 此外，PDF.NET是一款Mono下可用的ORM框架，它的官方网站是\"<a href=\"http://www.pwmis.com/sqlmap/&quot;。\">http://www.pwmis.com/sqlmap/</a>\"，在本篇内容中，我们主要介绍它的简单使用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 正式进入到本文主题，本文中我们将介绍：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1、前提准备以及无反射技术介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2、什么是OQL以及OQL的使用方式</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 3、DBFirst模式的使用</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、前提准备</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;工欲善其事必先利其器&rdquo;，与其他任何第三方的框架、组件一样，要使用PDF.NET我们需要先获得它的组件包。它的相关资源可从Nuget中获取（名字为：\"PDF.NET</span>\"）<span style=\"font-family: 宋体; font-size: 12pt;\">，源代码可从\"<a href=\"http://pwmis.codeplex.com/\">http://pwmis.codeplex.com/</a>\"中获得。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 拿到组件包之后，我们先在数据库中建立一个新的测试库和相关的表，PDF.NET目前支持包括\"SQLServer\"、\"MySQL\"、\"Oracle\"、\"SQLite\"、\"PostgreSQL\"等多种的数据库，在本文中，我们就地采用了SQLServer来做展示。就建立一个表(Person表)，且表结构如下图所展示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150302101654808.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后我们在WebConfig中配置好我们的ConnectionString字串:</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_5ff42c76-4c64-4f0f-b62e-f1902d38e7c6\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">Web.Config</span> <img id=\"code_img_opened_5ff42c76-4c64-4f0f-b62e-f1902d38e7c6\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_5ff42c76-4c64-4f0f-b62e-f1902d38e7c6\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #0000ff;\">&lt;?</span><span style=\"color: #ff00ff;\">xml version=\"1.0\" encoding=\"utf-8\"</span><span style=\"color: #0000ff;\">?&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">add </span><span style=\"color: #ff0000;\">name</span><span style=\"color: #0000ff;\">=\"connstr\"</span><span style=\"color: #ff0000;\"> connectionString </span><span style=\"color: #0000ff;\">=\"Data Source=.;Initial Catalog=pdf;Integrated Security=True\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">connectionStrings</span><span style=\"color: #0000ff;\">&gt;</span>\r\n\r\n  <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n    <span style=\"color: #0000ff;\">&lt;</span><span style=\"color: #800000;\">compilation </span><span style=\"color: #ff0000;\">debug</span><span style=\"color: #0000ff;\">=\"true\"</span><span style=\"color: #ff0000;\"> targetFramework</span><span style=\"color: #0000ff;\">=\"4.0\"</span> <span style=\"color: #0000ff;\">/&gt;</span>\r\n  <span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">system.web</span><span style=\"color: #0000ff;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">&lt;/</span><span style=\"color: #800000;\">configuration</span><span style=\"color: #0000ff;\">&gt;</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_5ff42c76-4c64-4f0f-b62e-f1902d38e7c6\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\r\n\r\n&lt;configuration&gt;\r\n  &lt;connectionStrings&gt;\r\n    &lt;add name=\"connstr\" connectionString =\"Data Source=.;Initial Catalog=pdf;Integrated Security=True\" /&gt;\r\n  &lt;/connectionStrings&gt;\r\n\r\n  &lt;system.web&gt;\r\n    &lt;compilation debug=\"true\" targetFramework=\"4.0\" /&gt;\r\n  &lt;/system.web&gt;\r\n&lt;/configuration&gt;</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 并定义好我们的实体：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> WebApplication1.Model\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> PWMIS.DataMap.Entity;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Person : EntityBase\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> Person()\r\n        {\r\n            TableName </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Person</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n            IdentityName </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n            PrimaryKeys.Add(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ID\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\"> { setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value); }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Name\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">\r\n            {\r\n                setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value);\r\n            }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> Sex\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sex</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">\r\n            {\r\n                setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sex</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value);\r\n            }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> Age\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\">\r\n            {\r\n                setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Age</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value);\r\n            }\r\n        }\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 正如读者们所看到的那样，数据库表名、主键等基础信息是在实体构造函数中进行配置，还有一个值得关注的地方，那就是字段的Get、Set属性，它这里需要进行修改，不过各位读者不用为此担心，在PDF.NET的组件包(源码)中，已经有相应的代码生成器，只需配置使用便可duang~duang~duang~的生成一大堆的实体。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 至此，我们的准备工作已经做好了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、关于OQL的介绍以及使用</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; OQL又是啥？OQL是PDF.NET的使用语法，它是一种&ldquo;链式&rdquo;的表达式，与我们常见的算术表达式语法非常像，读者们几乎不用任何的学习代价就学会了使用</span></p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>&nbsp;</p>\r\n</body>\r\n</html>',1425290132877,1425295867524,0,6,'',0,0,0,'<p>是gas的</p>',1425290132877),(52,'PDF.NET最初等入门','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 提起PDF.NET，相信不少第一次听见这个名字或者没有了解过这套框架的读者都会认为这必然是一套与PDF操作相关的框架组件，以正常的思维，您根本无法想象到这竟然是一套数据库操作框架。PDF.NET的全称是\"PWMIS Data Develop Framework\"，它是由&ldquo;<a href=\"http://www.cnblogs.com/bluedoctor/\" target=\"_blank\"><span style=\"color: #0000ff;\">深蓝医生</span></a>&rdquo;开发的一套数据库操作框架，致力于提供\"代码的精简，开发、维护的简单与追求极致的运行效率\"的开发方式，其官方网站为:\"http://www.pwmis.com/sqlmap/\"，目前这套框架已经全面开源，代码托管为：\"<a href=\"http://pwmis.codeplex.com/&quot;。\">http://pwmis.codeplex.com/\"。</a></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 虽然PDF.NET诞生已久，到现在也有五六个年头，也正如众多开源项目/框架一样，PDF.NET的知名度没有Dapper、PetaPoco之流的轻型ORM有名，更没有作为微软官方推荐的Entity FrameWork知名。因此，除了其作者的博客，鲜有关于它的文章以及介绍（当然，这更与我们绝大多数人只想着索取不考虑贡献的思维有关了），这对于初学者来说并不是好事，由于资料的缺乏（或是写作不合口味）造成了上手困难，失去对框架的信心。因此，本篇也正如题目所说的那样，希望通过介绍PDF.NET最初等的功能，以一种愉快的方式带领希望使用此框架&ldquo;干点什么&rdquo;的读者入门。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 废话不多说，正式进入到本文的环节，在本文中，我们将讲解：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1、如何下载和获得相关组件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2、实体模型的写法以及注意事项。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 3、OQL是什么？怎么用？需要注意些什么？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 相关Demo，可以<a href=\"/down8load/1425513226419/pdf.net.7z\" target=\"_blank\"><span style=\"color: #0000ff;\">点击这里</span></a>下载。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、如何获得相关组件</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &ldquo;巧妇难为无米之炊&rdquo;，要使用PDF.NET开发程序，我们必须先获得该组件。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;获取相关组件的方式有以下几种：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、通过访问CodePlex代码托管网站获取源码来编译。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、通过NuGet可视化界面获取（由&ldquo;独行族妖侠&rdquo;&mdash;&mdash;玄离 上传）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150304223804794.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp; &nbsp;（3）、可以通过程序包控制台执行：&ldquo;Install-Package PDF.NET&rdquo;获得（还是楼上这位里世界的朋友上传）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150304223928691.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;至此，我们也就获得了PDF.NET相关组件了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、实体模型的写法以及注意事项</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 实体模型（Entity）可谓是所有ORM必有的东西了，PDF.NET也不例外，但由于PDF.NET采用的是一种&ldquo;无反射&rdquo;的实体映射模式，因此它的实体写法也与其他基于Emit和ExpressionTree有一定的区别，我们还是先上一个Demo再作分析。</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> MvcApplication1.Models\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> PWMIS.DataMap.Entity;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Person : EntityBase\r\n    {\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> Person()\r\n        {\r\n            TableName </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Person</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n            PrimaryKeys.Add(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n            IdentityName </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> ID\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\"> { setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ID</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value); }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Name\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\"> { setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Name</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value); }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Voice\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Voice</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\"> { setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Voice</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value); }\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> Sex\r\n        {\r\n            </span><span style=\"color: #0000ff;\">get</span><span style=\"color: #000000;\"> { </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> getProperty</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sex</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">); }\r\n            </span><span style=\"color: #0000ff;\">set</span><span style=\"color: #000000;\"> { setProperty(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">Sex</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, value); }\r\n        }\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 由代码中我们也可以看出以下两个值得关注的地方：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （1）、表名、主键、自增等配置需要在构造函数中设置。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （2）、属性的Get、Set属性需要使用getProPerty、setProperty方法来进行取值和设置，不能单纯的定义get、set。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这种特殊的写法，也与它的&ldquo;无反射&rdquo;有关，代码用没有一处是使用到Attribute，属性的获取/设置值也不采用GetValue、SetValue或更高级的反射相关技术来实现，当然咯，具体实现各位读者有兴趣的话可以参阅源代码，只是想单纯使用的话可以不用理会。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、OQL是什么？怎么用？注意什么？</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 正如EntityFrameWork有ESQL、NHibernate有HSQL一样，PDF.NET也有其自身的表达式，那便是OQL。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 同样的多说无谓，我们直接上一个Demo代码并根据代码来讲解：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> MvcApplication1.Data\r\n{\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> Models;\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> PWMIS.DataMap.Entity;\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> PWMIS.DataProvider.Data;\r\n    </span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Collections.Generic;\r\n\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> PersonData\r\n    {\r\n        </span><span style=\"color: #0000ff;\">private</span><span style=\"color: #000000;\"> AdoHelper GetAdoHelper()\r\n        {\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> AdoHelper.CreateHelper(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">myConn</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span><span style=\"color: #000000;\"> IList</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> GetPersonList(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> name, </span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> sex)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> model </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Person();\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> oql </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> OQL.From(model).Select(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">*</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">).Where(x </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> cmp </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> x.Property(model.ID) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #000000;\">-</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">;\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">false</span> <span style=\"color: #000000;\">==</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">.IsNullOrWhiteSpace(name)) \r\n                    cmp </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> cmp </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\"> x.Property(model.Name) </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> name;\r\n                </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">false</span> <span style=\"color: #000000;\">==</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">.IsNullOrWhiteSpace(sex)) \r\n                    cmp </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> cmp </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\"> x.Property(model.Sex) </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> sex;\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> cmp;\r\n            }).END;\r\n\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> EntityQuery</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.QueryList(oql, </span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.GetAdoHelper());\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> DeleteByID(</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> id)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> model </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> Person() { };\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> oql </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> OQL.From(model).Delete().Where(x </span><span style=\"color: #000000;\">=&gt;</span><span style=\"color: #000000;\">\r\n            {\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> x.Property(model.ID) </span><span style=\"color: #000000;\">==</span><span style=\"color: #000000;\"> id;\r\n            }).END;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> EntityQuery</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.ExecuteOql(oql, </span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.GetAdoHelper()) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n        }\r\n\r\n        </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">bool</span><span style=\"color: #000000;\"> Update(Person model)\r\n        {\r\n            </span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> oql </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> OQL.From(model).Update(model.Name, model.Sex, model.Voice).END;\r\n            </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> EntityQuery</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">Person</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">.ExecuteOql(oql, </span><span style=\"color: #0000ff;\">this</span><span style=\"color: #000000;\">.GetAdoHelper()) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;\r\n        }\r\n    }\r\n}</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 绝大部分的操作各位读者都可以通过读者直接得出答案，这里有以下几个需要重点讲解的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （1）、使用OQL之前需要先实例化一个类，并以这个类来传入改类中构造函数所的相关配置等信息。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （2）、OQL的Where条件，事实上，我们经常会接触到根据上下文来动态的决定条件的个数并进行Where条件的动态拼装，OQL这里提供的动态拼接方式是使用一个委托的方式来实现（匿不匿名随意）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （3）、细心的读者还会发现我在\"GetPersonList\"的匿名委托中做了个\"ID&gt;-1\"这种\"1=1\"的事情，这是一个故意的步骤，由于OQLCompare（也就是那个Where匿名委托的类型）做了\"&amp;\"操作符重载，每次执行\"&amp;\"操作的时候都是产生新的对象（类似与Struct），而有趣的是PDF.NET对OQLCompare有跟踪功能，如果实例化cmp的时候直接new出一个对象，到return的时候PDF.NET将会抛出Exception。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （4）、如果Web.Config中。ConnectionString只有一个链接字串，则PDF.NET是默认采用此链接方式，代码中也可以省略\"GetAdoHelper\"，直接使用ExecuteOql、QuerList等重载来执行，我在此使用了显式的方式指明ADOHelper目的就是为了万一有多个数据集链接字串的情况。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 大概就这么多了，更多的还请读者自行根据实际情况进行相应的处理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最后的结果，我给个有趣的图出来大家瞅瞅。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150304234309437.jpg\" alt=\"\" />&nbsp;</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; PDF.NET的操作风格或许与各位读者使用的ORM有较大区别，不少地方还似乎不是特别顺手，但是由于PDF.NET已经全面开源，各位读者也可以自由的参与到其中进行开发，把不喜欢的地方改掉，把不顺手的使用方式也改掉，把喜欢的特性加进去，一切都处决于您的想法。</span></p>\r\n</body>\r\n</html>',1425508783989,1425546015361,564,6,'24',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 提起PDF.NET，相信不少第一次听见这个名字或者没有了解过这套框架的读者都会认为这必然是一套与PDF操作相关的框架组件，以正常的思维，您根本无法想象到这竟然是一套数据库操作框架。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 虽然PDF.NET诞生已久，相关资料仍然处于较为缺乏的状态，现有资料写作思维也比较凌乱，往往让读者阅读之后丈二和尚摸不着头脑，因此，本篇讲讲解PDF.NET的最简单操作，希望借此带领希望使用此框架的读者能够容易的、愉快的入门。</span></p>',1425508783989),(53,'使用C#给Linux写Shell脚本','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;在这个逼格决定人格，鄙视链盛行的年头，尤其是咱们IT界，请问您今天鄙视与被鄙视的次数分别是多少？如果手中没有一点压箱的本事，那就只有看的份了。今天我们也要提升下自己的格调，学习些脑洞大开的东西，学完之后跑去群子了威吓其他群友，不就是个玩嘛，走着~~！</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/15030922164333.gif\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 说起Linux中的脚本，毋庸置疑，用得最多的肯定是Shell脚本，其他的还有Python、Ruby等，估计根本没有人会想到其实C#也可以。说起C#，那可是尚方宝剑版存在，它上可写操作系统（<a href=\"http://www.gocosmos.org/\" target=\"_blank\"><span style=\"color: #000080;\">CosmosOS</span></a>、<a href=\"http://www.oschina.net/p/sharpos\" target=\"_blank\"><span style=\"color: #000080;\">SharpOS</span></a>等）下可写应用系统，桌面程序、网站程序、嵌入式程序、其他程序一网打尽，写脚本？自然也是顺利成章的事情了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 好的，还是进入到本文的正式环境，本文中，我们将介绍：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （1）、C# Shell的简介。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （2）、编写我们第一个C# Shell脚本。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （3）、如何引入程序集。</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;一、C# Shell的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Shell，中文意为&ldquo;壳&rdquo;，它是一个提供用户与操作系统内核之间通讯的翻译器，常见的有有图形Shell和命令行Shell，它也是我们除安装操作系统外Linux首先学习的重点，我敢保证，所有的有使用过Linux的读者都会知道它。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; C# Shell，也正如它的名称一样，它是一个Shell，所使用的命令行语言为C#。而事实上，它的原型是Mono项目中Tool中所提供的一个工具，它的本名为&ldquo;C#REPL&rdquo;，因此想要使用它，我们的Linux中必须已经安装了Mono，也即是有Linux.NET的环境。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 关于Linux.NET的环境搭建，我不想老生常谈，仍然不懂的读者，请移步到<a href=\"/Home/Single2/748\" target=\"_blank\"><span style=\"color: #0000ff;\">《Linux.NET 学习手记》</span></a>系列中。所有已经搭建好Linux.NET环境的机器中，都可以通过执行命令&ldquo;/bin/env csharp&rdquo;执行C# Shell命令解析器。系统控制台这时会进入到C# Shell终端（有点像Telnet连接的样子）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309095148392.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后我们就可以在里面键入各种各样的命令，想要退出的时候执行&ldquo;quit&rdquo;即可退出回到Linux命令终端。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、编写第一个C# Shell脚本</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对于平时有些Linux Shell的读者来说，经过上一节的介绍，大概也已经知道这是怎么回事了。对于不懂Shell的读者，也不要紧，我们本节就是教大家如何编写一个C# Shell。先给各位展示一下一个&ldquo;标准&rdquo;的Shell是什么格式的。</span></p>\r\n<p><img src=\"/Static/Images/150309210540706.jpg\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;这里是一个常见的Bash Shell脚本，作用就是输出十遍的&ldquo;小蝶惊鸿大法好&rdquo;。一个普通的Linux Shell脚本由主要由两个部分所构成，第一就是它的解析器声明，也就是头部的第一行，它用来指明这个脚本是使用哪一款的Shell解析器进行解析。由于不同的Shell解析器之间各自有自己的Shell命令行，因此让计算机能够选择出正确的Shell解析器非常重要。另外就是Shel脚本的主程序体，由于Shell脚本是通过解析器执行，因此它的执行方式是从本文第一行开始解析执行，并按照文本的行来逐行解析执行，因此原则上我们是可以像&ldquo;流水账&rdquo;一样写程序（不考虑可维护性的话）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 下面我们也按照这种&ldquo;标准格式&rdquo;也写一个C# Shell。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 首先我们先新建一个文件，后缀名什么的无所谓了，Linux中是没有后缀名的这个概念的，然后打开并填写上解析器的位置，也即是第一行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309223423879.jpg\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后我们就可以在里面跟平时用C#一样写上我们的代码了（中文注意编码）</span><span style=\"font-size: 12pt;\"><span style=\"font-family: 宋体;\">。</span></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309235824483.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-size: 12pt;\"><span style=\"font-family: 宋体;\">&nbsp; &nbsp; 保存后，在Linux添加执行权限，然后运行它（本脚本文件名字为demo.cs）。</span></span></p>\r\n<p><span style=\"font-size: 12pt;\"><span style=\"font-family: 宋体;\"><img src=\"/Static/Images/150310002209661.jpg\" alt=\"\" /></span></span></p>\r\n<p><span style=\"font-size: 12pt;\"><span style=\"font-family: 宋体;\">&nbsp; &nbsp; 酱酱~！有趣的事情发生了。</span></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、如何引入程序集</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 现在我们已经证明了C# Shell脚本的可行性，也让各位读者简单学习了如何编写C# Shell脚本，已经具备了初步的使用价值，但由于解析器默认指挥引入&ldquo;System&rdquo;里面的东西，因此暂时只能做一些很简单的东西。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309234311361.jpg\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 与其他&ldquo;单薄&rdquo;的语言不同，C#拥有极其丰富而强大的类库，它们才是C#中的大部队，在各个时刻各种场合中，我们都需要使用到它们。现在就让我们来学习如何调用它们。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在Linux.NET中，程序集主要来自于两个地方，Mono自带的基础库以及我们手动引入的第三方类库，对于它们，我们都会分别进行讲解。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 先讲解基础库，Mono自带的基础库可在Mono编译安装的目录中找到它们，想要引用它们，我们只需直接在脚本中使用&ldquo;Using 命名空间&rdquo;即可加入它们，其效果如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309234357368.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 程序集能够自动被引入并正常使用。而对于第三方类库，由于它并没有默认加入到引用中，因此 &nbsp;我们需要手动的将这个程序集Load进来。要Load第三方程序也比较容易，只需使用&ldquo;LoadAssembly（\"程序集的物理位置【不要dll后缀】\"）&rdquo;然后再使用&ldquo;Using 命名空间&rdquo;的方式即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150309235538208.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; Clear，又可以继续玩了。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;好的，本篇内容又差不多了，写本文的目的仅仅是提供Shell脚本的多一重选择，并不是要取代Bash、Python之类的经典，各位读者可以在自己的机器上玩玩。有疑问的读者或者对Linux.NET感兴趣的读者可以关注我微博或者到&ldquo;OWIN【Open Web Interface for .NET】）群&rdquo;联系我（Q群号：373470340）。噢，对了，还有关于C# Shell与Bash Shell互调的问题，我还没有找到好的方法，各位读者有啥灵感的也可以联系我，谢谢。</span></p>\r\n</body>\r\n</html>',1425834895681,1425977307009,872,6,'7,8,9,10,25,26',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; Shell，中文意为&ldquo;壳&rdquo;，它是一个提供用户与操作系统内核之间通讯的翻译器，常见的有有图形Shell和命令行Shell，它也是我们除安装操作系统外Linux首先学习的重点，我敢保证，所有的有使用过Linux的读者都会知道它。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 说起Linux中的脚本，毋庸置疑，用得最多的肯定是Shell脚本，其他的还有Python、Ruby等，估计根本没有人会想到其实C#也可以。说起C#，那可是尚方宝剑版存在，它上可写操作系统（</span><a style=\"font-family: 宋体; font-size: 16px;\" href=\"http://www.gocosmos.org/\" target=\"_blank\"><span style=\"color: #000080;\">CosmosOS</span></a><span style=\"font-family: 宋体; font-size: 16px;\">、</span><a style=\"font-family: 宋体; font-size: 16px;\" href=\"http://www.oschina.net/p/sharpos\" target=\"_blank\"><span style=\"color: #000080;\">SharpOS</span></a><span style=\"font-family: 宋体; font-size: 16px;\">等）下可写应用系统，桌面程序、网站程序、嵌入式程序、其他程序一网打尽，写脚本？自然也是顺利成章的事情了。</span></p>',1425946850895),(54,'如何让C为C#提供函数','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;C#作为一门优秀的语言，其功能可谓居家旅行杀人放火必备的凶残语言，他有多强我也懒得介绍了，反正用过的都知道。但也有时候，我们需要某种特殊的功能，或许C#并没有提供，也或许出于某种保密性的需求，我们无法直接使用C#语言进行撰写，这就需要我们采用C#/Else Language混合编程，而本节内容中，我们将就如何让C为C#提供函数调用进行讲解。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 本节内容中，我们将探讨：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、写一个最简单的C函数并编译成库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、在C#中通过dllimport引入并调用C的库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、进一步研究两者之间的参数传递</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 一、写一个最简单的C函数并编译成动态库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯，直入正题，我们先用GVIM写一个很简单的C函数：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426012351371.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后用GCC对它进行编译（注意：这里是使用Windows中的GCC，采用MinGW安装，如有不懂如何使用的读者，可以移步到《<a href=\"/Home/Single2/1870\" target=\"_blank\">如何安装使用MinGW</a>》进行学习）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426012835811.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后就出现了一个编译好的库，我们C这边的工作就基本完成了。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 二、如何通过Dllimport引入C写的库</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 如何引入一个非C#的库，通常的方法就是采用DllImport，通过P/Invoke机制进行引入。当然在Mono上除了使用Dllimport外，还有另外的方式引入，这里我们不作任何探讨。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们新建一个控制台程序，然后写上我们的程序：</span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> demo2\r\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #000000;\">{\r\n</span><span style=\"color: #008080;\"> 3</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n</span><span style=\"color: #008080;\"> 4</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\"> 5</span>         <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n</span><span style=\"color: #008080;\"> 6</span> <span style=\"color: #000000;\">        {\r\n</span><span style=\"color: #008080;\"> 7</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> cLib </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> CLib();\r\n</span><span style=\"color: #008080;\"> 8</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> p </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> CLib.SayHello();\r\n</span><span style=\"color: #008080;\"> 9</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> str </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Marshal.PtrToStringAuto(p);\r\n</span><span style=\"color: #008080;\">10</span> <span style=\"color: #000000;\">            Console.WriteLine(str);\r\n</span><span style=\"color: #008080;\">11</span> <span style=\"color: #000000;\">            Console.ReadKey();\r\n</span><span style=\"color: #008080;\">12</span> <span style=\"color: #000000;\">        }\r\n</span><span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">14</span> \r\n<span style=\"color: #008080;\">15</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CLib\r\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">        [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你的so文件路径/demo1.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n</span><span style=\"color: #008080;\">18</span>         <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> IntPtr SayHello();\r\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">}</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 按下F6编译之后，我们在运行编译好的exe文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/15042601520836.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 瞧，成功调用了C的函数了，SO Easy，这里要注意一点的，也是很多童鞋经常会犯的错误，那就是我们需要找到控制台bin里的exe，双击运行，不能直接在VS中按F5调试运行，否则是无法看到C语言输出的东西的。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 三、关于参数传递</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 关于C/C#之间的参数传递，这里水比较深，抛开数组、结构体等复杂类型不说，就简单类型(int、char等)而言我私以为可以分为两个部分，其一就是C#向C语言的参数传递，另外就是C语言向C#的return。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们先对C#-&gt;C的传递方式进行讲解，同样的我们也继续上demo。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/15042602155376.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们定义了一个计算加法并输出的函数，然后修改我们C#的源代码为：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_dc0120b2-eaee-4caf-b13c-e0435a891e3f\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">点我看源码</span> <img id=\"code_img_opened_dc0120b2-eaee-4caf-b13c-e0435a891e3f\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_dc0120b2-eaee-4caf-b13c-e0435a891e3f\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Runtime.InteropServices;\r\n</span><span style=\"color: #008080;\"> 3</span> \r\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> demo2\r\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">{\r\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\r\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> a </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">10</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> b </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">20</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> cLib </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span><span style=\"color: #000000;\"> CLib();\r\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">unsafe</span>\r\n<span style=\"color: #008080;\">14</span> <span style=\"color: #000000;\">            {\r\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                CLib.Add(</span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">a, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">b);\r\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            }\r\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">            Console.ReadKey();\r\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">        }\r\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">20</span> \r\n<span style=\"color: #008080;\">21</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CLib\r\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">        [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你的路径/c/demo1.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n</span><span style=\"color: #008080;\">24</span>         <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">unsafe</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> IntPtr Add(</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> a,</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> b);\r\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_dc0120b2-eaee-4caf-b13c-e0435a891e3f\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace demo2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var a = 10;\r\n            var b = 20;\r\n            var cLib = new CLib();\r\n            unsafe\r\n            {\r\n                CLib.Add(&amp;a, &amp;b);\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    internal class CLib\r\n    {\r\n        [DllImport(\"你的路径/c/demo1.so\")]\r\n        public unsafe extern static IntPtr Add(int* a,int* b);\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 按下F6之后运行exe文件：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426021943358.jpg\" alt=\"\" /></span></p>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; Oh~Year。同样没有问题。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们在此基础上，试试字符串，同样的，我们在C语言这里添加一个新函数：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426022245856.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同样的C#这里也进行改造：</span></p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_cbb3bff7-5d04-4b8a-bcc7-0ded0a1c867c\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">戳我戳我</span> <img id=\"code_img_opened_cbb3bff7-5d04-4b8a-bcc7-0ded0a1c867c\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_cbb3bff7-5d04-4b8a-bcc7-0ded0a1c867c\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Runtime.InteropServices;\r\n</span><span style=\"color: #008080;\"> 3</span> \r\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> demo2\r\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">{\r\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\r\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> str </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你好，我是小蝶惊鸿</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">11</span> \r\n<span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">unsafe</span>\r\n<span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\r\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> p </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str)\r\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                {\r\n</span><span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">                    CLib.Say(p);\r\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                }\r\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">            }\r\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            Console.ReadKey();\r\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">        }\r\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">22</span> \r\n<span style=\"color: #008080;\">23</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CLib\r\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">        [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你的地址/demo1.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">)]\r\n</span><span style=\"color: #008080;\">26</span>         <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">unsafe</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> IntPtr Say(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> input);\r\n</span><span style=\"color: #008080;\">27</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">28</span> </pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_cbb3bff7-5d04-4b8a-bcc7-0ded0a1c867c\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace demo2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var str = \"你好，我是小蝶惊鸿\";\r\n\r\n            unsafe\r\n            {\r\n                fixed (char* p = str)\r\n                {\r\n                    CLib.Say(p);\r\n                }\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    internal class CLib\r\n    {\r\n        [DllImport(\"你的地址/demo1.so\")]\r\n        public unsafe extern static IntPtr Say(char* input);\r\n    }\r\n</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 然后再重新生成so文件，重新编译C#，并点击exe运行：</span></p>\r\n<p>&nbsp;<img src=\"/Static/Images/150426164210212.jpg\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可以看出，程序立马报了个错误，具体原因就不跟各位读者探讨了，大概就是字符串没有结束符，造成printf读取完字符串本身之后还继续的读其他内存，造成了越界。我们把代码小改一下，由外部传入一个字符串的长度。这里还需要注意一点，那就是在C语言中，char只占一个字节而C#中的char则是两个字节，由C#传入的字符串还需要转换一下。修改后的代码如下图所示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426151019367.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 同样的C#代码也跟着修改：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_1353a4eb-3ad8-4fef-a9d1-66849831908d\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">快戳快戳</span> <img id=\"code_img_opened_1353a4eb-3ad8-4fef-a9d1-66849831908d\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_1353a4eb-3ad8-4fef-a9d1-66849831908d\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Runtime.InteropServices;\r\n</span><span style=\"color: #008080;\"> 3</span> \r\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> demo2\r\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">{\r\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\r\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> str </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hi,i am xiaodiejinghong</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">11</span> \r\n<span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">unsafe</span>\r\n<span style=\"color: #008080;\">13</span> <span style=\"color: #000000;\">            {\r\n</span><span style=\"color: #008080;\">14</span>                 <span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> p </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str)\r\n</span><span style=\"color: #008080;\">15</span> <span style=\"color: #000000;\">                {\r\n</span><span style=\"color: #008080;\">16</span>                     <span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> length </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str.Length;\r\n</span><span style=\"color: #008080;\">17</span> <span style=\"color: #000000;\">                    CLib.Say(p, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">length);\r\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                }\r\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">            }\r\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">            Console.ReadKey();\r\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">        }\r\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">23</span> \r\n<span style=\"color: #008080;\">24</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CLib\r\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\">26</span> <span style=\"color: #000000;\">        [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">E:/ASP/Mono/project/嵌入技术/c/demo1.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, CallingConvention </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> CallingConvention.StdCall)]\r\n</span><span style=\"color: #008080;\">27</span>         <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">unsafe</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> IntPtr Say(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> input, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> length);\r\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_1353a4eb-3ad8-4fef-a9d1-66849831908d\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace demo2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var str = \"hi,i am xiaodiejinghong\";\r\n\r\n            unsafe\r\n            {\r\n                fixed (char* p = str)\r\n                {\r\n                    int length = str.Length;\r\n                    CLib.Say(p, &amp;length);\r\n                }\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    internal class CLib\r\n    {\r\n        [DllImport(\"E:/ASP/Mono/project/嵌入技术/c/demo1.so\", CallingConvention = CallingConvention.StdCall)]\r\n        public unsafe extern static IntPtr Say(char* input, int* length);\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 编译后再次运行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/1504261512411.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 程序正常无误。至此，C#向C传递参数部分暂且讲解完毕，</span><span style=\"font-family: 宋体; font-size: 12pt;\">下面我们再讲解C#如何接收从C函数返回的信息。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 可能有读者认为直接使用Return即可，在某种程度上，确实是可以使用Return，譬如返回一个在C中写死了的字符串（那是因为编译器已经把这段固定字串当成常量存储起来），但如若需要返回一串动态的字串，这种直接Return的方式就行不通了（字符串离开函数之后被回收，不信可以试试）。我们需要使用一些其他方法来接收从C返回的资源，在这里，我们要给各位读者介绍的方式是通过在C#中给出一个容器，并把它的指针传入C中，C需要返回的东西都存放到改容器中，这样想返回的东西就不会被C回收掉了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 我们的C示例代码如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426164314450.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; C#的代码如下：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\"><img id=\"code_img_closed_3d3bc96f-22d3-4f1d-bc82-e437822f5d7a\" class=\"code_img_closed\" style=\"display: inline;\" src=\"/CodeHighlighter/Images/ContractedBlock.gif\" alt=\"\" /> <span class=\"cnblogs_code_collapse\" style=\"display: inline;\">戳我展开看源码</span> <img id=\"code_img_opened_3d3bc96f-22d3-4f1d-bc82-e437822f5d7a\" class=\"code_img_opened\" style=\"display: none;\" src=\"/CodeHighlighter/Images/ExpandedBlockStart.gif\" alt=\"\" />\r\n<div id=\"cnblogs_code_open_3d3bc96f-22d3-4f1d-bc82-e437822f5d7a\" class=\"cnblogs_code_hide\">\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n<pre><span style=\"color: #008080;\"> 1</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System;\r\n</span><span style=\"color: #008080;\"> 2</span> <span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Runtime.InteropServices;\r\n</span><span style=\"color: #008080;\"> 3</span> \r\n<span style=\"color: #008080;\"> 4</span> <span style=\"color: #0000ff;\">namespace</span><span style=\"color: #000000;\"> demo2\r\n</span><span style=\"color: #008080;\"> 5</span> <span style=\"color: #000000;\">{\r\n</span><span style=\"color: #008080;\"> 6</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Program\r\n</span><span style=\"color: #008080;\"> 7</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\"> 8</span>         <span style=\"color: #0000ff;\">private</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> Main(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">[] args)\r\n</span><span style=\"color: #008080;\"> 9</span> <span style=\"color: #000000;\">        {\r\n</span><span style=\"color: #008080;\">10</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> str1 </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">hi,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">11</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> str2 </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">i am xiaodiejinghong </span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #008080;\">12</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> l1 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str1.Length;\r\n</span><span style=\"color: #008080;\">13</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> l2 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str2.Length;\r\n</span><span style=\"color: #008080;\">14</span>             <span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> output </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">[l1 </span><span style=\"color: #000000;\">+</span><span style=\"color: #000000;\"> l2];\r\n</span><span style=\"color: #008080;\">15</span>             <span style=\"color: #0000ff;\">unsafe</span>\r\n<span style=\"color: #008080;\">16</span> <span style=\"color: #000000;\">            {\r\n</span><span style=\"color: #008080;\">17</span>                 <span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> p1 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str1) </span><span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> p2 </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> str2) </span><span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> op </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> output)\r\n</span><span style=\"color: #008080;\">18</span> <span style=\"color: #000000;\">                {\r\n</span><span style=\"color: #008080;\">19</span> <span style=\"color: #000000;\">                    CLib.Merge(p1, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">l1, p2, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">l2, op);\r\n</span><span style=\"color: #008080;\">20</span> <span style=\"color: #000000;\">                    Console.WriteLine(Marshal.PtrToStringAnsi((IntPtr)op));\r\n</span><span style=\"color: #008080;\">21</span> <span style=\"color: #000000;\">                }\r\n</span><span style=\"color: #008080;\">22</span> <span style=\"color: #000000;\">            }\r\n</span><span style=\"color: #008080;\">23</span> <span style=\"color: #000000;\">            Console.ReadKey();\r\n</span><span style=\"color: #008080;\">24</span> <span style=\"color: #000000;\">        }\r\n</span><span style=\"color: #008080;\">25</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">26</span> \r\n<span style=\"color: #008080;\">27</span>     <span style=\"color: #0000ff;\">internal</span> <span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> CLib\r\n</span><span style=\"color: #008080;\">28</span> <span style=\"color: #000000;\">    {\r\n</span><span style=\"color: #008080;\">29</span> <span style=\"color: #000000;\">        [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">你的路径/demo1.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, CallingConvention </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> CallingConvention.StdCall)]\r\n</span><span style=\"color: #008080;\">30</span>         <span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">unsafe</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">static</span><span style=\"color: #000000;\"> IntPtr Merge(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> input1, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> length1, </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> input2, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> length2, </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> output);\r\n</span><span style=\"color: #008080;\">31</span> <span style=\"color: #000000;\">    }\r\n</span><span style=\"color: #008080;\">32</span> <span style=\"color: #000000;\">}</span></pre>\r\n<div class=\"cnblogs_code_toolbar\"><span class=\"cnblogs_code_copy\"><img src=\"/CodeHighlighter/Images/copycode.gif\" alt=\"复制代码\" /></span></div>\r\n</div>\r\n<div id=\"cnblogs_code_copy_3d3bc96f-22d3-4f1d-bc82-e437822f5d7a\" class=\"cnblogs_code_hide\">\r\n<div>按 Ctrl+C 复制代码</div>\r\n<textarea style=\"width: 99%; height: 100px;\">using System;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace demo2\r\n{\r\n    internal class Program\r\n    {\r\n        private static void Main(string[] args)\r\n        {\r\n            var str1 = \"hi,\";\r\n            var str2 = \"i am xiaodiejinghong \";\r\n            var l1 = str1.Length;\r\n            var l2 = str2.Length;\r\n            var output = new char[l1 + l2];\r\n            unsafe\r\n            {\r\n                fixed (char* p1 = str1) fixed (char* p2 = str2) fixed (char* op = output)\r\n                {\r\n                    CLib.Merge(p1, &amp;l1, p2, &amp;l2, op);\r\n                    Console.WriteLine(Marshal.PtrToStringAnsi((IntPtr)op));\r\n                }\r\n            }\r\n            Console.ReadKey();\r\n        }\r\n    }\r\n\r\n    internal class CLib\r\n    {\r\n        [DllImport(\"你的路径/demo1.so\", CallingConvention = CallingConvention.StdCall)]\r\n        public unsafe extern static IntPtr Merge(char* input1, int* length1, char* input2, int* length2, char* output);\r\n    }\r\n}</textarea>\r\n<div>按 Ctrl+C 复制代码</div>\r\n</div>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 重新编译后运行：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426164459407.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 成功合并了。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 至此，本篇内容就到此结束，关于C/C#互调混合编程的水很深，对各方面的要求都很高，可以说，能够玩转的人必定是双料达人<span style=\"text-decoration: line-through;\">（我不是哈）</span>，本篇内容可能无法符合各位读者的口味以及想法，文中观点也有可能无法保证其完备性，各位看官勿拍砖哈~谢谢。</span></p>\r\n</body>\r\n</html>',1430000559748,1430067198851,207,6,'29,30,16',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp;&nbsp;&nbsp; C#作为一门优秀的语言，其功能可谓居家旅行杀人放火必备的凶残语言，他有多强我也懒得介绍了，反正用过的都知道。但也有时候，我们需要某种特殊的功能，或许C#并没有提供，也或许出于某种保密性的需求，我们无法直接使用C#语言进行撰写，这就需要我们采用C#/Else Language混合编程。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp;&nbsp;&nbsp; 本节内容中，我们将就如何让C为C#提供函数调用进行讲解，通过一系列小demo为各位读者展示出C/C#混合编程的美。</span></p>',1430067198851),(55,'如何安装使用MinGW','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在写一篇讲述C/C#混合编程的文章的时候，我突然想起我所使用的C编译器是通过MinGW安装到WIndows中的GCC，对于如何安装操作，或许有读者并不清楚怎么操作，这里，我就写一篇教程讲述如何以比较简单的方式在Windows中通过MinGW安装GCC（并不局限于GCC，其他想安装的都可以）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 对了，MinGW的官网为：<a href=\"http://www.mingw.org/\">http://www.mingw.org/</a>&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 各位读者只需在上面Download一个即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150425224107303.jpg\" alt=\"\" /></span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 下载好了，双击打开安装。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150425224205949.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 然后像普通软件一样安装-&gt;下一步-&gt;下一步-&gt;&hellip;&hellip;-&gt;直至安装完毕。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 安装完毕之后会自动弹出窗口让各位读者选择有哪些组件想安装的（没有弹出窗口的读者可以运行&ldquo;安装目录/libexec/mingw-get/guimain.exe&rdquo;打开向导）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150425232304264.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 具体使用方法就如上图所示了，我不再详述，我们只需右键选择需要安装的东西（这里为gcc），然后点击菜单栏的&ldquo;Installation&rdquo;-&gt;&ldquo;Apply Change&rdquo;然后就等待MinGW在线下载并按照好相关的组件包。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 最后，我们把bin添加到环境变量中（安装目录/MinGW/bin）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150425233206714.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 保存之后，我们迫不及待的打开cmd，测试下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150425233413840.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 嗯，OK！看，就是这么简单，各位读者也快快动起手来，安装自己想要装的软件包吧。</span></p>\r\n</body>\r\n</html>',1430002359997,1430006961440,121,6,'9,27,28',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp;对于一些只提供Linux安装包的开源软件，虽然我们也能通过下载源码包的方式编译安装，不过这毕竟非常麻烦，并且对于没有想过经验的人简直是一种噩梦。如今在Windows中也有提供一些模拟Linux运行环境的工具，譬如CyGin、MyGit、MinGW等。在本篇内容中，我们将简单讲解如何安装使用MinGW来安装我们想要的软件包。</span></p>',1430002359997),(56,'使用C#给Linux写Shell脚本（下篇）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp;&nbsp;在上一篇《<a href=\"/Home/Single2/1802\" target=\"_blank\">使用C#给Linux写Shell脚本</a>》发表之后，收到的反馈可谓是褒贬不一，有不少人认为这是一种新奇的方式，值得学习借鉴，但同样也有人认为Bash Shell已经足够强大并且轻盈因此不再需要C#这类重型的shell。嗯，这个问题怎么说呢，C# Shell之于Bash Shell就类似于Mono之于.NET，前者的诞生并不是以后者的毁灭作为纲领，而是给予系统管理员另外一种选择，到底使用Bash Shell、C# Shell、C shell、K Shell、Dash Shell亦或是更多的其他Shell，其掌握权完全掌控在脚本的编写人手中，熟悉哪种喜欢哪种对哪种有把握即采用哪种。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 此外，在上一篇的结尾部分，我也留给了读者们一个关于C#如何调用Bash的问题，同样的也收到一些反馈，其中就有读者提醒我使用Pash。我也抽了点时间Github中下载源码看了看，这套项目有点类似于在Linux中使用Powershell，非常感谢这位读者，但这个仍然不是我想要的东西。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; 在一次意外的灵感之中，我找到了这道&ldquo;难题&rdquo;的答案，也迫不及待的与各位读者进行分享，又可以提升恫吓的技能了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150426224510107.gif\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp;&nbsp; </span></p>\r\n</body>\r\n</html>',1430088319363,1430088319363,0,6,'',1,0,0,'<p>此外，在上一</p>',1430088319363),(57,'使用C#给Linux写Shell脚本（下篇）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp; 在上篇的《<a href=\"/Home/Single2/1802\">使用C#给Linux写Shell脚本</a>》结尾中，我们留下了一个关于C#如何调用BashShell的问题。在文章发布之后，我留意到有读者留言推荐使用&ldquo;Pash&rdquo;（一款类PowerShell的东西），在我下载并安装了该项目之后，尝试之下发现这仍然不是我们想要的。似乎C#还真的没有提供这种（输出重定向）功能，这也迫使我们采取了其他方式来实现。在本篇中，我们将提升&ldquo;恫吓&rdquo;等级并顺带把这个难题一并解决，各位看官请系好安全带。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150502144111664.gif\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;本篇中，我们将介绍：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、C#直接调用BashShell所遭遇的问题</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、使用C的popen方式调用BashShell</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、通过调用C来间接的调用BashShell</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;一、C#直接调用BashShell所产生的问题</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 使用C#调其他应用，毫无疑问最直接的方法就是&ldquo;System.Diagnostics&rdquo;中的Process.Start了。但当我们使用Process.Start时，却发现连最简单的命令都无法调用，更无从谈起调用并接受返回了。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/15050217283877.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;上图为其中一种错误（当然还会有更多的问题出现，这里就不列举了）。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、使用C的popen方式调用</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 正由于Process.Start无法直接调用BashShell的命令，我们需要绕道而行。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们先看下C语言，C语言调用Shell的方式有多种，我们选择了popen函数的方式进行调用，先看一下以下的这个demo：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">#include</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">stdio.h</span><span style=\"color: #000000;\">&gt;</span>\r\n<span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> main(){\r\n    FILE </span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">fp;\r\n    </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\"> buffer[</span><span style=\"color: #800080;\">255</span><span style=\"color: #000000;\">];\r\n    fp</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">popen(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">ls /home/le</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">r</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n    fread(buffer,</span><span style=\"color: #800080;\">255</span><span style=\"color: #000000;\">,</span><span style=\"color: #800080;\">255</span><span style=\"color: #000000;\">,fp);\r\n    pclose(fp);\r\n    printf(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">%s</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">,buffer);\r\n}</span></pre>\r\n</div>\r\n<p>&nbsp;<img src=\"/Static/Images/150502175628572.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 通过poepn管道并完成输出重定向。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、通过调用C来间接调用Shell</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 既然C已经可以实现对BashShell的调用已经管道重定向，那我们则可以再通过C#调用C的方式，进而间接的完成对BashShell的调用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们先对自己的C函数进行改造，改造后的代码如下（对具体操作有疑问的读者可参见《<a href=\"/Home/Single2/1836\">如何让C为C#提供函数</a>》）：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">#include</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\">stdio.h</span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\">\r\n#include</span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\">.h</span><span style=\"color: #000000;\">&gt;</span>\r\n\r\n<span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> ConvertToCStr(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> input,</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> res,</span><span style=\"color: #0000ff;\">int</span> <span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">length){\r\n    </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> i;\r\n    </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\">(i</span><span style=\"color: #000000;\">=</span><span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">;i</span><span style=\"color: #000000;\">&lt;*</span><span style=\"color: #000000;\">length;i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">){\r\n        res[i]</span><span style=\"color: #000000;\">=*</span><span style=\"color: #000000;\">(input</span><span style=\"color: #000000;\">+</span><span style=\"color: #800080;\">2</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">i);\r\n    }\r\n    res[i]</span><span style=\"color: #000000;\">=</span><span style=\"color: #800000;\">\'</span><span style=\"color: #800000;\">\\0</span><span style=\"color: #800000;\">\'</span><span style=\"color: #000000;\">;\r\n}\r\n\r\n</span><span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> BashHelper(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> cmdStr,</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> cmdLength,</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> output,</span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> length){\r\n    FILE</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> fp;\r\n    </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\"> buffer[</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">length];\r\n    </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\"> cmd[</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">cmdLength</span><span style=\"color: #000000;\">+</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">];\r\n    ConvertToCStr(cmdStr,cmd,cmdLength);\r\n    fp</span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\">popen(cmd,</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">r</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">);\r\n    fread(buffer,</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">length,</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">length,fp);\r\n    pclose(fp);\r\n    strcat(output,buffer);    \r\n}</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 同样的我们也把C# Shell进行改造（没有Intellisense果然难写，我先在控制台写好再拷贝过来）</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #000000;\">#</span><span style=\"color: #000000;\">!/</span><span style=\"color: #000000;\">bin</span><span style=\"color: #000000;\">/</span><span style=\"color: #000000;\">env csharp\r\n\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Diagnostics;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.IO;\r\n</span><span style=\"color: #0000ff;\">using</span><span style=\"color: #000000;\"> System.Runtime.InteropServices;\r\n</span><span style=\"color: #0000ff;\">class</span><span style=\"color: #000000;\"> Clib\r\n{\r\n    </span><span style=\"color: #0000ff;\">public</span> <span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> InvokeBash(</span><span style=\"color: #0000ff;\">string</span><span style=\"color: #000000;\"> cmdStr)\r\n    {\r\n        </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">[] output </span><span style=\"color: #000000;\">=</span> <span style=\"color: #0000ff;\">new</span> <span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">[</span><span style=\"color: #800080;\">255</span><span style=\"color: #000000;\">];\r\n        </span><span style=\"color: #0000ff;\">unsafe</span><span style=\"color: #000000;\">\r\n        {\r\n            </span><span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> c </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> cmdStr)\r\n            </span><span style=\"color: #0000ff;\">fixed</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> op </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> output)\r\n            {\r\n                </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> cmdLenth </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> cmdStr.Length;\r\n                </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\"> outputLength </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> output.Length;\r\n                Clib.BashHelper(c, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">cmdLenth, op, </span><span style=\"color: #000000;\">&amp;</span><span style=\"color: #000000;\">outputLength);\r\n                </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Marshal.PtrToStringAnsi((IntPtr)op);\r\n            }\r\n        }\r\n    }\r\n\r\n    [DllImport(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/你存放so的地址/shell.so</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">, CallingConvention </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> CallingConvention.StdCall)]\r\n    </span><span style=\"color: #0000ff;\">static</span> <span style=\"color: #0000ff;\">unsafe</span> <span style=\"color: #0000ff;\">extern</span> <span style=\"color: #0000ff;\">void</span><span style=\"color: #000000;\"> BashHelper(</span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> cmdStr, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> cmdLength, </span><span style=\"color: #0000ff;\">char</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> output, </span><span style=\"color: #0000ff;\">int</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\"> length);\r\n}\r\n</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> cmdStr </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800000;\">\"</span><span style=\"color: #800000;\">/bin/ls /</span><span style=\"color: #800000;\">\"</span><span style=\"color: #000000;\">;\r\n</span><span style=\"color: #0000ff;\">var</span><span style=\"color: #000000;\"> output </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> Clib.InvokeBash(cmdStr);\r\nConsole.Write(output);</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 完成之后，我们再次在Shell中调用。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150502224720123.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;成功执行BashShell命令并把返回输出重定向到C#中。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 可能有读者会有这么一个疑问：&ldquo;这跟直接写BashShell没啥差别啊？！&rdquo;此言差矣，C#有C#的优势，Bash有Bash的优势，将两者结合起来后，可以形成互补，利用Bash可以快速的操作Linux，而一些Bash无法提供的功能，譬如写入数据库、调用某些服务的API、做其他BashShell无法做的事情等。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 好的，本篇就写这么多了，代码（特别是C那部分）可能写得不是太好，仅提供思路，勿拍砖哈。谢谢。</span></p>\r\n</body>\r\n</html>',1430577896082,1430608531448,159,6,'9,25,26,16',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 在上篇的《</span><a style=\"font-family: 宋体; font-size: 16px;\" href=\"../../../Home/Single2/1802\">使用C#给Linux写Shell脚本</a><span style=\"font-family: 宋体; font-size: 16px;\">》结尾中，我们留下了一个关于C#如何调用BashShell的问题。在文章发布之后，我留意到有读者留言推荐使用&ldquo;Pash&rdquo;（一款类PowerShell的东西），在我下载并安装了该项目之后，尝试之下发现这仍然不是我们想要的。似乎C#还真的没有提供这种（输出重定向）功能，这也迫使我们采取了其他方式来实现。</span><span style=\"font-family: 宋体; font-size: 16px;\">在本篇中，我们将提升&ldquo;恫吓&rdquo;等级并顺带把这个难题一并解决，各位看官请系好安全带。</span></p>',1430577896082),(58,'LVS原理与使用（1）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 负载均衡，无论是否真正了解过，但我相信所有跟编程打交道的读者都有听说。同时，它（负载均衡）也是被认为一个大型网站的标识性技术之一（但负载均衡的作用肯定不止这点用途）。虽然网上也有不少关于LVS配置实用的教程或帖子，但总的来说几乎都是以快餐式文化为主，内容参差不齐，不少教程本身也存在不少错误，对读者不仅没有帮助，反而造成了视线干扰。因此，本系列，我们将使用较大的篇幅（60%左右）来讲对LVS的前提知识的进行补充以及其原理进行讲解，然后用较少的篇幅（30%左右）来讲解具体操作，最后用剩余的篇幅（10%左右）来讲解需要注意的地方。希望借此让各位读者能够从真正意义上了解LVS。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 好的，作为本系列的开篇，本章内容中，我们将讲述：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、LVS的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、LVS的优势</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;一、LVS简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 负载均衡是什么我就懒得解析了，目前市面上的负载均衡设备主要分为两个方面，其一就是基于硬件的负载均衡设备，譬如Cisco（思科）的交换机、华为的硬件机器、F5、梭子鱼等。这些设备通常以整套产品（软+硬+服务）的方式进行出售，用户按照自身需求购买，一般均能达到良好的预期结果，此外这些设备的设备商也提供了一站式服务，让您的后期的维护省下不少的烦恼。不过由于这些设备一般售价较高，后期的维护也可能需要支付一笔不菲的费用，这也使得不少的中小企业因无法承担这笔开支而选择放弃。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150512235657822.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 而另外一种则是软件型的负载均衡，这一类的负载均衡都是基于操作系统内核或者是以运行于操作系统中的软件服务的形式提供负载均衡服务。比较经典的是LVS、NLB以及某些提供轮询或代理功能的软件等。这种方式最大的好处就是能够以相对低廉的价格获得同样的服务，但这种方式通常没有任何的机构提供任何的支持服务（给维护费除外），也难以获得任何所谓的一站式服务，对使用者本身的技术掌握能力要求也较高。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我们再用一句话来概括LVS：LVS，全称是&ldquo;Linux Virtual Server&rdquo;，它是我国（中国）国内最早出现的自由软件项目之一，在1998年5月由章文嵩先生立项成立，通过基于内容的分发的形式让多台真实服务器同时处理来自外部的多个请求，从而提升整体服务的吞吐性能，其核心为ipvsadm，目前LVS的使用已经遍布互联网的每个角落，几乎所有有使用Linux作为服务器的大型企业都有使用。<br />&nbsp; &nbsp;&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、LVS的优势</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; LVS的初次配置使用并算不上特别的容易，而后期的维护就更加考验经验，与之同时，也有不少用户在使用一些其他软件来提供负载均衡功能，比较经典的例子就是PHPer们号称的最强webserver服务器Nginx，用它来做代理（咳咳，Linux中没有比Jexus更强的WebServer）。这些后者的方式相对来说操作更加简单，因此有很多的负载均衡均是使用一台装有Nginx之类的服务器来充当。不过即便如此，LVS仍然均有它们所的无法比拟的好处。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 为了说清楚它的优势，我们需要先回顾一下OSI七层网络模型的知识。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150514000346406.png\" alt=\"\" /></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 上图为大家所熟知的OSI七层模型，数据从应用程序发出经由应用层、表示层、会话层（目前上面三层可以合并为一层）&hellip;&hellip;经过层层封装到达链路层，然后再化为0101二进制，再以比特流的形式在物理线路上进行传输。数据流到达目的计算机后，也按照相反的步骤从下往上的层层解包，最后到达应用层并把数据传递给应用程序。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 普通的负载均衡软件，主要都是工作在三层到顶层之间，从理论上来讲越是工作在上层的服务就意味着数据包的传输需要进行越多的打包和拆包工作，性能的消耗也越是厉害（当然，单个数据包的消耗极小，几乎可以忽略，这里指海量数据包），代理软件一般工作在三层/四层之中，WebServer工作在五到七层之中，而LVS则可以工作在二层之中（数据链路层），我想剩余的不用我多说，读者们也应该马上意识到它的将会有多高效。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 此外，由于OSI网络具有透明性（上层对下层说：数据给你，剩下的我不管了【不管你怎么传输，也不管是否可达】），所有上层协议都是建立在透明的下层的基础上，我们只要把下层搞定了，上层协议也自然&ldquo;被&rdquo;兼容，因此LVS可以无需担心任何Http协议、Telnet协议、Https协议等高层协议的问题，具有极强的兼容能力。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最后，一般的高层网络负载均衡设备主要使用NAT技术或者代理来实现负载均衡，所有的数据请求与应答的流量都需要经过负载均衡服务器，这不仅相当容易给负载均衡服务器造成巨大的压力、造成性能上的瓶颈，而且数据包中源IP有可能发生改变，这也很容易造成&ldquo;后方&rdquo;服务器上的安全监控设备产生误判，造成误杀。而LVS不仅可以使用NAT的方式进行负载均衡，使用非NAT的方式，利用三角网络的形式进行负载均衡，应答的数据不再经由负载均衡服务器（一般情况，应答才是流量的大头），并且LVS此时不改变数据包的源IP，仅仅通过改变MAC的方式，以广播的方式直接向&ldquo;后方&rdquo;服务器发送数据，避免了监控的误杀。</span></p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;好的，关于LVS的介绍，我们就暂且告一段落，<a title=\"最好的LVS文章\" href=\"/Home/Single2/2006\">下一篇</a>，我们将开始进入到LVS的学习使用当中，我们下篇见。</span></p>\r\n</body>\r\n</html>',1431467083787,1432285397806,228,6,'9,31,32',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 负载均衡，无论是否真正了解过，但我相信所有跟编程打交道的读者都有听说。同时，它（负载均衡）也是被认为一个大型网站的标识性技术之一（但负载均衡的作用肯定不止这点用途）。虽然网上也有不少关于LVS配置实用的教程或帖子，但总的来说几乎都是以快餐式文化为主，内容参差不齐，不少教程本身也存在不少错误，对读者不仅没有帮助，反而造成了视线干扰。因此，本系列，我们将使用较大的篇幅（60%左右）来讲对LVS的前提知识的进行补充以及其原理进行讲解，然后用较少的篇幅（30%左右）来讲解具体操作，最用用剩余的篇幅（10%左右）来讲解需要注意的地方。希望借此让各位读者能够从真正意义上了解LVS。</span></p>',1431467083787),(59,'LVS原理与使用（2）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; <a title=\"最好的LVS文章\" href=\"/Home/Single2/1972\">上一篇</a>中，我们对LVS作了一个简要的介绍，我们对LVS已经有了简单的认识，从这篇开始，我们将对LVS的如何使用进行以及其相关原理进行学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 本篇内容，我们将讲述LVS负载均衡技术中的使用NAT实现负载均衡，我们将共同学习：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、LVS-NAT的架构拓扑以及原理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、使用LVS-NAT技术的具体操作以及注意事项。</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp;一、LVS-NAT的架构拓扑以及原理</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; NAT全称是&ldquo;Natwork Address Translation&rdquo;中文译为网络地址转换转换技术。它通过对数据包地址的重写，使得多台主机在只有一个公网IP的情况下仍然可以照常的与外网通讯。而LVS-NAT技术则是通过网络地址转换技术，依赖LVS的核心调度器，根据我们预设的负载均衡调度算法对请求的数据包进行目标地址的重写，最终使数据包分派到后方的真是服务器，对于真实服务器响应的报文，报文将原路返回到LVS中，LVS将再次改写报文数据包中的源地址并推送到网卡，完整整个的负载均衡工作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150516214046863.png\" alt=\"\" /></span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这句话可能并不是特别好理解，我们结合这个拓扑图来解析。当一个用户从Internat访问您的域名时，电信的DNS会吧域名解析为您的公网IP，继而访问到您的主机（譬如这里访问了<a title=\"最好的博客\" href=\"/\">jhonge.net</a>，面向公网的网卡也假定为eth0），当请求到达LVS服务器后，数据包从eth0网卡进入服务器，ipvsadm组件将根据预设的负载均衡算法对数据包的目标IP进行改写，再通过Linux的路由转发功能，数据包从eth1网卡出来，经过交换机，最终到达了真实服务器。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 而真实服务器在接收到这些请求后会进行处理并响应，响应的报文按照原路，经过交换机到达LVS服务器，数据包从eth1网卡进入服务器，经过ipvsadm改写源地址后从eth0网卡推送出来（到Internat中），完整整个请求-响应的负载均衡工作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 使用这种LVS-NAT作为负载均衡有这么几点的好处：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、您只需要一个公网IP即可使用负载均衡（而其他的则需要多个，后面几篇会讲到）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、您可以保证内外网的分离，避免或减少内网环境被直接访问的潜在危险。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、拓扑结构非常简单，也非常清晰。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （4）、虽然使用LVS-NAT时，LVS服务器看起来可能是潜在的瓶颈，但由于LVS-NAT的报文转发性能很高基本可以达到网卡上限，相对而言，那小水管般的网络更可能成为您的瓶颈所在。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、使用LVS-NAT技术的具体操作以及注意事项</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 简单的说了LVS-NAT的拓扑以及原理之后，我们接下来讲解LVS-NAT的实操。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 我这里总共准备了三台CentOS服务器，它们分别是：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 作为LVS的服务器：eth0（充当公网）：192.168.1.100/24、eth1（充当私网）：192.168.21.55/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 真实服务器A：eth0：192.168.21.201/24 &nbsp; gw：192.168.21.55</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 真实服务器B：eth0：192.168.21.202/24&nbsp; &nbsp;gw：192.168.21.55</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 要配置LVS之前，请确保您的LVS服务器已经发安装了ipvsadm，比较简单的方式就是直接从yum源中装一个回来即可。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 接下来我们需要对LVS服务器进行配置（先实现，后解析）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 首先我们打开路由转发功能：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\'&gt;/proc/sys/net/ipv4/ip_forward&nbsp;&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 接着配置我们的ipvsadm</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ipvsadm -C &nbsp; &nbsp;#清空ipvsadm</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -A -t 192.168.1.100:80 -s rr &nbsp; &nbsp;#指定使用LVS的ip及端口</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -a -t 192.168.1.100:80 -r 192.168.21.201:80 -m &nbsp; #注册一台真实机器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -a -t 192.168.1.100:80 -r 192.168.21.202:80 -m &nbsp; #再注册一台真实机器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 这样，我们就很简单的完成了LVS-NAT的配置了，超级简单。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150517151624184.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;这里有几点需要注意的地方：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （1）、请确认机器之间是可以通讯的（废话了）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （2）、确认LVS服务器的路由转发功能已经开启，否则数据包将无法通过数据包进行转发。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （3）、小心真实服务器中的网关，请确保指向LVS服务器。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （4）、简单解析一下上面参数的意思：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -t：表示使用的是TCP协议；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -A：表示添加一台转发规则；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -a：表示添加一台真是服务器；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -s：表示设置转发规则，旁边的rr表示使用&ldquo;Round Robin&rdquo;也就是普通的轮询；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -m：则指定它使用LVS-NAT工作模式；</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; -r：表示真实服务器的地址及端口；</span></p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 嗯，至此，LVS-NAT已经讲解完毕，<a title=\"最好的LVS文章\" href=\"/Home/Single2/2040\">下一篇</a>中，我们将对LVS-Tun进行讲解，我们下回见。</span></p>\r\n</body>\r\n</html>',1431646313082,1432509740181,234,6,'32,31,9',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp;&nbsp;</span><a style=\"font-family: 宋体; font-size: 16px;\" href=\"../../../Home/Single2/1972\">上一篇</a><span style=\"font-family: 宋体; font-size: 16px;\">中，我们对LVS作了一个简要的介绍，我们对LVS已经有了简单的认识，从这篇开始，我们将对LVS的如何使用进行以及其相关原理进行学习。</span></p>',1431646313082),(60,'LVS原理与使用（3）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 继续我们的LVS学习，<a title=\"最好的LVS文章\" href=\"/Home/Single2/2006\">上篇中</a>，我们讲解了LVS-NAT模式的负载均衡，本篇我们将继续学习LVS-Tun模式的负载均衡机制。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 本篇内容中，我们将学习讨论：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、LVS-Tun模式的构架拓扑以及原理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、LVS-Tun模式的具体操作以及注意事项。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;（3）、扩展知识（选读&middot;难）。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、LVS-Tun模式的构架拓扑以及原理</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 为了讲明LVS-Tun的构架，我们会例牌的上一张我自己用Excel画的草图。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150517211901576.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 可以看出它的拓扑结构跟LVS-NAT有巨大的差别。首先它的所有服务器（包括LVS以及真实服务器）都是直接连接在公网的交换机上，而NAT中的真实服务器则是连接在私网的交换机上；其次我们可以看到LVS服务器至少只需要一张网卡即可；最后还有一点最大的区别就是多了个Vip的东西。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 当来自因特网的用户想访问我们的服务/网站的时候，电信的DNS会把域名解析成我们的主机IP也就是VIP，接着数据包通过交换机从我们的LVS服务器的网卡进入，LVS服务器根据我们预设的负载均衡算法，自动的将数据包加工并推送到相应的真实服务器中。真实服务器在接收并处理响应的数据包从（真实）服务器的网卡推送出来后将直接通过交换机传输给用户不再通过LVS服务器。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150518093300995.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 事实上，一般一次的&ldquo;请求-响应&rdquo;的处理过程，请求的报文往往都是小而短，大部分的网络流量都产生在响应的报文之中，因此使用LVS-Tun技术作为负载均衡能比使用LVS-NAT获得更高（数倍或更高）的吞吐量。但同样的这也有一个缺点，那就正如拓扑图所示的那样，所有的服务器都需要公网IP，并且真是服务器都是暴露在外网当中，有潜在被不法分子攻击的危险。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、LVS-Tun模式的具体操作以及注意事项</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 同样LVS-NAT一样，我们需要准备几台机器，以下是它们的配置</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;LVS服务器：ech0：192.168.1.100/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 真实服务器A：eth0：192.168.1.201/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 真实服务器B：eth0：192.168.1.202/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; VIP：192.168.1.55/32</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 首先，我们需要先配置LVS服务器：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;ifconfig eth0:0 192.168.1.55 netmask 255.255.255.255 up&nbsp; #添加一张Tun网卡</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; route add -host 192.168.1.55 dev eth0:0 &nbsp; &nbsp;#添加一个路由规则</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -C &nbsp; &nbsp;#清空ipvsadm</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ipvsadm -A -t 192.168.1.55:80 -s rr&nbsp; &nbsp; #添加一个需要负载均衡的IP及端口（即vip）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ipvsadm -a -t 192.168.1.55:80 -r 192.168.1.201 -i&nbsp; &nbsp; #注册一个真实服务器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ipvsadm -a -t 192.168.1.55:80 -r 192.168.1.202 -i&nbsp; &nbsp; #注册另一个真实服务器</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'0\' &gt;/proc/sys/net/ipv4/ip_forward&nbsp; &nbsp; &nbsp;&nbsp;#关闭转发</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\' &gt;/proc/sys/net/ipv4/conf/all/send_redirects &nbsp; &nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\' &gt;/proc/sys/net/ipv4/conf/default/send_redirects</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\' &gt;/proc/sys/net/ipv4/conf/eth0/send_redirects</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 至此，LVS服务器已经配置完成。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 接下来我们配置真实服务器（A与B一样）：</span>&nbsp; &nbsp; &nbsp;&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; ifconfig tunl0 192.168.1.55 netmask 255.255.255.255 up&nbsp; #添加一张Tun网卡</span>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; route add -host 192.168.1.55 dev tunl0&nbsp; &nbsp; #添加一个路由规则</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'0\'&gt;/proc/sys/net/ipv4/ip_forward &nbsp; &nbsp;#关闭转发</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; echo \'1\'&gt;/proc/sys/net/ipv4/conf/tunl0/arp_ignore&nbsp; #增加一些arp设置，以下均是</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\'&gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'2\'&gt;/proc/sys/net/ipv4/conf/all/arp_announce</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'2\'&gt;/proc/sys/net/ipv4/conf/tunl0/arp_announce</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'0\'&gt;/proc/sys/net/ipv4/conf/tunl0/rp_filter</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'0\'&gt;/proc/sys/net/ipv4/conf/all/rp_filter</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150519221658942.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 同样这里也有几点需要注意的：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、由于IP隧道需要特殊的协议支持，因此请确认您的计算机是支持该协议的（具体检测方法请百度谷歌）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、关闭Linux的路由功能（如果已经打开）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、确保教程上的所有命令都用上（而非网上找到的）。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、拓展知识（选读&middot;难）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 而事实上IP隧道（IP tunneling）技术也被称为IP封装技术（IP encapsulation），它是将一段IP报文封装到另一段报文的技术，它的调度与管理与LVS-NAT模式一样，只是报文转发方法不同，其过程可由下图表示：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150518094926923.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;&ldquo;既然VIP是DNS解析的主机IP，并且所有的请求都需要先到达LVS服务器，为何不直接把VIP作为LVS网卡的公网IP，真实服务器不用再配置VIP。&rdquo;除了我以外，应该有不少脑筋灵敏的读者也会有这么个疑问。我们来作一个假设，假设我们主机把VIP作为LVS的网卡IP，真实服务器不再配置VIP，看看会发生什么事（假设通讯可行）。我们模拟了通讯：</span></p>\r\n<p><img src=\"/Static/Images/150518103040417.png\" alt=\"\" /></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;我们再来看看各个步骤数据包的参数结构。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150518104924857.png\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 不知各位读者有没有看懂这个图，步骤1-6是用户第一次向服务器发送请求，请求经过LVS并转发到真实服务器（这里是B服务器），最后由真实服务器处理并直接响应给用户，当用户再次发起请求时，问题出现了，由于计算机会使用上一次接收到的数据包的源IP和源Mac作为下一次发送的数据包的目的IP和目的Mac，于是，当新来的数据包到达交换机后，数据包将直接推送到真实服务器，不再经过LVS。问题不仅如此的是，由于请求不再经过LVS，LVS调度表中的状态数据的值将远低于真实状况，这也使得LVS对当前真实服务器的压力产生误判，不仅没有达到负载均衡的效果，还有可能造成单台服务器负载过重。而让真实服务器加入tunl0网卡并设置vip后效果就大不相同，响应的报文会把源IP自动的回写VIP，然后用户二次发起请求时，数据包仍然是可达LVS的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;&ldquo;所有服务器都可以用同一个IP？为何？&rdquo;在所有服务器都设置了相同的VIP后，更机智的读者可能会马上意识到这个问题，是的，一个IP是不能直接用于多个网络设备的，否则会造成网络冲突。网络冲突（特指这种）是怎么检测到呢？秘密就在交换机的ARP广播中，交换机为了维持自身的ARP缓存表会不断的发送ARP广播，收到广播的网络设备会进行响应，交换机收到设备的回应之后将更新缓存表，如果在单一的ARP广播中，却收到了多个网络设备的相应，交换机将无法判断那个才是真正的ARP关系（亚哈？的一声傻掉了）。这是，真实服务器中的那几句ARP忽略和ARP宣言就成了解决的关键，它的作用就是忽略交换机发出的VIP的MAC查询，只响应eth0（真实网卡）上的IP的MAC查询，这样，每次交换机发的ARP广播有且只有LVS服务器是做出回应的。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 最后，我还想再补充一个知识，就是Tun网卡子网掩码的秘密，它的作用就是分割网段，就这样完了。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;&nbsp; &nbsp; 本篇内容就到这里结束，下一篇，我们将学习LVS-DR模式，我们下回见。</span></p>\r\n</body>\r\n</html>',1431881351055,1432509751410,79,6,'32,31,9',0,1,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; LVS有三大IP负载均衡模式，分别是NAT、Tun以及DR，</span><span style=\"font-family: 宋体; font-size: 16px;\">上篇中，我们讲解了LVS-NAT模式的负载均衡，本篇我们将继续学习LVS-Tun模式的负载均衡机制。</span></p>',1432509690706),(61,'LVS原理与使用（4）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 上一篇中，我们讲解了LVS的IP隧道模式，IP隧道模式虽然功能强大，但是却远没有设计精巧的直接路由模式常见，本篇中，我们将讲解LVS IP负载均衡技术中的最后一个技术&mdash;&mdash;直接路由模式（LVS-DR）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 在本篇内容中，我们将进行讲解：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、LVS-DR的架构拓扑以及原理。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、LVS-DR模式的具体操作。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、拓展阅读。</span>&nbsp; &nbsp;&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、直接路由模式的架构拓扑以及原理</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 按照惯例，先上一个艹图：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\"><img src=\"/Static/Images/150520120022504.png\" alt=\"\" />&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp;是的，您没有看错，直接路由模式的物理拓扑图跟IP隧道模式是一模一样的。同样的来自用户的数据包也是先通过LVS然后进入真实服务器，而真实服务器响应所发出的数据包则直接&ldquo;回送&rdquo;到用户手中，完成整套的&ldquo;请求-响应&rdquo;负载均衡工作。事实上，直接路由模式和IP隧道模式还是存在一些不同之处，下面我将通过列举直接路由模式的优缺点的方式来标注它们的异同：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 使用直接路由模式，至少拥有以下优点：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 1、兼容性更好（不再走IP隧道，不需要考虑当前版本的Linux是否支持）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; 2、吞吐量也比NAT更高（这点和IP隧道相同）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 3、工作的OSI层级更低（比IP隧道还低，因此效率更高）</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 4、没有IP隧道的消耗，性能更好</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 更多&hellip;&hellip;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 但同样的，也会存在以下的缺点：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 1、与IP隧道一样，整套集群需要多个公网IP</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 2、与IP隧道一样，所有的真实服务器都暴露在外网之中，增加潜在的危险</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 3、直接路由模式无法穿越网段，因此所有的内网服务器只能处于一个局域网内。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 二、直接路由模式的具体操作</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 我们这里有几台机器，其参数如下：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; LVS服务器：eth0：192.168.1.100/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 真实服务器A：eth0：192.168.1.201/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; 真实服务器B：eth0：192.168.1.202/24</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp; VIP：192.168.1.56</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 首先我们先对LVS服务器进行配置：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ifconfig eth0:0 192.168.1.56 netmask 255.255.255.255 up</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;route add -host 192.168.192.56 dev eth0:0</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -C</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -A -t 192.168.1.56:80 -s rr</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -a -t 192.168.1.56:80 -r 192.168.1.201 -g</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ipvsadm -a -t 192.168.1.56:80 -r 192.168.1.202 -g</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; 然后配置真实服务器（A与B一样配置）：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;ifconfig lo:0 192.168.1.56 netmask 255.255.255.255</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;route add -host 192.168.1.56 dev lo:0</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\'&gt;/proc/sys/net/ipv4/conf/lo/arp_ignore</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'1\'&gt;/proc/sys/net/ipv4/conf/all/arp_ignore</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'2\'&gt;/proc/sys/net/ipv4/conf/lo/arp_announce</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\">&nbsp; &nbsp; &nbsp;&nbsp;echo \'2\'&gt;/proc/sys/net/ipv4/conf/all/arp_announce</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: medium;\"><img src=\"/Static/Images/150524155144336.jpg\" alt=\"\" /></span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;可以看出，使用直接路由模式和使用IP隧道模式的配置脚本非常类似，区别就只是添加真是服务器时，负载均衡模式设置为&ldquo;g（gateway）&rdquo;。</span></p>\r\n<p>&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、拓展阅读</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 直接路由模式转发报文的方式是通过改变数据包的MAC地址的方式，因此它无法穿越vlan，这种特性规定了它必须工作在同一个局域网之内，这是它的弱势之处，但这个弱势也正是它的优势，由于这是直接工作在二层协议之中，无需再对上层进行操作，因此这种三角通讯网络的效率会进一步提高，以下是它的简图：</span></p>\r\n<p><img src=\"/Static/Images/150524161043529.png\" alt=\"\" />&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;好的，直接路由模式就讲这么多了，下一篇我们再对LVS的一些其他知识进行讲解，我们下回见。</span></p>\r\n</body>\r\n</html>',1432122159735,1432483946735,0,6,'',0,0,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">一篇中</span></p>',1432122159735),(62,'LVS原理与使用（5）','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 继续我们的旅程，前几篇中，我们已经对LVS的三种默认负载均衡技术进行了讲解，本篇中，我们再讲解和补充一些其他知识，尽力完成本阶段的LVS负载均衡的学习。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 本篇中，我们将讲解：</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （1）、ipvsadm参数介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （2）、几种均衡算法的简介</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; &nbsp; （3）、第四种负载均衡模式FullNat的介绍</span>&nbsp;</p>\r\n<hr />\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 一、ipvsadm参数介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; ipvsadm有众多的参数，通过控制这些参数我们可以进行更多更细微的操控。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 由于这些参数列表网上有大把，所以我打算偷偷懒不在这里列举了，各位读者可自行百度搜索。（<img src=\"/Static/Images/150525145502995.png\" alt=\"\" />笑&hellip;&hellip;）</span></p>\r\n<p>&nbsp;&nbsp;</p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 二、几种负载均衡算法的介绍</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 调度器作为LVS的重要组成部分，它的调度算法更扮演这至关重要的角色。目前，LVS中主要有八大内核连接调度算法，下面我将为读者们抽取其中最常见的四种调度算法进行介绍（部分摘抄自相关手册），更多具体的内容读者们可以在LVS的用户手册中找到。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; （1）、Round Robin Scheduling（轮叫调度算法）：早在前面几篇中，我们已经使用了该算法（ipvsadm -A -t 192.168.1.55:80 -s rr 这里的rr-&gt;round robin），它也是所有调度算法中最简洁的一个，这种轮叫算法就是单纯的对每台机器做轮询，这种轮叫算法通常比较适合多台配置差不多的真实服务器之间使用，其实现算法如下：<br /></span></p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">摘抄自手册\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">假设有一组服务器S = {S0, S1, &hellip;, Sn-1}，一个指示变量i表示上一次选择的\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">服务器，W(Si)表示服务器Si的权值。变量i被初始化为n-1，其中n &gt; 0。</span>\r\n<span style=\"color: #000000;\">\r\nj </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> i;\r\n</span><span style=\"color: #0000ff;\">do</span><span style=\"color: #000000;\"> {\r\n    j </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (j </span><span style=\"color: #000000;\">+</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) mod n;\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (W(Sj) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n        i </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> j;\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Si;\r\n    }\r\n} </span><span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\"> (j </span><span style=\"color: #000000;\">!=</span><span style=\"color: #000000;\"> i);\r\n</span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;</span></pre>\r\n</div>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;（2）、Round Robin Scheduling（加权轮叫算法）：使用参数为&ldquo;wrr&rdquo;，该算法可以解决多台真实服务器之间性能不一的情况，该算法会根据预设的权值自动的指派服务器，权值高的（服务器）会优先分配流量，其调度算法流程如下：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">摘抄自手册\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">假设有一组服务器S = {S0, S1, &hellip;, Sn-1}，W(Si)表示服务器Si的权值，一个\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">指示变量i表示上一次选择的服务器，指示变量cw表示当前调度的权值，max(S)\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">表示集合S中所有服务器的最大权值，gcd(S)表示集合S中所有服务器权值的最大公约数。变量i初始化为-1，cw初始化为零。</span>\r\n\r\n<span style=\"color: #0000ff;\">while</span><span style=\"color: #000000;\"> (</span><span style=\"color: #0000ff;\">true</span><span style=\"color: #000000;\">) {\r\n  i </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> (i </span><span style=\"color: #000000;\">+</span> <span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">) mod n;\r\n</span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (i </span><span style=\"color: #000000;\">==</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n     cw </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> cw </span><span style=\"color: #000000;\">-</span><span style=\"color: #000000;\"> gcd(S); \r\n     </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (cw </span><span style=\"color: #000000;\">&lt;=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n       cw </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> max(S);\r\n       </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (cw </span><span style=\"color: #000000;\">==</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n         </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;\r\n     }\r\n  } \r\n  </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (W(Si) </span><span style=\"color: #000000;\">&gt;=</span><span style=\"color: #000000;\"> cw) \r\n    </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Si;\r\n}\r\n</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;（3）、Least-Connection Scheduling（最小连接调度算法）：使用参数为&ldquo;lc&rdquo;，由于ipvsadm内部维护了一张状态表，上面记录了当前的状态（包括连接数），新请求到达时，LVS将根据当前状态自动选择一个连接数最少的服务器进行分流，因此，该算法也是一种动态调度算法，其调度算法流程如下：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">摘抄自手册\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">假设有一组服务器S = {S0, S1, ..., Sn-1}，W(Si)表示服务器Si的权值，C(Si)表示服务器Si的当前连接数。</span>\r\n\r\n<span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (m </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">; m </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> n; m</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">) {\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (W(Sm) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (i </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> m</span><span style=\"color: #000000;\">+</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">; i </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> n; i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">) {\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (W(Si) </span><span style=\"color: #000000;\">&lt;=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">)\r\n                </span><span style=\"color: #0000ff;\">continue</span><span style=\"color: #000000;\">;\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (C(Si) </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> C(Sm))\r\n                m </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> i;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Sm;\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\"> &nbsp; &nbsp;（4）、Weighted Least-Connection Scheduling（加权最小连接调度算法）：使用参数为&ldquo;wlc&rdquo;，该算法是最小连接调度算法的一个子集，有点类似于&ldquo;最小连接调度算法&rdquo;+&ldquo;加权轮叫算法&rdquo;的结合体，其调度算法流程如下：</span>&nbsp;</p>\r\n<div class=\"cnblogs_code\">\r\n<pre><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">摘抄自手册\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">假设有一组服务器S = {S0, S1, ..., Sn-1}，W(Si)表示服务器Si的权值，C(Si)表示服务器Si的当前连接数。所有服务器当前连接数的总和为CSUM = &Sigma;C(Si)  (i=0, 1, .. , n-1)。当前的新连接请求会被发送服务器Sm，当且仅当服务器Sm满足以下条件  (C(Sm) / CSUM)/ W(Sm) = min { (C(Si) / CSUM) / W(Si)}  (i=0, 1, . , n-1)  其中W(Si)不为零\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">因为CSUM在这一轮查找中是个常数，所以判断条件可以简化为  C(Sm) / W(Sm) = min { C(Si) / W(Si)}  (i=0, 1, . , n-1)  其中W(Si)不为零\r\n\r\n</span><span style=\"color: #008000;\">//</span><span style=\"color: #008000;\">因为除法所需的CPU周期比乘法多，且在Linux内核中不允许浮点除法，服务器的权值都大于零，所以判断条件C(Sm) / W(Sm) &gt; C(Si) / W(Si) 可以进一步优化为C(Sm)*W(Si) &gt; C(Si)* W(Sm)。同时保证服务器的权值为零时，服务器不被调度。所以，算法只要执行以下流程。</span>\r\n\r\n<span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (m </span><span style=\"color: #000000;\">=</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">; m </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> n; m</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">) {\r\n    </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (W(Sm) </span><span style=\"color: #000000;\">&gt;</span> <span style=\"color: #800080;\">0</span><span style=\"color: #000000;\">) {\r\n        </span><span style=\"color: #0000ff;\">for</span><span style=\"color: #000000;\"> (i </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> m</span><span style=\"color: #000000;\">+</span><span style=\"color: #800080;\">1</span><span style=\"color: #000000;\">; i </span><span style=\"color: #000000;\">&lt;</span><span style=\"color: #000000;\"> n; i</span><span style=\"color: #000000;\">++</span><span style=\"color: #000000;\">) {\r\n            </span><span style=\"color: #0000ff;\">if</span><span style=\"color: #000000;\"> (C(Sm)</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">W(Si) </span><span style=\"color: #000000;\">&gt;</span><span style=\"color: #000000;\"> C(Si)</span><span style=\"color: #000000;\">*</span><span style=\"color: #000000;\">W(Sm))\r\n                m </span><span style=\"color: #000000;\">=</span><span style=\"color: #000000;\"> i;\r\n        }\r\n        </span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> Sm;\r\n    }\r\n}\r\n</span><span style=\"color: #0000ff;\">return</span><span style=\"color: #000000;\"> NULL;</span></pre>\r\n</div>\r\n<p>&nbsp;<span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp;</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 三、第四种的负载均衡模式FullNat</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 无论你在LVS的官方手册还是各大的LVS帖子中，上面也只仅仅找到地址转换、IP隧道和直接路由三种负载均衡模式，几乎不会再找到任何关于除这三种模式以外的其他模式。然而，事实上，还有一种名为&ldquo;FullNat&rdquo;的负载均衡模式。它是由阿里内部开发的一种新的负载均衡模式，目前它被托管到了Github中（地址为：https://github.com/alibaba/LVS）。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 它的物理拓扑与LVS-Nat非常相似，但常规的Nat模式，只进行DNat，这规定了所有参与负载均衡的真实服务器必须处于一个网段之内，当然，这对于一般的企业来说这已经是足够的，但对于更大型的企业以及拥有复杂网络结构的企业，是不够的。FullNat则是在DNat的基础上增加了SNat，所有经过负载均衡服务器转发过来的数据包的源IP地址也会进行改写，这样数据包在内网中就可以穿透Vlan，形成一个复杂的内部网络结构。</span></p>\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp; 但同时它也有自己的缺点，那就是这种模式使用起来异常繁琐，网络上极其难找到相关资料，截至完成本文的撰写为止，我仍然无法把FullNat完成部署，希望后面能成功部署，届时我将写出一篇详细的文章介绍。这里就点到为止，不作深入。</span>&nbsp;</p>\r\n<hr />\r\n<p><span style=\"font-family: 宋体; font-size: 12pt;\">&nbsp; &nbsp;&nbsp;好的，本系列，关于LVS的学习到此就告一段落了。希望本系列的文章对读者们有帮助，谢谢。<img src=\"/Static/Images/15052514552650.jpg\" alt=\"\" /></span></p>\r\n</body>\r\n</html>',1432500252079,1432566355144,0,6,'9,31,32',0,0,0,'<p><span style=\"font-family: 宋体; font-size: 16px;\">&nbsp; &nbsp; 继续我们的旅程，前几篇中，我们已经对LVS的三种默认负载均衡技术进行了讲解，本篇中，我们再讲解和补充一些其他知识，尽力完成本阶段的LVS负载均衡的学习。</span></p>',1432500252079),(63,'0101','<!DOCTYPE html>\r\n<html>\r\n<head>\r\n</head>\r\n<body>\r\n<p>1010</p>\r\n</body>\r\n</html>',1437241692777,1437241692777,1,6,'',0,1,0,'<p>101010</p>',1437241692777);
/*!40000 ALTER TABLE `posts` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `system`
--

DROP TABLE IF EXISTS `system`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `system` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `SYSKey` varchar(100) NOT NULL,
  `SYSValue` varchar(5000) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `system`
--

LOCK TABLES `system` WRITE;
/*!40000 ALTER TABLE `system` DISABLE KEYS */;
INSERT INTO `system` VALUES (1,'Account','lele'),(2,'Password','479e5199fb6f7810c4c8d6bdabfdee19'),(3,'NickName','乐乐');
/*!40000 ALTER TABLE `system` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `tags`
--

DROP TABLE IF EXISTS `tags`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `tags` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` varchar(50) NOT NULL,
  `CreateTime` bigint(20) NOT NULL,
  `LastModifyTime` bigint(20) NOT NULL,
  `IsDeleted` tinyint(4) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `tags`
--

LOCK TABLES `tags` WRITE;
/*!40000 ALTER TABLE `tags` DISABLE KEYS */;
INSERT INTO `tags` VALUES (1,'linux',12312,12,1),(2,'C#',1212,1212,1),(3,'动漫2',23,1408754555877,1),(4,'经验',45245,1408754345337,1),(5,'Entity FrameWork',1409688627372,1409688627372,0),(6,'Code First',1409688627389,1409688627389,0),(7,'Linux.NET',1409699162133,1409699162133,0),(8,'Mono',1409699162141,1409699162141,0),(9,'Linux',1409699162148,1409699162148,0),(10,'.NET',1409699162154,1409699162154,0),(11,'Jexus',1409702950241,1409702950241,0),(12,'MVC',1409957217923,1409957217923,0),(13,'共享上网',1409959484620,1409959484620,0),(14,'PHP',1410046539726,1410046539726,0),(15,'算法',1410046845342,1410046845342,0),(16,'混合编程',1410050400188,1410050400188,0),(17,'OWIN',1410051462659,1410051462659,0),(18,'Windows',1414064718996,1414064718996,0),(19,'共享',1414064719007,1414064719007,0),(20,'系统服务',1414064719018,1414064719018,0),(21,'汇总',1414770223587,1414770223587,0),(22,'vNext',1417558466475,1417558466475,0),(23,'ASP.NET5',1417558466494,1417558466494,0),(24,'ORM',1425512502014,1425512502014,0),(25,'Shell',1425946850904,1425946850904,0),(26,'脚本',1425946850919,1425946850919,0),(27,'模拟环境',1430006934508,1430006934508,0),(28,'MinGW',1430006934524,1430006934524,0),(29,'C#',1430067154747,1430067154747,0),(30,'C',1430067154761,1430067154761,0),(31,'LVS',1431602627133,1431602627133,0),(32,'负载均衡',1431602627148,1431602627148,0);
/*!40000 ALTER TABLE `tags` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `visitsstatistics`
--

DROP TABLE IF EXISTS `visitsstatistics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `visitsstatistics` (
  `ID` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `Data` bigint(20) NOT NULL,
  `Counts` int(11) NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `visitsstatistics`
--

LOCK TABLES `visitsstatistics` WRITE;
/*!40000 ALTER TABLE `visitsstatistics` DISABLE KEYS */;
/*!40000 ALTER TABLE `visitsstatistics` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2015-08-13 22:48:48
